<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title></title>
 <link href="http:///atom.xml" rel="self"/>
 <link href="http://"/>
 <updated>2020-08-11T17:05:58+08:00</updated>
 <author>
   <name>zzj666</name>
   <email>zzj666#gmail.com</email>
 </author>

 
 <entry>
   <title>GB/T 13452.2-2008《色漆和清漆 漆膜厚度的测定》</title>
   <link href="http:///eng/GBT13452.2-2008-%E8%89%B2%E6%BC%86%E5%92%8C%E6%B8%85%E6%BC%86%E6%BC%86%E8%86%9C%E5%8E%9A%E5%BA%A6%E7%9A%84%E6%B5%8B%E5%AE%9A.html"/>
   <updated>2020-08-11T00:00:00+08:00</updated>
   <id>/eng/GBT13452.2-2008《色漆和清漆漆膜厚度的测定》</id>
   <content type="html">&lt;h1 id=&quot;gbt-134522-2008色漆和清漆-漆膜厚度的测定转&quot;&gt;GB/T 13452.2-2008《色漆和清漆 漆膜厚度的测定》&lt;script type=&quot;math/tex&quot;&gt;^{[转]}&lt;/script&gt;&lt;/h1&gt;

&lt;h3 id=&quot;1--范围&quot;&gt;1  范围&lt;/h3&gt;

&lt;p&gt;本部分规定了一系列用于测量涂敷至底材上的涂层的方法，包括测量湿膜厚度、干膜厚度、未固化粉末涂层厚度及粗糙表面上漆膜厚度的方法。在有个测试方法标准存在时，本部分直接引用这些标准，否则就把这些测试方法详细描述出来。&lt;/p&gt;

&lt;p&gt;附录A给出了测试方法概述，对每个测试方法规定了适用范围、现有标准和精密度&lt;/p&gt;

&lt;p&gt;本部分也对与漆膜厚度测量有关的术语作了定义。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;2--规范性引用文件&quot;&gt;2  规范性引用文件&lt;/h3&gt;

&lt;p&gt;下列文件中的条款通过GB/T13452的本部分的引用而成为本部分的条款。凡是注日期的引用文件，其随后所有的修改单（不包括勘误的内容）或修订均不适用于本部分，然而，鼓励根据本部分达成协议的各方研究是否可使用这些文件的全新版本。凡是不注日期的引用文件，其全新版本适用于本部分。&lt;/p&gt;

&lt;p&gt;ISO 463 产品几何量技术规范GPS） 尺寸量具 机械式千分表的设计和计量学特性&lt;/p&gt;

&lt;p&gt;ISO 3611 测量外部尺寸用螺旋测微器&lt;/p&gt;

&lt;p&gt;ISO 4618：2006 色漆和清漆术语和定义&lt;/p&gt;

&lt;p&gt;SIO 8503-1 涂装油漆和有关产品前钢材预处理 喷射清理钢材的表面粗糙度特性 第1部分：评定磨料喷射清理表面粗糙度的ISO比较样块的技术要求和定义。&lt;/p&gt;

&lt;h3 id=&quot;3--术语和定义&quot;&gt;3  术语和定义&lt;/h3&gt;

&lt;p&gt;ISO 4618:2006确定的以及下列术语和定义适用于。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;底材 substrate&lt;/p&gt;

&lt;p&gt;涂料涂敷或即将涂敷的表面&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;涂层 coating&lt;/p&gt;

&lt;p&gt;将涂料单次或多次涂敷至底材后形成的连续层&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;漆膜厚度 film thickness&lt;/p&gt;

&lt;p&gt;漆膜表面与底材表面间的距离&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;湿膜厚度 wet-film thickness&lt;/p&gt;

&lt;p&gt;涂料涂敷后立即测量得到的刚涂好的湿膜涂层厚度&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;干膜厚度 dry-film thickness&lt;/p&gt;

&lt;p&gt;涂料硬化后存留在表面上的涂层的厚度&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;未固化粉末涂层的厚度 thickness of uncured powder layer&lt;/p&gt;

&lt;p&gt;在粉末涂料涂敷后、烘烤前立即测量得到的刚涂好的粉末涂层的厚度&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;相关表面区域 relevant surface area&lt;/p&gt;

&lt;p&gt;物件表面被涂层覆盖或即将被覆盖的部分，该涂层是物件经久耐用和/或具有漂亮外观所必需的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.8&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;实验区域 test area&lt;/p&gt;

&lt;p&gt;相关表面区域中有代表性的部分，在该区域内以进行商定次数的单次测量作为抽查&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;测量区域 measurement area&lt;/p&gt;

&lt;p&gt;进行单次测量的区域&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最低局部漆膜厚度 minimum local film thickness&lt;/p&gt;

&lt;p&gt;在特定试样的相关表面区域发现的局部漆膜厚度的最低值&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.11&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最高局部漆膜厚度 maximum local film thickness&lt;/p&gt;

&lt;p&gt;在特定试样的相关表面区域发现的局部漆膜厚度的最高值&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.12&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;平均漆膜厚度 mean film thickness&lt;/p&gt;

&lt;p&gt;在试样区域所有单个漆膜厚度测量值得算术平均值或用重量分析法测量得的漆膜厚度结果&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.13&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;校准 calibration&lt;/p&gt;

&lt;p&gt;测量可溯源校准标准的受控和用文件记载的过程，并确定结果在测量仪器的指定精度范围内。注：初次校准通常由仪器生产商或有资格的实验室在受控环境中采用有文件记载的方法进行。用户再按规定的时间间隔核查初次校准结果。采用校准标准得到的测量结果的合成不确定度低于仪器的指定精度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;核查 verification&lt;/p&gt;

&lt;p&gt;由用户采用参照标准进行的精确性检查&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.15&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参照标准 reference standard&lt;/p&gt;

&lt;p&gt;对照已知厚度的试样的厚度值，用户能够核查测量仪器的准确性。&lt;/p&gt;

&lt;p&gt;注：参照标准可以是已涂漆的厚度或薄片，如果合同方商定，对特殊工作，可将试样的 某一部分作为厚度标准。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.16&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;调整 adjustment&lt;/p&gt;

&lt;p&gt;使测量仪器的厚度读数与参与参照标准的厚度值一致的操作&lt;/p&gt;

&lt;p&gt;注：在涂层或薄片的厚度已知时，大部分电学测量仪器能在厚度标准或薄片上进行调整。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.17&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;准确性 accuracy&lt;/p&gt;

&lt;p&gt;厚度标准的测量值与真实值之间的一致性。&lt;/p&gt;

&lt;h3 id=&quot;4--湿膜厚度的测定&quot;&gt;4  湿膜厚度的测定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;4.1 总则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;附录A给出了测量湿膜厚度的方法概述。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.2 机械法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4.2.1 原理&lt;/p&gt;

&lt;p&gt;在所有机械测试方法中，测试仪器的一部分穿过涂层与底材表面接触，仪器的另外一部分则同时与涂层表面接触（见图1），或者随后与涂层表面接触（见图2和图3）。湿膜厚度即为这两个接触点之间的高度差，该高度差能直接读出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310934491189.png&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310935243894.png&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.2.2 适用范围&lt;/p&gt;

&lt;p&gt;机械原理适用于所有漆膜底材组合。在测试区域，底材至少在一个方向上应是平整的。允许在某个面上表面弯曲（如管道的内表面或外表面）。&lt;/p&gt;

&lt;p&gt;4.2.3 总则&lt;/p&gt;

&lt;p&gt;试验方法分为破坏性方法和非破坏性方法，其归类取决于以下因素：&lt;/p&gt;

&lt;p&gt;a） 涂料的流动变形；&lt;/p&gt;

&lt;p&gt;a） 测试仪器的接触面与涂料间湿接触的性质；&lt;/p&gt;

&lt;p&gt;b） 厚度测量是否会使涂层使涂层不适合其预期的用途。&lt;/p&gt;

&lt;p&gt;由于不能排除有颜料粒子残留在仪表和底材间，所有机械测试方法都包含系统误差：显示的漆膜厚度至少比实际湿膜厚度低颜料粒子的一个平均直径。&lt;/p&gt;

&lt;p&gt;在使用轮规时（见4.2.5方法1B），轮子需用涂料润湿。如果不润湿，这将意味着会带来进一步的系统误差，使读数偏大，这是下列因素共同作用的结果：&lt;/p&gt;

&lt;p&gt;——表面张力和涂料的流变性；&lt;/p&gt;

&lt;p&gt;——轮规的材料；&lt;/p&gt;

&lt;p&gt;——轮子转动的速度。&lt;/p&gt;

&lt;p&gt;4.2.4 方法1A——梳规&lt;/p&gt;

&lt;p&gt;4.2.4.1 仪器说明&lt;/p&gt;

&lt;p&gt;梳规是一种由耐腐蚀材料制成的平板，有一系列齿状物排列在其边缘（见图1）。平板角落处的基准齿形成一条基线，沿着该基线排列的内齿与基准齿间形成一个累进的间隙系列。每一个内齿用给定的间隙深度值标示出来。&lt;/p&gt;

&lt;p&gt;市场上能够买到的梳规能测到最大厚度一般为2000μm，最小增量一般为5μm。&lt;/p&gt;

&lt;p&gt;4.2.4.2 步骤&lt;/p&gt;

&lt;p&gt;确保齿状物干净、没有磨损或破坏。把梳规放在平整的试样表面，使齿状物与试样表面垂直。应有足够的时间使涂料润湿齿状物，然后取走梳规。&lt;/p&gt;

&lt;p&gt;如果试样的一个面弯曲，梳规应以与该弯曲面的轴平行的位置放置。&lt;/p&gt;

&lt;p&gt;厚度测量结果与测量时间有关，因此应在涂料涂敷后尽快测量厚度。&lt;/p&gt;

&lt;p&gt;把被涂料润湿的内齿的最大间隙深度读数记录下来作为湿膜厚度。&lt;/p&gt;

&lt;p&gt;4.2.5 方法1B——轮规&lt;/p&gt;

&lt;p&gt;4.2.5.1 仪器说明&lt;/p&gt;

&lt;p&gt;轮规时由一个轮子构成，该轮子由耐腐蚀的淬火钢制成，轮子上有三个凸起的轮缘（见图2）。&lt;/p&gt;

&lt;p&gt;连个轮缘具有相同直径且轮子的轴呈同轴心安装。第三个轮缘直径较小且是偏心安装的。外面的一个轮缘上有刻度，从该刻度上能读出相对于偏心轮缘同心轮缘凸起的各个距离。&lt;/p&gt;

&lt;p&gt;两种模型：&lt;/p&gt;

&lt;p&gt;——模型1，偏心轮缘位于两个同心轮缘中间；&lt;/p&gt;

&lt;p&gt;——模型2，偏心轮缘位于两个同心轮缘的外面并紧靠其中一个轮缘。&lt;/p&gt;

&lt;p&gt;注：与模型1不同，模型2的设计使湿膜厚度的读数没有视差。&lt;/p&gt;

&lt;p&gt;市场上能够买到的轮规能测到的最大厚度一般为1500μm，最小增量一般为2μm。&lt;/p&gt;

&lt;p&gt;4.2.5.2 步骤&lt;/p&gt;

&lt;p&gt;用拇指和食指夹住轮轴来握住轮规，将刻度表上读数最大处与表面接触而将同心轮缘按在表面上。&lt;/p&gt;

&lt;p&gt;如果试样的一个面弯曲，轮规的轴应与该弯曲的轴平行。&lt;/p&gt;

&lt;p&gt;沿一个方向滚动轮规，然后将轮规从表面上拿起，取得偏心轮缘仍能被涂料润湿的最大刻度读数。清洗轮规，从另一个方向重复这一步骤。&lt;/p&gt;

&lt;p&gt;用这些读数的算术平均计算湿膜厚度。&lt;/p&gt;

&lt;p&gt;厚度测量结果与测量时间有关，因此应在涂料涂敷后尽快测量厚度。&lt;/p&gt;

&lt;p&gt;为降低表面张力对结果的影响，观察涂料如何润湿偏心轮缘并记录首次接触点的刻度读数。只有使用模型2的轮规才可能这样做。&lt;/p&gt;

&lt;p&gt;4.2.6 方法1C——千分表&lt;/p&gt;

&lt;p&gt;4.2.6.1 千分表（见图3）&lt;/p&gt;

&lt;p&gt;符合ISO 463要求的机械千分表和电子千分表能达到的测量精度一般分为5μm（机械千分表）和1μm（电子千分表），或者更好。千分表具有模拟或数字显示功能。&lt;/p&gt;

&lt;p&gt;千分表的下侧有两个长度相同、与活动的冲杆呈等距离排列的接触脚，并且与冲杆在同一直线上。调整螺钉可对冲杆在导轨中的位置进行微调。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310936156826.png&quot; alt=&quot;图3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.2.6.1.2 用于千分表调零的参照标准&lt;/p&gt;

&lt;p&gt;要求用平整的参照板进行千分表的调零。参照板有平整的玻璃板构成，其不平度容限不超过1μm（也可参见ISO）。&lt;/p&gt;

&lt;p&gt;4.2.6.2 步骤&lt;/p&gt;

&lt;p&gt;在参照板上将千分表调零，调整测量触点使之刚好与板接触。&lt;/p&gt;

&lt;p&gt;将冲杆从零位旋回。将千分表的接触脚与底材表面垂直的方向放在试样上，小心将冲杆旋下使测量触点刚好与涂料接触。&lt;/p&gt;

&lt;p&gt;厚度测量结果与测量时间有关，因此应在涂料涂敷后尽快测量厚度。&lt;/p&gt;

&lt;p&gt;从刻度表上直接读取湿膜厚度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.3 重量分析法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4.3.1 原理&lt;/p&gt;

&lt;p&gt;涂敷涂料，将涂敷的涂料质量除以涂料的密度以及涂敷的表面面积得到湿膜厚度。&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;t_w=\frac {m-m_0}{A·\rho}&lt;/script&gt;
式中：&lt;/p&gt;

&lt;p&gt;$ m_0 $——未涂漆试样的质量，单位为克（g）；&lt;/p&gt;

&lt;p&gt;m——已涂漆样式的质量，单位为克（g）；&lt;/p&gt;

&lt;p&gt;A——涂敷的表面面积，单位为平方米（㎡）；&lt;/p&gt;

&lt;p&gt;$ \rho $——涂敷的液体涂料的密度，单位为克/毫升(g/mL)&lt;/p&gt;

&lt;p&gt;注：涂敷的液体涂料的密度可按GB/T 6750、ISO 2811-2或ISO 2811-4中的规定进行测定。&lt;/p&gt;

&lt;p&gt;4.3.2 使用范围&lt;/p&gt;

&lt;p&gt;只要液体涂料中高挥发性物质的量较少，重量分析原理通常是适用的。&lt;/p&gt;

&lt;p&gt;4.3.3 总则&lt;/p&gt;

&lt;p&gt;采用重量分析原理测得的整个涂敷区域湿膜厚度的平均值。特别是在采用喷涂法施工时，试样的背面应遮住以避免由于背面的部分涂敷（喷溢）造成的测量误差。在称量已涂漆试样前，试样背面的任何遮蔽物都应该除去。&lt;/p&gt;

&lt;p&gt;4.3.4 方法2质量差值发&lt;/p&gt;

&lt;p&gt;4.3.4.1 仪器&lt;/p&gt;

&lt;p&gt;要求天平的最大称量范围为500g，精度为1mg。&lt;/p&gt;

&lt;p&gt;4.3.4.2 步骤&lt;/p&gt;

&lt;p&gt;先称量未涂漆试样的质量，然后再称量已涂漆试样的质量，根据式（1）计算湿膜厚度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.4 光热法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4.4.1 原理&lt;/p&gt;

&lt;p&gt;通过测定向涂层辐射的热波与返回的波（可以是热波和超声波）之间的时间差来测定漆膜厚度（见图4）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310938177681.png&quot; alt=&quot;图4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不管采用何种激励或者检查方法，所有光热法原理相同：即以热的形式向试样施加周期性或冲脉式能能，然后检查局部温度的升高情况。&lt;/p&gt;

&lt;p&gt;将试样上测得的时间差与采用相同仪器在固定条件下（激励能量、冲脉长度、激励频率等），对已知厚度的膜测得的值进行比较得到漆膜厚度（见4.4.4.2）。&lt;/p&gt;

&lt;p&gt;4.4.2 适用范围&lt;/p&gt;

&lt;p&gt;光热原理基本适用于所有漆膜-底材组合。只要多涂层体系中各涂层之间在导热性和放射性方面能很好地相互区分，该方法也可以用于测定各单一涂层的厚度。&lt;/p&gt;

&lt;p&gt;所要求的最低底材厚度因所用的测量系统（见4.4.4.1.1）和漆膜-底材组合而异。&lt;/p&gt;

&lt;p&gt;4.4.3 总则&lt;/p&gt;

&lt;p&gt;测试方法分为破坏性方法和非破坏性方法，其归类取决于涂层的用途。由于生产的局部热效应，涂层吸收热能对涂层可能会有影响（见图4中8）。&lt;/p&gt;

&lt;p&gt;4.4.4 方法3——用热性能测定&lt;/p&gt;

&lt;p&gt;4.4.4.1 仪器和参照标准&lt;/p&gt;

&lt;p&gt;4.4.4.1.1 测量系统&lt;/p&gt;

&lt;p&gt;有许多方法可在涂层材料商产生热波及检测试样中加热部位产生的热效应（参见 EN 15042-2）。热辐射源（如激光源、发光二极管、白炽光源）主要用作涂层的激励系统。&lt;/p&gt;

&lt;p&gt;可用下列检测方法：&lt;/p&gt;

&lt;p&gt;——检测返回的热辐射（光热辐射测量）；&lt;/p&gt;

&lt;p&gt;——检测折射指数的变化（在测量区域上方的热空气测量）；&lt;/p&gt;

&lt;p&gt;——热点检测（测量热流）；&lt;/p&gt;

&lt;p&gt;4.4.4.1.2 参照标准&lt;/p&gt;

&lt;p&gt;校准时需要用具有不同吸收性能和不同膜厚范围的参照标准（参加EN 15042-2）。&lt;/p&gt;

&lt;p&gt;4.4.4.2 校准&lt;/p&gt;

&lt;p&gt;对每一种漆膜-底材组合（尤其是对每一种涂料），用参照标准（见4.4.4.1.2）校准测量系统。&lt;/p&gt;

&lt;p&gt;4.4.4.3 &amp;gt;步骤&lt;/p&gt;

&lt;p&gt;按生产商说明操作仪器和测量漆膜厚度。&lt;/p&gt;

&lt;h3 id=&quot;5-干膜厚度的测定&quot;&gt;5 干膜厚度的测定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;5.1 总则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;附录A给出了测定干膜厚度的方法概述。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.2 机械法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.2.1 原理&lt;/p&gt;

&lt;p&gt;用测微计或千分表（见5.2.4方法4A）来测量漆膜厚度，即底材加漆膜的总厚度与底材厚度间的差值。&lt;/p&gt;

&lt;p&gt;有两种测定漆膜厚度的方法：&lt;/p&gt;

&lt;p&gt;a）在除去涂层前后测量（破坏性方法）&lt;/p&gt;

&lt;p&gt;先测量规定区域的总厚度，然后除去测量区域的涂层后再测量测量底材的厚度。&lt;/p&gt;

&lt;p&gt;b）在涂敷涂料前后测量（非破坏性方法）&lt;/p&gt;

&lt;p&gt;先测量底材厚度，在涂敷涂料后再测定相同测量区域的总厚度。&lt;/p&gt;

&lt;p&gt;漆膜厚度可从两个读数的差值计算得到。&lt;/p&gt;

&lt;p&gt;深度规（见5.2.5方法4B）或表面轮廓仪（见5.2.6方法4C）能直接测量漆膜厚度，即漆膜表面与暴露的底材表面间的高度差。&lt;/p&gt;

&lt;p&gt;注：只有“除去涂层”的测量方式可采用深度规或表面轮廓仪（方法4B和方法4C）进行测定。&lt;/p&gt;

&lt;p&gt;5.2.2 适用范围&lt;/p&gt;

&lt;p&gt;机械原理基本适用于所有漆膜-底材组合。在使用机械仪表测量时，底材和漆膜应有足够的硬度以免测量触点会产生压痕而导致读数错误。&lt;/p&gt;

&lt;p&gt;测微计或千分表（方法4A&amp;lt;）也适合测量具有圆形截面的圆柱形式的漆膜厚度（如电线、管道）。&lt;/p&gt;

&lt;p&gt;在有争议时，表面轮廓扫描仪（方法4C）为仲裁方法。&lt;/p&gt;

&lt;p&gt;5.2.3 总则&lt;/p&gt;

&lt;p&gt;在“涂敷涂料”测量方式下，用有标记孔的样规来保证是在同一点测量底材厚度和总厚度。&lt;/p&gt;

&lt;p&gt;注1：如果是塑料底材，最好采用“涂敷涂料”法，因为在大多数情况下很难在没有造成破坏的情况下就将底材暴露 出来。&lt;/p&gt;

&lt;p&gt;在“除去涂层”的测量方式下，可在测量区域画圆并作标记。应小心、完整地除去测量区域的涂层而 没有造成底材机械性或化学性损伤。在涂敷涂料前可用胶带将底材部分遮住以得到很好确定的由一层 至另一层的层次。&lt;/p&gt;

&lt;p&gt;在使用深度规或表面轮廓扫描仪（方法4B和方法4C）时，测量区域未除去的涂层应保持完好。 采用表面轮廓扫描仪(方法)，应能很好地确定底材与漆膜表面间的凸起部分。&lt;/p&gt;

&lt;p&gt;对硬底材(如玻璃)，涂层可用机械方法除去;但对次硬的底材（如钢板），可用化学方法除去涂层，如 使用溶剂或脱漆剂。&lt;/p&gt;

&lt;p&gt;注2：对次硬的底材，如钢板，可用直径为10爪瓜的空心钻切透漆膜，然后用溶剂或脱漆剂将形成的涂层原片除去。&lt;/p&gt;

&lt;p&gt;所有需要接触或测量的表面（涂层、底材、试样背面）应干净，没有起码残渣。&lt;/p&gt;

&lt;p&gt;5.2.4 方法4A——厚度差值法&lt;/p&gt;

&lt;p&gt;5.2.4.1 仪器说明&lt;/p&gt;

&lt;p&gt;5.2.4.1.1 测微计&lt;/p&gt;

&lt;p&gt;测微计测量时应能精确到5μm。测微计应配有齿杆以限制测量杆对测试表面施加的力。&lt;/p&gt;

&lt;p&gt;模型1——固定在基座上&lt;/p&gt;

&lt;p&gt;将具有平整测量面的测微计的一端夹紧在有平整基板的刚硬基座上，以使其高度能调节。测量面与基板的上表面平行对准。&lt;/p&gt;

&lt;p&gt;模型2——手握式（见图5）&lt;/p&gt;

&lt;p&gt;这类仪器的通用名是外卡规测微计，尽管它还被称为测量外部尺寸用的螺旋测微器（ISO 3611）测微计应符ISO3611的要求。测量杆的测量面和基准面应平整且相互平行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310938521634.png&quot; alt=&quot;图5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.2.4.1.2 千分表&lt;/p&gt;

&lt;p&gt;符合ISO 463要求的机械千分表和电子千分表的测量精度通常分别5μm（机械千分表）和1μm（电子千分表），或更好。千分表应配有能拾起测量触点的装置。应根据需要测试厚度的涂层材料的硬度选择测量触点的形状（对硬材料选择球形，对软材料选择平面形）。&lt;/p&gt;

&lt;p&gt;模型1——固定在基座上&lt;/p&gt;

&lt;p&gt;如图6所示将千分表夹紧在基座上。如果使平面形测量触点，测量面与基板的上表面平行对准。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310939172069.png&quot; alt=&quot;图6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;模型2——手握式&lt;/p&gt;

&lt;p&gt;这类千分表应配有手柄。用于提起冲杆的装置的形状应构造成能用一只手操作该厚度测试仪。基准面的可拆卸触点应位于可平移的测量触点的对面。应根据待测材料的硬度选择测量触点的形状（对硬材料选择球形，对软材料选择平面形）。&lt;/p&gt;

&lt;p&gt;如果测量触点和基准面都是平面形状（如图7所示测量薄片厚度的仪器），测量面应相互平行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310944467278.png&quot; alt=&quot;图7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.2.4.2 步骤&lt;/p&gt;

&lt;p&gt;按5.2.3规定准备“除去涂层”和“涂敷涂料”不同测量方式用试样（见5.2.1）。&lt;/p&gt;

&lt;p&gt;当采用“除去涂层”或“涂敷涂料”不同测量方式时，在操作所有仪器时，都应分别使试样的涂漆面或待涂漆的面面向测量杆（测微计，见5.2.4.1.1）或接触元件（千分表，见5.2.4.1.2）。&lt;/p&gt;

&lt;p&gt;在使用固定在基座上的仪器（5.2.4.1.1和5.2.4.1.2中的模型1）时，把试样放在基板上。&lt;/p&gt;

&lt;p&gt;在使用手握式仪器（5.2.4.1.1和5.2.4.1.2中的模型2）时，将试样紧贴着固定的测量触点并握住试样。&lt;/p&gt;

&lt;p&gt;注：5.2.4.1.1和5.2.4.1.2中的模型2中规定的仪器的手柄也能夹紧在基座上，便操作更加方便。&lt;/p&gt;

&lt;p&gt;在除去漆膜（“除去涂层”方式）或涂敷漆膜（“涂敷涂料”方式）后重复上述步骤进行第2次测量。&lt;/p&gt;

&lt;p&gt;按下述方法进行每次测量：&lt;/p&gt;

&lt;p&gt;——当使用5.2.4.1.1所述测微计时，移动测量杆至待测表面直到触动齿杆；&lt;/p&gt;

&lt;p&gt;——当使用5.2.4.1.2所述千分表时，使装有弹簧的接触元件的触头轻轻碰触测试表面。&lt;/p&gt;

&lt;p&gt;漆膜厚度值是总厚度读数与底材读数间的差值。&lt;/p&gt;

&lt;p&gt;5.2.5 方法4B——深度规&lt;/p&gt;

&lt;p&gt;5.2.5.1 仪器和参照标准&lt;/p&gt;

&lt;p&gt;5.2.5.1.1 模型1——深度规测微计（见图8）&lt;/p&gt;

&lt;p&gt;这种类型测微计测量时的测量精度通常为5μm或更好。测微计应配有齿杆以限制接触元件对底材施加的力，应有一个平整的基座或脚来放在涂漆表面上作为参照平面。&lt;/p&gt;

&lt;p&gt;5.2.5.1.2 模型2——深度千分表（见图9）&lt;/p&gt;

&lt;p&gt;符合ISO 463要求的机械千分表和电子千分表的测量精度通常分别为5μm（机械千分表）和1μm (电子千分表），或更好。千分表应有一个平整的基座或支脚来放在涂漆表面上作为参照平面。&lt;/p&gt;

&lt;p&gt;5.2.5.1.3 用作仪表调零的参照标准&lt;/p&gt;

&lt;p&gt;要求用平整的参照板来进行仪器的调零。参照板为平整的玻璃板，其不平度容限不超过1μm（也可参见ISO 1101)。&lt;/p&gt;

&lt;p&gt;5.2.5.2 步骤&lt;/p&gt;

&lt;p&gt;除去测量区域的涂层。通过用参照板（5.2.5.1.3）检查仪器的零点并调零，然后：&lt;/p&gt;

&lt;p&gt;a) 在使用深度测微计时，把支脚放在涂层表面，使测量杆位于暴露区域的上方，向下旋动测量杆直至触点接触底材并触动齿杆；&lt;/p&gt;

&lt;p&gt;b) 使用深度千分表时，把接触元件放在暴露的底材上方，其接触脚放在涂层上(如果千分表是有接触脚类型的，应小心确保接触脚与试样表面垂直)。&lt;/p&gt;

&lt;p&gt;可从深度读数直接读取漆膜厚度值(如需要，进行零点误差校准)。&lt;/p&gt;

&lt;p&gt;5.2.6 方法4C——表面轮廓扫描&lt;/p&gt;

&lt;p&gt;5.2.6.1 仪器说明&lt;/p&gt;

&lt;p&gt;该仪器有一个往复移动的触针，触针与合适的具有放大和记录功能的装置相连。为了测量漆膜厚 度，要先除去涂层的某一部分，再用仪器来记录底材与涂层间形成的凸起部分的轮廓（见图10）。选择具有与底材和漆膜表面的不平整度最匹配的触针尖端半径且能自由移动的触针的粗糙度仪或轮廓量规是最合适的。&lt;/p&gt;

&lt;p&gt;注：也可采用光学方法或声学方法进行测量（即不与试样发生任何接触）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310945538657.png&quot; alt=&quot;图10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.2.6.2 步骤&lt;/p&gt;

&lt;p&gt;按5.2.3的规定准备试样。用合适的监控绘图仪扫描并记录测量区域的表面轮廓。&lt;/p&gt;

&lt;p&gt;下列因素能对读数产生不利影响：&lt;/p&gt;

&lt;p&gt;——表面清理得不够干净；&lt;/p&gt;

&lt;p&gt;——测量系统的震动；&lt;/p&gt;

&lt;p&gt;——使用不合适的针尖。&lt;/p&gt;

&lt;p&gt;在记录的漆膜表面轨迹（上线）和底材表面轨迹（下线）的平均高度处分别画参照线。这两条参照线之间的距离即为凸起部分中点处的漆膜厚度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.3 重量分析法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.3.1 原理&lt;/p&gt;

&lt;p&gt;干膜厚度td，单位为微米(μm)，是根据未涂漆试样与已涂漆试样的质量差按式（2）计算得到：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t_p=\frac {m-m_0}{A·\rho_p}    ……………………………(4)&lt;/script&gt;

&lt;p&gt;式中：&lt;/p&gt;

&lt;p&gt;$m_0$——未涂漆样式的质量，单位为克（g）；&lt;/p&gt;

&lt;p&gt;m——已涂漆试样的质量，单位为克（g）；&lt;/p&gt;

&lt;p&gt;$\rho_p$——涂敷的干涂膜密度，单位为克每毫升（g/ml）。&lt;/p&gt;

&lt;p&gt;注：可按照GB/T 9272测定涂料的干涂膜密度。&lt;/p&gt;

&lt;p&gt;5.3.2 适用范围&lt;/p&gt;

&lt;p&gt;重量分析法具有通用性。&lt;/p&gt;

&lt;p&gt;5.3.3 总则&lt;/p&gt;

&lt;p&gt;采用重量分析法得到整个涂敷表面区域干膜厚度的平均值。特别是在采用喷涂施工时，试样的背 面应遮住以避免因背面的局部施涂（过喷）而造成的测量误差。&lt;/p&gt;

&lt;p&gt;5.3.4 方法5——质量差值法&lt;/p&gt;

&lt;p&gt;5.3.4.1 仪器&lt;/p&gt;

&lt;p&gt;要求天平最大称量范围为500g，精度为1mg。&lt;/p&gt;

&lt;p&gt;5.3.4.2 步骤&lt;/p&gt;

&lt;p&gt;在截面法（见5.4.4中方法6A）中，沿着涂层垂直的面磨/切割试样，这样漆膜厚度能直接使用&lt;a href=&quot;https://www.nbchao.com/list116/&quot;&gt;显微镜&lt;/a&gt;测量（见图11）。&lt;/p&gt;

&lt;p&gt;在楔形切割法（见5.4.5中方法6B）中，采用切割工具以与表面成规定的角度切割涂层得到规定尺寸的切割（见图12）。可用式（3）计算漆膜厚度t：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t=b·tan\alpha ...............(3)&lt;/script&gt;

&lt;p&gt;用特殊的刀在涂层上能得到对称楔形切割（图12中的3），用特殊的钻机在涂层上能得到锥形镗削（图12中的4），用切削工具能得到斜面切口（图12中的5）。&lt;/p&gt;

&lt;p&gt;5.4.2 适用范围&lt;/p&gt;

&lt;p&gt;光热原理于所有漆膜-底材组合。只要多涂层体系中各涂层之间能很好地相互区分，该方法也可用于测定各单一涂层的厚度。&lt;/p&gt;

&lt;p&gt;如果采用截法或楔形切割法，底材必须具有能被截切、钻孔成切割的性能。&lt;/p&gt;

&lt;p&gt;如有争议，截面法（见5.4.4中方法6A）被认为是仲裁法。&lt;/p&gt;

&lt;p&gt;5.4.3 总则&lt;/p&gt;

&lt;p&gt;试样应平整，能进行契形切割（见5.4.5.2的注）。&lt;/p&gt;

&lt;p&gt;如果涂层材料有弹性，截面法/契形切割会产生形变使得测量结果无效。切割前冷却试样可降低这种影响。&lt;/p&gt;

&lt;p&gt;如果涂层较脆和或粘结不充分，漆膜剥离使得难以判定涂层与底材间的真实界面，因而读数可能会有误差。&lt;/p&gt;

&lt;p&gt;5.4.4 方法6A——截面法&lt;/p&gt;

&lt;p&gt;5.4.4.1 模型1——采用磨削法&lt;/p&gt;

&lt;p&gt;5.4.4.1.1 仪器和材料&lt;/p&gt;

&lt;p&gt;5.4.4.1.1.1 磨削、抛光机&lt;/p&gt;

&lt;p&gt;用于得到金相制品的仪器室合适的。&lt;/p&gt;

&lt;p&gt;5.4.4.1.1.2 嵌入介质&lt;/p&gt;

&lt;p&gt;使用对涂层没有不利影响的冷固化树脂作为嵌入介质，得到没有缝隙的嵌入效果。&lt;/p&gt;

&lt;p&gt;5.4.4.1.1.3 磨削、抛光介质&lt;/p&gt;

&lt;p&gt;使用防水砂纸，如标号为280号、400号和600号的砂纸，或合适等级的金刚石浆状物或类似浆状物。&lt;/p&gt;

&lt;p&gt;5.4.4.1.1.4 测量显微镜&lt;/p&gt;

&lt;p&gt;需要一台具有合适光照系统、能给出最佳影像对比度的显微镜。选择放大倍数使得视场为1.5〜3倍的漆膜厚度。目镜或光电测量装置的测量精度至少为1μm。&lt;/p&gt;

&lt;p&gt;5.4.4.1.2 步骤&lt;/p&gt;

&lt;p&gt;将试样或有代表性的样品嵌入树脂中（5.4.4.1.1.2）。用磨削、抛光机（5.4.4.1.1.1）沿着与涂层表面垂直的平面湿拋光试样或样品。用更细等级的砂纸重复这一过程。用显微镜测量裸露涂层的厚度。&lt;/p&gt;

&lt;p&gt;5.4.4.2 模型2——切割法&lt;/p&gt;

&lt;p&gt;5.4.4.2.1 仪器&lt;/p&gt;

&lt;p&gt;5.4.4.2.1.1 切割机&lt;/p&gt;

&lt;p&gt;要求有一个往复移动式或旋转式检镜用刀，它具有合适几何形状的硬质合金刀片和能把试样夹紧固定的座架。&lt;/p&gt;

&lt;p&gt;5.4.4.2.1.2 测量显微镜&lt;/p&gt;

&lt;p&gt;需要一台具有合适光照系统、能给出最佳影像对比度的显微镜。选择放大倍数使得视场为1.5〜3倍的漆膜厚度。目镜或光电测量装置的测量精度至少为1μm。&lt;/p&gt;

&lt;p&gt;5.4.4.2.2 步骤&lt;/p&gt;

&lt;p&gt;把试样或从试样上取得的代表性样品夹紧固定在检镜用刀的样品座架上，并沿着与涂层表面垂直的面切割。用显微镜测量裸露涂层的厚度。&lt;/p&gt;

&lt;p&gt;5.4.5 方法6B——模型切割&lt;/p&gt;

&lt;p&gt;5.4.5.1 仪器&lt;/p&gt;

&lt;p&gt;5.4.5.1.1 总则&lt;/p&gt;

&lt;p&gt;楔形切割法需要切割机和测量显微镜，这两者可合并在一台仪器中。&lt;/p&gt;

&lt;p&gt;5.4.5.1.2 切割机&lt;/p&gt;

&lt;p&gt;切割机是刀具能更换的特殊仪器，能获得规定角度的精密切割。&lt;/p&gt;

&lt;p&gt;切割工具（切割刀片、特殊的涂料钻孔机或切削工具）应满足以下条件：&lt;/p&gt;

&lt;p&gt;——由硬质合金材料制成；&lt;/p&gt;

&lt;p&gt;——有精密的磨削、切割侧面；&lt;/p&gt;

&lt;p&gt;——合适的几何形状，以确保获得精确的楔形切割。&lt;/p&gt;

&lt;p&gt;标准的切割角度范围a=5.7°（tana=0.1）~a=45°之间。&lt;/p&gt;

&lt;p&gt;5.4.5.1.3 测量显微镜&lt;/p&gt;

&lt;p&gt;要求显微镜的放大倍数约为50且有光照装置。目镜的测量精度为20μm。&lt;/p&gt;

&lt;p&gt;5.4.5.2 步骤&lt;/p&gt;

&lt;p&gt;用毡制笔尖采用对比色标记出试样的测量区域。穿过标记，对试样进行切割或钻孔并透入底材内。采用显微镜用标记来对切割处或钻孔处进行定位，测量投影半宽度心用式（3）计算漆膜厚度（5.4.1）。&lt;/p&gt;

&lt;p&gt;注：对弯曲面不能用式（3）。然而对弯曲面的锥形镗削，可采用修改后的计算公式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.5 磁性法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.5.1 总则&lt;/p&gt;

&lt;p&gt;对大多数干膜厚度磁性测试仪，在读取读数前必须进行检查。在预期的涂膜厚度范围内按生产商 说明校验仪器。&lt;/p&gt;

&lt;p&gt;5.5.2 原理&lt;/p&gt;

&lt;p&gt;根据磁场与底材的相互作用测定漆膜厚度。根据从涂层移开磁体所需要的力（见5.5.5中方法7A）或磁体磁场的改变（分别见5.5.6、5.5.7和5.5. 8中方法7B、7C和7D）来测定漆膜厚度。&lt;/p&gt;

&lt;p&gt;5.5.3 使用范围&lt;/p&gt;

&lt;p&gt;磁性法适用于金属底材上的涂层。&lt;/p&gt;

&lt;p&gt;对方法7A、7B和7C,底材必须是铁磁性的；对方法7D，底材是非铁磁性的。&lt;/p&gt;

&lt;p&gt;涂层的性能使得仪器在接触涂层表面时读数有效。&lt;/p&gt;

&lt;p&gt;5.5.4 总则&lt;/p&gt;

&lt;p&gt;仪器产生的磁场受下列因素的影响：&lt;/p&gt;

&lt;p&gt;一一底材的几何形状(尺寸、曲率和厚度；&lt;/p&gt;

&lt;p&gt;——底材的性能(如导磁性、导电性及由于任何前处理所产生的性能；&lt;/p&gt;

&lt;p&gt;——底材的粗糙度；&lt;/p&gt;

&lt;p&gt;——其他磁场（底材的残余磁性和外部磁场）。&lt;/p&gt;

&lt;p&gt;5.5.5 方法7A——磁吸力脱离测试仪&lt;/p&gt;

&lt;p&gt;5.5.5.1 仪器&lt;/p&gt;

&lt;p&gt;仪器含有磁体，根据磁体与底材间的吸引力来测定漆膜厚度[见图13a）和13b）]。&lt;/p&gt;

&lt;p&gt;注：图13a）所示的仪器任何方位都可使用。图13b）所示的仪器由于重力作用设计成仅能在一个方向使用。&lt;/p&gt;

&lt;p&gt;5.5.5.2 步骤&lt;/p&gt;

&lt;p&gt;将仪器的磁体紧靠涂层放置仪器，以与涂层表面垂直的方向提起磁体远离涂层。漆膜厚度可根据从试样上移去磁体所需要的力得到。&lt;/p&gt;

&lt;p&gt;5.5.6 方法7B——磁通量测试仪&lt;/p&gt;

&lt;p&gt;5.5.6.1 仪器&lt;/p&gt;

&lt;p&gt;仪器含有磁体，根据由于底材的影响所导致的磁体磁场的改变来测定漆膜厚度，用霍尔探头测量磁场（见图14）。&lt;/p&gt;

&lt;p&gt;5.5.6.2 步骤&lt;/p&gt;

&lt;p&gt;以与涂层表面垂直的方向将仪器放在涂层上，从刻度盘直接读取厚度值或按生产商说明进行计算。&lt;/p&gt;

&lt;p&gt;5.5.7 方法7C——诱导磁性测试仪&lt;/p&gt;

&lt;p&gt;5.5.7.1 仪器&lt;/p&gt;

&lt;p&gt;仪器含有电磁体，根据电磁体接近铁磁性底材时磁场的改变来测定漆膜厚度（见图15）。电磁体会产生低频率（LF，如60Hz~400 Hz)交变电磁场（参见ISO 2718）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310949509234.png&quot; alt=&quot;图11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/20150731095008205.png&quot; alt=&quot;图12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.5.7.2 步骤&lt;/p&gt;

&lt;p&gt;以与涂层表面垂直的方向将仪器放在涂层上，根据磁通量的改变计算漆膜厚度。&lt;/p&gt;

&lt;p&gt;5.5.8 方法7D——涡流测试仪&lt;/p&gt;

&lt;p&gt;5.5.8.1 仪器&lt;/p&gt;

&lt;p&gt;仪器含有电磁体，根据导电性底材产生的涡流所引起的磁场的改变来测定漆膜厚度（见图16）。电磁体会产生高频率（HF，如0.1MHz~30 MHz)交变电磁场（参见ISO 2360）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310951065972.png&quot; alt=&quot;图16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.5.8.2 步骤&lt;/p&gt;

&lt;p&gt;以与涂层表面垂直的位置将仪器放在涂层上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.6 辐射法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.6.1 原理&lt;/p&gt;

&lt;p&gt;用放射性同位素作为辐射源，根据电离辐射与涂层间的相互作用测定漆膜厚度。&lt;/p&gt;

&lt;p&gt;5.6.2 适用范围&lt;/p&gt;

&lt;p&gt;辐射原理适用于任何漆膜—底材组合，只要涂料与底材的原子序数相差至少差5（参见ISO 3543）。&amp;lt;/p&lt;/p&gt;

&lt;p&gt;5.6.3 总则&lt;/p&gt;

&lt;p&gt;漆膜厚度的测量受下列因素的影响：&lt;/p&gt;

&lt;p&gt;一一底材的几何形状（尺寸、曲率）；&lt;/p&gt;

&lt;p&gt;一一涂层表面的杂质；&lt;/p&gt;

&lt;p&gt;——涂层密度的变化。&lt;/p&gt;

&lt;p&gt;5.6.4 方法8——β放射法&lt;/p&gt;

&lt;p&gt;5.6.4.1 仪器&lt;/p&gt;

&lt;p&gt;β反散射仪（见图17）由以下部分组成：&lt;/p&gt;

&lt;p&gt;一一辐射源（放射性同位素）主要发射出能量与待测漆膜厚度相适合的β粒子；&lt;/p&gt;

&lt;p&gt;——探头或测量系统有一系列孔隙，并且含有β检测器，能统计出反散射β粒子的数量（如盖革计数器）；&lt;/p&gt;

&lt;p&gt;一一数据处理和显示系统。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310952333570.png&quot; alt=&quot;图17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.6.4.2 校验&lt;/p&gt;

&lt;p&gt;如果需要，用标准物质校验和调整仪器，标准物质应尽可能具有与待检试样组成相同的涂层和底材。&lt;/p&gt;

&lt;p&gt;5.6.4.3 步骤&lt;/p&gt;

&lt;p&gt;按生产商说明操作仪器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.7 光热法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.7.1 原理&lt;/p&gt;

&lt;p&gt;通过测定向涂层辐射的热波与返回的波(可以是热波或超声波之间的时间差来测定漆膜厚度（见图18）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310953333595.png&quot; alt=&quot;图18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不管采用何种激励或检测方法，所有光热法原理相同：即以热的形式向试样施加周期性或脉冲式能 量，然后检测局部温度的升高情况。&lt;/p&gt;

&lt;p&gt;将在试样上测得的时间差与采用相同仪器在固定条件下（激励能量、脉冲长度、激励频率等）对已知厚度的膜测得的值进行比较得到漆膜厚度（见5.7.4.2）。&lt;/p&gt;

&lt;p&gt;5.7.2 适用范围&lt;/p&gt;

&lt;p&gt;光热原理基本适用于所有漆膜-底材组合。只要多涂层体系中各涂层之间在导热性和反射性方面 能很好地相互区分，该方法也可用于测定各单一涂层的厚度。&lt;/p&gt;

&lt;p&gt;所要求的最低底材厚度因所用的测量系统（见5.7.4.1.1）和漆膜-底材组合而异。&lt;/p&gt;

&lt;p&gt;5.7.3 总则&lt;/p&gt;

&lt;p&gt;测试方法分为破坏性方法和非破坏性方法，其归类取决于涂层的用途。由于产生的局部热效应，涂层吸收热能对涂层可能会有影响。&lt;/p&gt;

&lt;p&gt;5.7.4 方法9–用热性能测定&lt;/p&gt;

&lt;p&gt;5.7.4.1 仪器和参照标准&lt;/p&gt;

&lt;p&gt;5.7.4.1.2 测量系统&lt;/p&gt;

&lt;p&gt;有许多方法可在涂层材料上产生热波及检测试样中加热部位产生的热效应（参见EN 15042-2）。热辐射源（如激光源、发光二极管、白炽光源）主要用作涂层的激励系统。&lt;/p&gt;

&lt;p&gt;可用下列检测方法：&lt;/p&gt;

&lt;p&gt;——检测返回的热辐射（光热辐射测量）；&lt;/p&gt;

&lt;p&gt;——检测折射指数的变化（在测量区域上方的热空气中测量）&lt;/p&gt;

&lt;p&gt;——热电检测（测量热流）。&lt;/p&gt;

&lt;p&gt;5.7.4.1.2 参照标准&lt;/p&gt;

&lt;p&gt;校验时需要用具有不同吸收性能和不同膜厚范围的参照标准（参见EN 15042-2）。&lt;/p&gt;

&lt;p&gt;5.7.4.2 校验&lt;/p&gt;

&lt;p&gt;对每一种漆膜-底材组合（尤其是对每一种涂料），如果需要，用参照标准（见5.7.4.1.2）校验和调整测量系统。&lt;/p&gt;

&lt;p&gt;5.7.3 步骤&lt;/p&gt;

&lt;p&gt;按生产商说明操作仪器，从显示器上直接读取厚度值或按生产商说明进行计算。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.8 *&lt;em&gt;声波法*&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.8.1 原理&lt;/p&gt;

&lt;p&gt;在声波法中，漆膜厚度根据超声脉冲穿过涂层的传播时间来测定。&lt;/p&gt;

&lt;p&gt;5.8.2 适用范围&lt;/p&gt;

&lt;p&gt;声学原理适用于所有漆膜-底材组合。&lt;/p&gt;

&lt;p&gt;声速在同一种涂层中是相同的，与邻近涂层或底材中的声速有显著差异。&lt;/p&gt;

&lt;p&gt;注：涂层的不均匀性（如有铝粉存在）和底材的不均匀性（如木材的木纹）可能会影响结果。&lt;/p&gt;

&lt;p&gt;5.8.3 总则&lt;/p&gt;

&lt;p&gt;声场受底材的几何形状（尺寸、曲率和粗糙度）的影响。&lt;/p&gt;

&lt;p&gt;5.8.4 方法10——超声波测厚仪&lt;/p&gt;

&lt;p&gt;5.8.4.1 仪器&lt;/p&gt;

&lt;p&gt;仪器有超声波发送器和接收器，可根据声音传播时间来测定漆膜厚度（见图19）。&lt;/p&gt;

&lt;p&gt;5.8.4.2 步骤&lt;/p&gt;

&lt;p&gt;将耦合剂涂敷至需要测定厚度的涂层上。将仪器探头面平放在涂层上。按生产商说明操作仪器和测定结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.nbchao.com/system/upload/day_150731/201507310957067419.png&quot; alt=&quot;图19&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-未固化粉末涂层厚度的测定&quot;&gt;6 未固化粉末涂层厚度的测定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;6.1 总则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;附录A给出了测定未固化粉末涂层厚度的方法概述。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.2 重量分析法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;6.2.1 原理&lt;/p&gt;

&lt;p&gt;未固化粉末涂层的厚度tp，单位为微米（μm），是根据未涂漆试样与已涂漆试样的质量差按下述式（4）计算得到：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t_p=\frac{m-M_0}{A·\rho_p} .............(4)&lt;/script&gt;

&lt;p&gt;式中：&lt;/p&gt;

&lt;p&gt;$m_0$——未涂漆试样的质量，单位为克（g）；&lt;/p&gt;

&lt;p&gt;m——已涂漆试样的质量，单位为克（g）；&lt;/p&gt;

&lt;p&gt;A——涂敷的表面面积，单位为平方米（㎡）；&lt;/p&gt;

&lt;p&gt;$\rho_p$–涂敷的未固化粉末涂料的密度，单位为克每毫升（g/ml）。&lt;/p&gt;

&lt;p&gt;注：粉末涂料的密度可按ISO 8130-3测定。&lt;/p&gt;

&lt;p&gt;6.2.2 适用范围&lt;/p&gt;

&lt;p&gt;重量分析法具有通用性。&lt;/p&gt;

&lt;p&gt;6.2.3 总则&lt;/p&gt;

&lt;p&gt;采用重量分析法得到整个涂敷表面区域漆膜厚度的平均值。当涂敷粉末时，试样的背面应遮住以避免因背面的局部施涂（喷逸）而造成的测量误差。&lt;/p&gt;

&lt;p&gt;6.2.4 方法11——质量差值法&lt;/p&gt;

&lt;p&gt;6.2.4.1 仪器&lt;/p&gt;

&lt;p&gt;要求天平最大称量范围为500g，精度为1mg。&lt;/p&gt;

&lt;p&gt;6.2.4.2 步骤&lt;/p&gt;

&lt;p&gt;先称量干净的未涂漆试样的质量，涂漆，然后再称量已涂漆试样的质量，根椐式（4）计算漆膜厚度。 第二次称量应在粉末涂敷后立即进行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.3 磁性法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;6.3.1 原理&lt;/p&gt;

&lt;p&gt;根据磁场与金属底材间的相互作用测定漆膜厚度。根据磁场的改变得到漆膜厚度值。&lt;/p&gt;

&lt;p&gt;6.3.2 适用范围&lt;/p&gt;

&lt;p&gt;磁性法适用于涂漆的金属底材。&lt;/p&gt;

&lt;p&gt;对方法12A，底材必须是铁磁性的；对方法12B，底材必须是非铁磁性的。&lt;/p&gt;

&lt;p&gt;6.3.3 总则&lt;/p&gt;

&lt;p&gt;仪器产生的磁场受下列因素的影响：&lt;/p&gt;

&lt;p&gt;——底材的几何形状（尺寸和厚度）；&lt;/p&gt;

&lt;p&gt;——底材的性能（如导磁性、导电性及由任何前处理所产生的性能）；&lt;/p&gt;

&lt;p&gt;——底材的粗糙度；&lt;/p&gt;

&lt;p&gt;——其他磁场（底材的残余磁性和外部磁场）。&lt;/p&gt;

&lt;p&gt;只允许在平整表面上进行测量。&lt;/p&gt;

&lt;p&gt;6.3.4 方法12A——诱导磁性测试仪&lt;/p&gt;

&lt;p&gt;6.3.4.1 仪器&lt;/p&gt;

&lt;p&gt;仪器含有电磁体，根据电磁体接近铁磁性底材时磁场的改变来测定漆膜厚度（见图20）。电磁体会产生低频率（LF，如60Hz~400Hz）交变电磁场（参见ISO 2178）。&lt;/p&gt;

&lt;p&gt;放置探头时，应将探头对未固化粉末涂层厚度的影响控制到最小。&lt;/p&gt;

&lt;p&gt;6.3.4.2 步骤&lt;/p&gt;

&lt;p&gt;以与涂层表面垂直的方向将仪器放在涂层上，从显示器上直接读取厚度值或按生产商说明进行计算。&lt;/p&gt;

&lt;p&gt;6.3.5 方法12B——涡流测试仪&lt;/p&gt;

&lt;p&gt;6.3.5.1 仪器&lt;/p&gt;

&lt;p&gt;仪器含有电磁体，根据导电性底材产生的涡流所引起的磁场的改变来测定漆膜厚度（见图16）。电磁体会产生高频率（HF，如0.1MHz〜300.1MHz)交变电磁场（参见ISO 2360）。&lt;/p&gt;

&lt;p&gt;放置探头时，应将探头对未固化粉末涂层厚度的影响控制到最小。&lt;/p&gt;

&lt;p&gt;6.3.5.2 步骤&lt;/p&gt;

&lt;p&gt;以与涂层表面垂直的方向将仪器放在涂层上，从显示器上直接读取厚度值或按生产商说明进行计算。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.4 光热法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;6.4.1 原理&lt;/p&gt;

&lt;p&gt;通过测定向涂层辐射的热波与返回的波（可以是热波或超声波）之间的时间差来测定漆膜厚度（见图18）。&lt;/p&gt;

&lt;p&gt;不管采用何种激励或检测方法，所有光热法原理相同：即以热的形式向试样施加周期性或脉冲式能量，然后检测局部温度的升高情况。&lt;/p&gt;

&lt;p&gt;将在试样上测得的时间差与采用相同仪器在固定条件下（激励能量、脉冲长度、激励频率等）对已知厚度的膜测得的值进行比较得到漆膜厚度(见6.4.4.2）。&lt;/p&gt;

&lt;p&gt;6.4.2 适用范围&lt;/p&gt;

&lt;p&gt;光热原理基本适用于所有漆膜-底材组合。只要多涂层体系中各涂层之间在导热性和反射性方面能很好地相互区,该方法也可用于测定各单一涂层的厚度。&lt;/p&gt;

&lt;p&gt;所要求的最低底材厚度因所用的测量系统（见6.4.4.1.1）和漆膜-底材组合而异。&lt;/p&gt;

&lt;p&gt;6.4.3 总则&lt;/p&gt;

&lt;p&gt;测试方法分为破坏性方法和非破坏性方法，其归类取决于涂层的用途。由于产生的局部热效应，涂层吸收热能对涂层可能会有影响。&lt;/p&gt;

&lt;p&gt;6.4.4 方法13——用热性能测定&lt;/p&gt;

&lt;p&gt;6.4.4.1 仪器和参照标准&lt;/p&gt;

&lt;p&gt;6.4.4.1.1 测量系统&lt;/p&gt;

&lt;p&gt;有许多方法可在涂层材料上产生热波及检测试样中受热部位产生的热效应（参见EN 15042-2）。热辐射源（如激光源、发光二极管、白炽光源）主要用作涂层的激励系统。&lt;/p&gt;

&lt;p&gt;可用下列检测方法：&lt;/p&gt;

&lt;p&gt;一一检测返回的热辐射（光热辐射测量）；&lt;/p&gt;

&lt;p&gt;一一检测折射指数的变化（在测量区域上方的热空气中测量）；&lt;/p&gt;

&lt;p&gt;一一热电检测（测量热流）&lt;/p&gt;

&lt;p&gt;6.4.4.1.2 参照标准&lt;/p&gt;

&lt;p&gt;校验时需要用具有不同吸收性能和不同膜厚范围的参照标准(参见冗以15042~2「18”。&lt;/p&gt;

&lt;p&gt;6.4.4.2 校验&lt;/p&gt;

&lt;p&gt;对每一种漆膜-底材组合（尤其是对每一种漆膜材料），如果需要，可用参照标准（见6.4.4.1.2）校验和调整测量系统。&lt;/p&gt;

&lt;p&gt;6.4.4.3 步骤&lt;/p&gt;

&lt;p&gt;按生产商说明操作仪器，从显示器上直接读取厚度值或按生产商说明计算厚度。&lt;/p&gt;

&lt;h3 id=&quot;7-粗糙表面上漆膜厚度的测量&quot;&gt;7 粗糙表面上漆膜厚度的测量&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;7.1 总则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;底材表面的粗糙度情况会影响漆膜厚度测定结果。因而对喷射清理的钢底材，需要特殊考虑。如果将涂料涂敷至喷射清理的钢底材上，漆膜厚度的测量要比在光滑表面上的测量更为复杂。结果受底材性能的影响，点与点之间可能不同；也受测量设备设计的影响。实际上在测定喷射清理钢底材上漆膜 厚度时仪器的设定程序不同，会导致干膜厚度读数的明显不同。&lt;/p&gt;

&lt;p&gt;在喷射清理的表面上采用某种类型仪器测量，除了结果不同外，仪器调零也会存在许多问 题，如：&lt;/p&gt;

&lt;p&gt;——重复性差；&lt;/p&gt;

&lt;p&gt;一一把薄片放在这种表面上测得的厚度值多变（薄片越厚，薄片厚度的表观增量越大）&lt;/p&gt;

&lt;p&gt;一一当钢底材的表面粗糙度未知时会带来不确定性。&lt;/p&gt;

&lt;p&gt;本章所述方法的目的是在测定喷射清理钢底材上漆膜厚度时将结果的可变性降至最低，保持操作的一致性。在用诱导磁性测试仪测定粗糙表面上的漆膜厚度时，本方法要求仪器必须预先在光滑钢表面上调零。&lt;/p&gt;

&lt;p&gt;本方法从位于粗糙底材表面的峰和谷之间的虚拟平面处测量漆膜厚度，虚拟平面通常在峰下面25μm处[即约为喷射清理表面粗糙度的一半（喷射清理表面粗糙度用从底部到峰顶的高度来表示）]，表面处理成ISO 8503-1中规定的表面轮廓等级为“细”的表面例外。&lt;/p&gt;

&lt;p&gt;本方法描述了喷射清理钢底材上干涂层厚度有代表性的参数测定。为使结果有意义，用标准方法测到的实际漆膜厚度应不低于25μm，最好大于50μm。&lt;/p&gt;

&lt;p&gt;ISO 19840中描述了测定粗糙表面上涂层厚度的其他方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.2 仪器和材料&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;7.2.1 漆膜厚度测试仪，是诱导性类型的，在方法7C中使用（见5.5.7）。&lt;/p&gt;

&lt;p&gt;注：配有能计算测定值平均标准偏差和其他统计参数工具的设备应谨慎使用，并且最好应由在统计技术方面经过培训的人员使用。&lt;/p&gt;

&lt;p&gt;7.2.2 校验薄片是箔型的，有规定的厚度值（可溯源至国家认可的标准），其厚度与预期的漆膜厚度接近。&lt;/p&gt;

&lt;p&gt;注：允许使用未检定的薄片，只要在现场进行校验。&lt;/p&gt;

&lt;p&gt;7.2.3 光滑钢板，没有扎制铁鳞和锈，磁性和涂漆钢板相似，厚度至少为1.2mm，用于现场校验仪器。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.3 步骤&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;7.3.1 校验&lt;/p&gt;

&lt;p&gt;如果需要，在使用前按生产商说明校验并调整仪器。对钢板用光滑钢板校验，光滑钢板在使用前400号砂纸抛光以除去所有锈蚀物。校验薄片置于探头光滑钢板之间，用厚度高于和低于预期漆膜厚度的薄片校验。&lt;/p&gt;

&lt;p&gt;7.3.2 测量&lt;/p&gt;

&lt;p&gt;按仪器生产商说明用测量光滑钢板上干涂层的方法测量粗糙表面上的干涂层厚度。读数次数见7.3.3.&lt;/p&gt;

&lt;p&gt;7.3.3 读数次数&lt;/p&gt;

&lt;p&gt;对每个测试区域，建议至少取均匀分布的三个读数。&lt;/p&gt;

&lt;p&gt;指导性建议：对平板，每平方米至少取两个测试区域；对梁腹，每米长度取四个测试区域；对凸缘，每米长度取两个测试区域;对管道，每米长度取两个或多个测试区域（取决于管道直径）。&lt;/p&gt;

&lt;p&gt;对近海或其他海上工件，通常建议取更多的读数。&lt;/p&gt;

&lt;h3 id=&quot;8-试验报告&quot;&gt;8 试验报告&lt;/h3&gt;

&lt;p&gt;试验报告应包含以下信息：&lt;/p&gt;

&lt;p&gt;a）用于识别待测产品的所有必需信息（生产商、产品名称、批号等）；&lt;/p&gt;

&lt;p&gt;b）注明本标准编号（GB/T 13452.2）；&lt;/p&gt;

&lt;p&gt;c）所用方法和仪器；&lt;/p&gt;

&lt;p&gt;d）试验结果，包括每次测定的结果及其平均值；&lt;/p&gt;

&lt;p&gt;e）与规定的测试步骤的任何差异；&lt;/p&gt;

&lt;p&gt;f）试验时发现的任何异常现象；&lt;/p&gt;

&lt;p&gt;g）试验日期。&lt;/p&gt;

&lt;p&gt;如果需要，试验报告还可包含下列信息：&lt;/p&gt;

&lt;p&gt;h）底材的详细情况（材料、厚度及预处理）；&lt;/p&gt;

&lt;p&gt;i）用来涂敷底材的方法，是单一涂层还是多涂层体系；&lt;/p&gt;

&lt;p&gt;j）涂层干燥/固化（包括烘烤）的时间和条件，如需要，在报告中还可记录厚度测量前进行的任何陈化情况；&lt;/p&gt;

&lt;p&gt;k）相关表面区域、测试区域及每个测试区域进行测量的次数；&lt;/p&gt;

&lt;p&gt;l）平均漆膜厚度及其标准偏差、局部漆膜厚度及其标准偏差、局部漆膜厚度的最小值和最大值。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SSH 证书登录教程</title>
   <link href="http:///cs/SSH%E8%AF%81%E4%B9%A6%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B.html"/>
   <updated>2020-08-11T00:00:00+08:00</updated>
   <id>/cs/SSH证书登录教程</id>
   <content type="html">&lt;h1 id=&quot;ssh-证书登录教程转&quot;&gt;SSH 证书登录教程&lt;script type=&quot;math/tex&quot;&gt;^{[转]}&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;SSH 是服务器登录工具，提供密码登录和密钥登录。&lt;/p&gt;

&lt;p&gt;但是，SSH 还有第三种登录方法，那就是证书登录。很多情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;一非证书登录的缺点&quot;&gt;一、非证书登录的缺点&lt;/h2&gt;

&lt;p&gt;密码登录和密钥登录，都有各自的缺点。&lt;/p&gt;

&lt;p&gt;密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。&lt;/p&gt;

&lt;p&gt;密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。&lt;/p&gt;

&lt;h2 id=&quot;二证书登录是什么&quot;&gt;二、证书登录是什么？&lt;/h2&gt;

&lt;p&gt;证书登录就是为了解决上面的缺点而设计的。它引入了一个证书颁发机构（Certificate1 authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。&lt;/p&gt;

&lt;p&gt;登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。&lt;/p&gt;

&lt;p&gt;证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。&lt;/p&gt;

&lt;h2 id=&quot;三证书登录的流程&quot;&gt;三、证书登录的流程&lt;/h2&gt;

&lt;p&gt;SSH 证书登录之前，如果还没有证书，需要生成证书。具体方法是：（1）用户和服务器都将自己的公钥，发给 CA；（2）CA 使用服务器公钥，生成服务器证书，发给服务器；（3）CA 使用用户的公钥，生成用户证书，发给用户。&lt;/p&gt;

&lt;p&gt;有了证书以后，用户就可以登录服务器了。整个过程都是 SSH 自动处理，用户无感知。&lt;/p&gt;

&lt;p&gt;第一步，用户登录服务器时，SSH 自动将用户证书发给服务器。&lt;/p&gt;

&lt;p&gt;第二步，服务器检查用户证书是否有效，以及是否由可信的 CA 颁发。&lt;/p&gt;

&lt;p&gt;第三步，SSH 自动将服务器证书发给用户。&lt;/p&gt;

&lt;p&gt;第四步，用户检查服务器证书是否有效，以及是否由信任的 CA 颁发。&lt;/p&gt;

&lt;p&gt;第五步，双方建立连接，服务器允许用户登录。&lt;/p&gt;

&lt;h2 id=&quot;四生成-ca-的密钥&quot;&gt;四、生成 CA 的密钥&lt;/h2&gt;

&lt;p&gt;证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。&lt;/p&gt;

&lt;p&gt;虽然 CA 可以用同一对密码签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca&lt;/code&gt;，另一对是签发服务器证书的密钥，假设叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;host_ca&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用下面的命令，生成&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 生成 CA 签发用户证书的密钥&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/user_ca &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; user_ca
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的命令会在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt;目录生成一对密钥：&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca&lt;/code&gt;（私钥）和&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca.pub&lt;/code&gt;（公钥）。&lt;/p&gt;

&lt;p&gt;这个命令的各个参数含义如下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t rsa&lt;/code&gt;：指定密钥算法 RSA。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-b 4096&lt;/code&gt;：指定密钥的位数是4096位。安全性要求不高的场合，这个值可以小一点，但是不应小于1024。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f ~/.ssh/user_ca&lt;/code&gt;：指定生成密钥的位置和文件名。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-C user_ca&lt;/code&gt;：指定密钥的识别字符串，相当于注释，可以随意设置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用下面的命令，生成&lt;code class=&quot;highlighter-rouge&quot;&gt;host_ca&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 生成 CA 签发服务器证书的密钥&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; host_ca &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; host_ca
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的命令会在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt;目录生成一对密钥：&lt;code class=&quot;highlighter-rouge&quot;&gt;host_ca&lt;/code&gt;（私钥）和&lt;code class=&quot;highlighter-rouge&quot;&gt;host_ca.pub&lt;/code&gt;（公钥）。&lt;/p&gt;

&lt;p&gt;现在，&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt;目录应该至少有四把密钥。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/user_ca&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/user_ca.pub&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/host_ca&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/host_ca.pub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;五ca-签发服务器证书&quot;&gt;五、CA 签发服务器证书&lt;/h2&gt;

&lt;p&gt;有了 CA 以后，就可以签发服务器证书了。&lt;/p&gt;

&lt;p&gt;签发证书，除了 CA 的密钥以外，还需要服务器的公钥。一般来说，SSH 服务器（通常是&lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt;）安装时，已经生成密钥&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_host_rsa_key&lt;/code&gt;了。如果没有的话，可以用下面的命令生成。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_rsa_key &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面命令会在&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh&lt;/code&gt;目录，生成&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_host_rsa_key&lt;/code&gt;（私钥）和&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_host_rsa_key.pub&lt;/code&gt;（公钥）。然后，需要把服务器公钥&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_host_rsa_key.pub&lt;/code&gt;，复制或上传到 CA 所在的服务器。&lt;/p&gt;

&lt;p&gt;上传以后，CA 就可以使用密钥&lt;code class=&quot;highlighter-rouge&quot;&gt;host_ca&lt;/code&gt;为服务器的公钥&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_host_rsa_key.pub&lt;/code&gt;签发服务器证书。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; host_ca &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; host.example.com &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; host.example.com &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt; +52w ssh_host_rsa_key.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的命令会生成服务器证书&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_host_rsa_key-cert.pub&lt;/code&gt;（服务器公钥名字加后缀&lt;code class=&quot;highlighter-rouge&quot;&gt;-cert&lt;/code&gt;）。这个命令各个参数的含义如下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;：指定 CA 签发证书的密钥。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-I&lt;/code&gt;：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt;：指定该证书是服务器证书，而不是用户证书。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n host.example.com&lt;/code&gt;：指定服务器的域名，表示证书仅对该域名有效。如果有多个域名，则使用逗号分隔。用户登录该域名服务器时，SSH 通过证书的这个值，分辨应该使用哪张证书发给用户，用来证明服务器的可信性。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-V +52w&lt;/code&gt;：指定证书的有效期，这里为52周（一年）。默认情况下，证书是永远有效的。建议使用该参数指定有效期，并且有效期最好短一点，最长不超过52周。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_host_rsa_key.pub&lt;/code&gt;：服务器公钥。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成证书以后，可以使用下面的命令，查看证书的细节。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ssh_host_rsa_key-cert.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后，为证书设置权限。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 ssh_host_rsa_key-cert.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;六ca-签发用户证书&quot;&gt;六、CA 签发用户证书&lt;/h2&gt;

&lt;p&gt;下面，再用 CA 签发用户证书。这时需要用户的公钥，如果没有的话，客户端可以用下面的命令生成一对密钥。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/user_key &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面命令会在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt;目录，生成&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key&lt;/code&gt;（私钥）和&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key.pub&lt;/code&gt;（公钥）。&lt;/p&gt;

&lt;p&gt;然后，将用户公钥&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key.pub&lt;/code&gt;，上传或复制到 CA 服务器。接下来，就可以使用 CA 的密钥&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca&lt;/code&gt;为用户公钥&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key.pub&lt;/code&gt;签发用户证书。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; user_ca &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; user@example.com &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; user &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt; +1d user_key.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的命令会生成用户证书&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key-cert.pub&lt;/code&gt;（用户公钥名字加后缀&lt;code class=&quot;highlighter-rouge&quot;&gt;-cert&lt;/code&gt;）。这个命令各个参数的含义如下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;：指定 CA 签发证书的密钥&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-I&lt;/code&gt;：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n user&lt;/code&gt;：指定用户名，表示证书仅对该用户名有效。如果有多个用户名，使用逗号分隔。用户以该用户名登录服务器时，SSH 通过这个值，分辨应该使用哪张证书，证明自己的身份，发给服务器。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-V +1d&lt;/code&gt;：指定证书的有效期，这里为1天，强制用户每天都申请一次证书，提高安全性。默认情况下，证书是永远有效的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key.pub&lt;/code&gt;：用户公钥。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成证书以后，可以使用下面的命令，查看证书的细节。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; user_key-cert.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后，为证书设置权限。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 user_key-cert.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;七服务器安装证书&quot;&gt;七、服务器安装证书&lt;/h2&gt;

&lt;p&gt;CA 生成服务器证书&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_host_rsa_key-cert.pub&lt;/code&gt;以后，需要将该证书发回服务器，可以使用下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt;命令，将证书拷贝过去。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp ~/.ssh/ssh_host_rsa_key-cert.pub root@host.example.com:/etc/ssh/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后，将下面一行添加到服务器配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的代码告诉 sshd，服务器证书是哪一个文件。&lt;/p&gt;

&lt;p&gt;重新启动 sshd。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart sshd
&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;八服务器安装-ca-公钥&quot;&gt;八、服务器安装 CA 公钥&lt;/h2&gt;

&lt;p&gt;为了让服务器信任用户证书，必须将 CA 签发用户证书的公钥&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca.pub&lt;/code&gt;，拷贝到服务器。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp ~/.ssh/user_ca.pub root@host.example.com:/etc/ssh/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的命令，将 CA 签发用户证书的公钥&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca.pub&lt;/code&gt;，拷贝到 SSH 服务器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh&lt;/code&gt;目录。&lt;/p&gt;

&lt;p&gt;然后，将下面一行添加到服务器配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TrustedUserCAKeys /etc/ssh/user_ca.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的做法是将&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca.pub&lt;/code&gt;加到&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;，这会产生全局效果，即服务器的所有账户都会信任&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca&lt;/code&gt;签发的所有用户证书。&lt;/p&gt;

&lt;p&gt;另一种做法是将&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca.pub&lt;/code&gt;加到服务器某个账户的&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt;文件，只让该账户信任&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca&lt;/code&gt;签发的用户证书。具体方法是打开&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt;，追加一行，开头是&lt;code class=&quot;highlighter-rouge&quot;&gt;@cert-authority principals=&quot;...&quot;&lt;/code&gt;，然后后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca.pub&lt;/code&gt;的内容，大概是下面这个样子。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@cert-authority &lt;span class=&quot;nv&quot;&gt;principals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; ssh-rsa AAAAB3Nz...XNRM1EX2gQ&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面代码中，&lt;code class=&quot;highlighter-rouge&quot;&gt;principals=&quot;user&quot;&lt;/code&gt;指定用户登录的服务器账户名，一般就是&lt;code class=&quot;highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt;文件所在的账户。&lt;/p&gt;

&lt;p&gt;重新启动 sshd。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart sshd
&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;至此，SSH 服务器已配置为信任&lt;code class=&quot;highlighter-rouge&quot;&gt;user_ca&lt;/code&gt;签发的证书。&lt;/p&gt;

&lt;h2 id=&quot;九客户端安装证书&quot;&gt;九、客户端安装证书&lt;/h2&gt;

&lt;p&gt;客户端安装用户证书很简单，就是从 CA 将用户证书&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key-cert.pub&lt;/code&gt;复制到客户端，与用户的密钥&lt;code class=&quot;highlighter-rouge&quot;&gt;user_key&lt;/code&gt;保存在同一个目录即可。&lt;/p&gt;

&lt;h2 id=&quot;十客户端安装-ca-公钥&quot;&gt;十、客户端安装 CA 公钥&lt;/h2&gt;

&lt;p&gt;为了让客户端信任服务器证书，必须将 CA 签发服务器证书的公钥&lt;code class=&quot;highlighter-rouge&quot;&gt;host_ca.pub&lt;/code&gt;，加到客户端的&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_known_hosts&lt;/code&gt;文件（全局级别）或者&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/known_hosts&lt;/code&gt;文件（用户级别）。&lt;/p&gt;

&lt;p&gt;具体做法是打开&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_known_hosts&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;文件，追加一行，开头为&lt;code class=&quot;highlighter-rouge&quot;&gt;@cert-authority *.example.com&lt;/code&gt;，然后将&lt;code class=&quot;highlighter-rouge&quot;&gt;host_ca.pub&lt;/code&gt;文件的内容（即公钥）粘贴在后面，大概是下面这个样子。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@cert-authority &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.example.com ssh-rsa AAAAB3Nz...XNRM1EX2gQ&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面代码中，&lt;code class=&quot;highlighter-rouge&quot;&gt;*.example.com&lt;/code&gt;是域名的模式匹配，表示只要服务器符合该模式的域名，且签发服务器证书的 CA 匹配后面给出的公钥，就都可以信任。如果没有域名限制，这里可以写成&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;。如果有多个域名模式，可以使用逗号分隔；如果服务器没有域名，可以用主机名（比如&lt;code class=&quot;highlighter-rouge&quot;&gt;host1,host2,host3&lt;/code&gt;）或者 IP 地址（比如&lt;code class=&quot;highlighter-rouge&quot;&gt;11.12.13.14,21.22.23.24&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;然后，就可以使用证书，登录远程服务器了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ~/.ssh/user_key user@host.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面命令的&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;参数用来指定用户的密钥。如果证书与密钥在同一个目录，则连接服务器时将自动使用该证书。&lt;/p&gt;

&lt;h2 id=&quot;十一废除证书&quot;&gt;十一、废除证书&lt;/h2&gt;

&lt;p&gt;废除证书的操作，分成用户证书的废除和服务器证书的废除两种。&lt;/p&gt;

&lt;p&gt;服务器证书的废除，用户需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;文件里面，修改或删除对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;@cert-authority&lt;/code&gt;命令的那一行。&lt;/p&gt;

&lt;p&gt;用户证书的废除，需要在服务器新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/revoked_keys&lt;/code&gt;文件，然后在配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt;添加一行，内容如下。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RevokedKeys /etc/ssh/revoked_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;revoked_keys&lt;/code&gt;文件保存不再信任的用户公钥，由下面的命令生成。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-kf&lt;/span&gt; /etc/ssh/revoked_keys &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; 1 ~/.ssh/user1_key.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面命令中，&lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt;参数用来指定用户公钥保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;revoked_keys&lt;/code&gt;文件的哪一行，这个例子是保存在第1行。&lt;/p&gt;

&lt;p&gt;如果以后需要废除其他的用户公钥，可以用下面的命令保存在第2行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-ukf&lt;/span&gt; /etc/ssh/revoked_keys &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; 2 ~/.ssh/user2_key.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;十二参考链接&quot;&gt;十二、参考链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://smallstep.com/blog/ssh-emergency-access/&quot;&gt;SSH Emergency Access&lt;/a&gt;, Carl Tashian&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-using_openssh_certificate_authentication&quot;&gt;Using OpenSSH Certificate Authentication&lt;/a&gt;, Red Hat Enterprise Linux Deployment Guide&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gravitational.com/blog/how-to-ssh-properly/&quot;&gt;How to SSH Properly&lt;/a&gt;, Gus Luxton&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>An improved software development workflow to build better products and features</title>
   <link href="http:///cs/An-improved-software-development-workflow-to-build-better-products-and-features.html"/>
   <updated>2020-08-07T00:00:00+08:00</updated>
   <id>/cs/An improved software development workflow to build better products and features</id>
   <content type="html">&lt;h1 id=&quot;an-improved-software-development-workflow-to-build-better-products-and-features转&quot;&gt;An improved software development workflow to build better products and features&lt;script type=&quot;math/tex&quot;&gt;^{[转]}&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/size/w2000/2020/04/simple-development-workflow.jpeg&quot; alt=&quot;An improved software development workflow to build better products and features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The need to improve the development workflow is on top of every software team’s mind.&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;Is there a way to get my team to ship features faster? How to build features with fewer bugs?&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;And since you’re reading this guide, I’m sure you’re asking these questions too!
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;We’ll cover in this guide:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://zepel.io/blog/simple-software-development-workflow/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=git-workflow#what&quot;&gt;What software development workflow looks like in most organizations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zepel.io/blog/simple-software-development-workflow/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=git-workflow#causes&quot;&gt;What causes inefficiencies in the workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zepel.io/blog/simple-software-development-workflow/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=git-workflow#better&quot;&gt;A better software development workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-software-development-workflow-looks-like-in-most-teams&quot;&gt;What software development workflow looks like in most teams&lt;/h2&gt;

&lt;p&gt;For most teams, software development looks like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The product manager, along with customer-facing teams, spends time talking to existing customers and potential customers to understand about the market.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Depending on the business needs and customer requirements derived from the previous step, the product manager prioritizes features the team needs to focus on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Using the information gathered, the prioritized features are spec’d with User Stories, Tasks, and Enhancements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These actionable items are then shared with a cross-functional team to estimate, further prioritize, and then tracked using either Scrum or a Kanban to ship the feature within a deadline.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/04/product-development-1.png&quot; alt=&quot;How software development happens in most organizations&quot; /&gt;What software development looks like in most organizations&lt;/p&gt;

&lt;p&gt;Looks pretty simple, right?&lt;/p&gt;

&lt;p&gt;However, every step from market research to feature deploy has invisible inefficiencies within them. According to market research firm IDC, companies end up &lt;a href=&quot;https://www.dummies.com/business/human-resources/workplace/how-inefficiency-negatively-impacts-your-business/&quot;&gt;losing 20 to 30 percent in revenue every year due to inefficiencies&lt;/a&gt;. And that, of course, is a lot!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Seemingly small and invisible inefficiencies within your development workflow compound over time, cause a dip in productivity, and ultimately lead to unhappy customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Issues in your workflow may seem small at first, but without special attention, they add up, and become extremely apparent over time.&lt;/p&gt;

&lt;p&gt;Over the past couple of years, we’ve built a collaborative workflow that brings together members from across functions and ship quality features and make customers happy. This guide will walk you through our development workflow and how we think about it at Zepel.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-causes-inefficiencies-in-the-software-development-workflow&quot;&gt;What causes inefficiencies in the software development workflow?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Because how can you improve your workflow if you don’t know what to improve upon in the first place?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like many teams, we made the mistake of thinking, “&lt;em&gt;Setting a workflow is about moving tasks and user stories from one column to another”&lt;/em&gt;. And boy, we couldn’t have been more wrong.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A software development workflow isn’t about moving cards from one column to another. It’s all the invisible flow of information too!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at the 3 causes for a broken software development workflow:&lt;/p&gt;

&lt;h3 id=&quot;1-laser-focussed-on-a-specific-task&quot;&gt;1. Laser focussed on a specific task&lt;/h3&gt;

&lt;p&gt;In the last 10 years, far too many project management tools have been pushing the notion that you need to focus on just the things you care about.&lt;/p&gt;

&lt;p&gt;Sure, that’s important. But software development isn’t just about checking off tasks. After all, the best developers are the ones who can focus on the fine implementation details while still having a picture of the broader purposes of the feature as a whole.&lt;/p&gt;

&lt;p&gt;By being laser focussed on just the tasks assigned to themselves, development teams miss the forest for the trees.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/C9QalsL2dWHcIS4pt-wUcs-PabXPLgiEK9a2s44cC04GbF850a7p119smKglGDo6dkVr4yHSg5E-Ru6ZZXoA6f4jPvedEKVOKCrXsCM8H-HfO23x2YukjSRp6Ke5x5mQx4jQbvsH&quot; alt=&quot;The multiple challenges and needs of project management&quot; /&gt;The pyramid of development tracking needs&lt;/p&gt;

&lt;h3 id=&quot;2-greater-emphasis-on-the-process-than-productivity&quot;&gt;2. Greater emphasis on the process than productivity&lt;/h3&gt;

&lt;p&gt;While processes are great, we must understand they’re put in place to help your team stay productive and produce a desirable outcome. A mistake many teams make is overemphasizing teams to follow a process when it isn’t helping.&lt;/p&gt;

&lt;p&gt;A good example of this can be seen when teams implement agile processes by the book in the hope of making their team &lt;em&gt;agile&lt;/em&gt;. It’s important to keep in mind that processes need to be built with people in mind. And not with rules.&lt;/p&gt;

&lt;p&gt;What good is a process if it hinders your team from being nimble and moving fast anyway?&lt;/p&gt;

&lt;h3 id=&quot;3-building-complex-rigid-workflows-to-get-updates-at-every-step&quot;&gt;3. Building complex, rigid workflows to get updates at every step&lt;/h3&gt;

&lt;p&gt;Workflows are simple when a team is small. As teams grow, the first thing that gets introduced is complexity. Developers and designers work in silos, without any awareness of what the other team was working on.&lt;/p&gt;

&lt;p&gt;As each phase of the software development occurs in different tools and key pieces of information is lost when teams handoff.&lt;/p&gt;

&lt;p&gt;To keep the development workflow in motion, you need a seamless hand-over between teams. And this needs to happen while each of them focuses on the task at hand without losing sight of the big picture.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;an-improved-development-workflow&quot;&gt;An improved development workflow&lt;/h2&gt;

&lt;p&gt;Contrary to common misunderstanding, software development is a dynamic structure and is rarely static. A considerable effort is needed as new functionalities or constraints are added to the system.&lt;/p&gt;

&lt;p&gt;This means, there are far too many moving parts to consider that simple task and issue tracking tools just don’t fall short.&lt;/p&gt;

&lt;p&gt;The development workflow when building software needs to allow teams to achieve three things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Get visibility at a specific task and the broader picture.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduce complexity by not having to set up configurations and stitched processes.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduce tools to streamline the process, so team members don’t have to be clueless about where to look for the most recent information.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The aim was to connect a deeper, connected workflow that allowed the team to do deep work by collaborating cross-functionally and get all the context they needed.&lt;/p&gt;

&lt;p&gt;Naturally, we use &lt;a href=&quot;https://zepel.io/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=development-workflow&quot;&gt;Zepel&lt;/a&gt; to improve our development workflow and here’s how we did it. Let’s dive in and look at it step-by-step.&lt;/p&gt;

&lt;h3 id=&quot;eliminate-ambiguity-by-creating-alignment&quot;&gt;Eliminate ambiguity by creating alignment.&lt;/h3&gt;

&lt;p&gt;Delivering quality features at every interaction requires alignment from multiple teams and it shouldn’t be a passive process. At Zepel, everything starts with bringing everyone up to speed on the priorities. That means, sharing with the team on the features we need to be working on in the coming weeks and months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/03/sprint-planning-roadmap.png&quot; alt=&quot;Get a quick overview of the roadmap and track progress with Kanban view of all features&quot; /&gt;Get a quick overview of the roadmap and track its progress&lt;/p&gt;

&lt;p&gt;Based on the conversations our product team has with the customers and the business needs, the most important features are moved to the top of the todo column. A duration and an owner are set later on after the feature is spec’d and we have an estimate from the development team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This gives every single member a complete picture of what our priorities are, even when things change due to unforeseen circumstances.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;think-big-start-small&quot;&gt;Think big, start small.&lt;/h3&gt;

&lt;p&gt;Once the top priority features are prioritized, the product manager jumps in to drill into the specifics of all the functionalities of the feature by writing detailed user stories, tasks, and enhancements. And how each functionality should behave by writing detailed acceptance criteria as descriptions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/03/updated-list-of-user-stories-for-sprint-planning.png&quot; alt=&quot;A list of user stories, tasks, subtasks, bugs, and enhancements&quot; /&gt;A list of user stories, bugs, enhancements, tasks, and subtasks&lt;/p&gt;

&lt;p&gt;We group and categorize user stories and tasks under Sections to make it easier to understand for anyone new whom we might collaborate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This view makes it easy for the product manager to plan features. And gives them (and anyone who’s collaborated later on) a neat document-like view of what the feature is really about.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;putting-an-end-to-countless-whats-the-update&quot;&gt;Putting an end to countless “What’s the update?”&lt;/h3&gt;

&lt;p&gt;After the feature is spec’d and all user stories are written, we plan and add prioritized items into the &lt;a href=&quot;https://zepel.io/features/sprints/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=development-workflow&quot;&gt;Sprint&lt;/a&gt;. By now, all the planning is complete and we’re in the execution mode. At this stage, we assign specific user stories and tasks.&lt;/p&gt;

&lt;p&gt;One thing we’re still learning and trying to understand is if it’s okay to add an item to a sprint after it has begun. There are tons of opinions on this one on the internet and we’re still figuring what works for us in this aspect. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/03/sprint-planning-template.png&quot; alt=&quot;Tracking the development using Sprint&quot; /&gt;Tracking the progress of a sprint&lt;/p&gt;

&lt;p&gt;Since Zepel has a dedicated Sprint view, our team gets all the updates about that specific Sprint in one place — burndown charts, burnup charts, sprint overview, scrum board, and sprint backlog.&lt;/p&gt;

&lt;p&gt;Before the Sprint begins, the development team makes sure they’ve configured Zepel’s GitHub integration to automate their work based on their &lt;a href=&quot;https://zepel.io/blog/5-git-workflows-to-improve-development/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=development-workflow&quot;&gt;Git Workflows&lt;/a&gt;. This allows them to just focus on their work, so they don’t have to come back to the app every time they need to provide an update.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you’re not a GitHub user, &lt;a href=&quot;https://zepel.io/guide/integrations/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=development-workflow&quot;&gt;Zepel also integrates with Bitbucket and GitLab&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/01/zepel-git-workflow-automation.png&quot; alt=&quot;GitHub, Bitbucket, and GitLab integration in Zepel&quot; /&gt;Automating Zepel to update statuses based on Git development workflow.&lt;/p&gt;

&lt;p&gt;As the Sprint progresses and the development team makes progress, our product person and engineering head can quickly open up specific items to see all their Git activity inside Zepel. This gives them a snapshot of the progress at a specific item.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/01/Screen-Shot-2020-01-13-at-10.58.06-AM.png&quot; alt=&quot;Zepel integration with GitHub, BitBucket, and GitLab&quot; /&gt;Real-time updates on every commit, pull request, and branch changes.&lt;/p&gt;

&lt;p&gt;Since we’ve already enabled Slack integration, every time a developer adds a commit, merges a branch, or opens a PR, statuses are automatically updated in Zepel and everyone is automatically notified through Slack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/04/zepel-git-developer-workflow.png&quot; alt=&quot;Developer Workflow with GitHub, Zepel, and Slack Integrations&quot; /&gt;A simple flowchart of how developer workflow is automated with GitHub, Zepel, and Slack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This gives our development team the freedom to work from within their code editor and GitHub, and not worry about updating progress.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;collaboration-alone-isnt-enough-enable-seamless-handoff&quot;&gt;Collaboration alone isn’t enough. Enable seamless handoff.&lt;/h3&gt;

&lt;p&gt;In software development, collaborating within a dev team isn’t enough. You need to be able to collaborate cross-functionally and hand-over information. This is critical because, without the right information and context, everyone will be working with different assumptions, leading to a delay in the feature release.&lt;/p&gt;

&lt;p&gt;For small teams, this could be a single &lt;a href=&quot;https://zepel.io/kanban-software/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=development-workflow&quot;&gt;Kanban board&lt;/a&gt; with four or five statuses. In this case, the team composition is primarily the developers with probably one designer or a QA person in the mix.&lt;/p&gt;

&lt;p&gt;However, if you’re a bigger team and have more members involved in building the feature, having a single board with ten status columns to accommodate every function will not be efficient.&lt;/p&gt;

&lt;p&gt;To combat this, we add a board for each team. Like in any board, we move each user story from one column to another. Unlike other tools, Zepel’s &lt;a href=&quot;https://zepel.io/kanban-software/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=development-workflow&quot;&gt;kanban board software&lt;/a&gt; also allows us to move a &lt;a href=&quot;https://zepel.io/agile/user-stories/&quot;&gt;user story&lt;/a&gt; from one board to another when we want to collaborate cross-functionally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This allows our designer to move a user story from Design board to Dev board’s Todo column once the designer has the final version of the design ready.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/04/multiple-boards.png&quot; alt=&quot;Boards in Zepel&quot; /&gt;Adding a board for each team involved in the project&lt;/p&gt;

&lt;p&gt;This is automatically reflected everywhere in the app, so everyone knows which board a user story is currently in and gives them a clear picture of what’s happening. &lt;strong&gt;This lets us see progress at a specific team and manage workload with filters without having to set up messy configurations.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A development workflow isn’t just about the columns in your Kanban board. It’s also about all the other details that get missed out in between the two columns.&lt;/p&gt;

&lt;p&gt;As teams grow, there will be a lack of visibility in the day-to-day activities, additional communication overhead between teams will creep in, and general confusion around responsibilities will begin to come up.&lt;/p&gt;

&lt;p&gt;An even bigger problem is being able to take all the micro-level progress from multiple teams and understanding how it impacts the progress at the feature level.&lt;/p&gt;

&lt;p&gt;This workflow has allowed us to build complex features while staying nimble enough to fix major issues and address customer requests. Of course, this workflow is a work in progress. I hope this peek into our development workflow helps inspire you and your team to identify and streamline your workflow, so you can ship quality software all the time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>5 Git workflows you can use to deliver better code and improve your development process</title>
   <link href="http:///cs/5Gitworkflows.html"/>
   <updated>2020-08-07T00:00:00+08:00</updated>
   <id>/cs/5Gitworkflows</id>
   <content type="html">&lt;h1 id=&quot;5-git-workflows-you-can-use-to-deliver-better-code-and-improve-your-development-process转&quot;&gt;5 Git workflows you can use to deliver better code and improve your development process$^{[转]}$&lt;/h1&gt;

&lt;p&gt;I haven’t met a developer who looked at a conflict message and did not pull their hair strands with frustration.&lt;/p&gt;

&lt;p&gt;Trying to resolve each merge conflict is one of those things that every developer hates. Especially if it hits you when you’re gearing up for a production deploy!&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/size/w2000/2020/05/git-workflow.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This is where having the right Git workflow set up can do a world of good for your &lt;a href=&quot;https://zepel.io/blog/simple-software-development-workflow/?utm_source=zepelblog&amp;amp;utm_medium=text&amp;amp;utm_campaign=git-workflow&quot;&gt;development workflow&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, having the right git workflow will not solve all your problems. But it’s a step in the right direction. After all, with every team working remotely, the need to build features together without having your codebase getting disrupted is critical.&lt;/p&gt;

&lt;p&gt;How you set it up depends on the project you’re working on, the release schedules your team has, the size of the team, and more!&lt;/p&gt;

&lt;p&gt;In this article, we’ll walk you through 5 different git workflows, their benefits, their cons, and when you should use them. Let’s jump in!&lt;/p&gt;

&lt;p&gt;## 1. Basic Git Workflow&lt;/p&gt;

&lt;p&gt;The most basic git workflow is the one where there is only one branch — the master branch. Developers commit directly into it and use it to deploy to the staging and production environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/05/Basic-git-workflow-3.png&quot; alt=&quot;Basic Git Workflow with all commits getting added directly to master branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This workflow isn’t usually recommended unless you’re working on a side project and you’re looking to get started quickly.&lt;/p&gt;

&lt;p&gt;Since there is only one branch, there really is no process over here. This makes it effortless to get started with Git. However, some cons you need to keep in mind when using this workflow are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Collaborating on code will lead to multiple conflicts.&lt;/li&gt;
  &lt;li&gt;Chances of shipping buggy software to production is higher.&lt;/li&gt;
  &lt;li&gt;Maintaining clean code is harder.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-git-feature-branch-workflow&quot;&gt;2. Git Feature Branch Workflow&lt;/h2&gt;

&lt;p&gt;The Git Feature Branch workflow becomes a must have when you have more than one developer working on the same codebase.&lt;/p&gt;

&lt;p&gt;Imagine you have one developer who is working on a new feature. And another developer working on a second feature. Now, if both the developers work from the same branch and add commits to them, it would make the codebase a huge mess with plenty of conflicts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/05/Feature-Branch-git-workflow-4.png&quot; alt=&quot;Git feature branch workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To avoid this, the two developers can create two separate branches from the master branch and work on their features individually. When they’re done with their feature, they can then merge their respective branch to the master branch, and deploy without having to wait for the second feature to be completed.&lt;/p&gt;

&lt;p&gt;The Pros of using this workflow is, the git feature branch workflow allows you to collaborate on code without having to worry about code conflicts.&lt;/p&gt;

&lt;h2 id=&quot;3-git-feature-workflow-with-develop-branch&quot;&gt;3. Git Feature Workflow with Develop Branch&lt;/h2&gt;

&lt;p&gt;This workflow is one of the more popular workflows among developer teams. It’s similar to the Git Feature Branch workflow with a develop branch that is added in parallel to the master branch.&lt;/p&gt;

&lt;p&gt;In this workflow, the master branch always reflects a production-ready state. Whenever the team wants to deploy to production they deploy it from the master branch.&lt;/p&gt;

&lt;p&gt;The develop branch reflects the state with the latest delivered development changes for the next release. Developers create branches from the develop branch and work on new features. Once the feature is ready, it is tested, merged with develop branch, tested with the develop branch’s code in case there was a prior merge, and then merged with master.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/05/feature-branch-with-develop-git-workflow-2.png&quot; alt=&quot;Git workflow with feature and develop branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The advantage of this workflow is, it allows teams to consistently merge new features, test them in staging, and deploy to production. While maintaining code is easier, it can get a little tiresome for some teams since it can feel like going through a tedious process.&lt;/p&gt;

&lt;h2 id=&quot;4-gitflow-workflow&quot;&gt;4. Gitflow Workflow&lt;/h2&gt;

&lt;p&gt;The gitflow workflow is very similar to the previous workflow we discussed combined with two other branches — the release branch and the hot-fix branch.&lt;/p&gt;

&lt;h3 id=&quot;the-hot-fix-branch&quot;&gt;The hot-fix branch&lt;/h3&gt;

&lt;p&gt;The hot-fix branch is the only branch that is created from the master branch and directly merged to the master branch instead of the develop branch. It is used only when you have to quickly patch a production issue. An advantage of this branch is, it allows you to quickly deploy a production issue without disrupting others’ workflow or without having to wait for the next release cycle.&lt;/p&gt;

&lt;p&gt;Once the fix is merged into the master branch and deployed, it should be merged into both develop and the current release branch. This is done to ensure that anyone who forks off develop to create a new feature branch has the latest code.&lt;/p&gt;

&lt;h3 id=&quot;the-release-branch&quot;&gt;The release branch&lt;/h3&gt;

&lt;p&gt;The release branch is forked off of develop branch after the develop branch has all the features planned for the release merged into it successfully.&lt;/p&gt;

&lt;p&gt;No code related to new features is added into the release branch. Only code that relates the release is added to the release branch. For example, documentation, bug fixes, and other tasks related to this release are added to this branch.&lt;/p&gt;

&lt;p&gt;Once this branch is merged with master and deployed to production, it’s also merged back into the develop branch, so that when a new feature is forked off of develop, it has the latest code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/05/GitFlow-git-workflow-2.png&quot; alt=&quot;Gitflow workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This workflow was first published and made popular by &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;Vincent Driessen&lt;/a&gt; and since then it has been widely used by organizations that have a scheduled release cycle.&lt;/p&gt;

&lt;p&gt;Since the git-flow is a wrapper around Git, you can install git-flow in your current repository. It’s a straightforward process and it doesn’t change anything in your repository other than creating branches for you.&lt;/p&gt;

&lt;p&gt;To install on a Mac machine, execute &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install git-flow&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;p&gt;To install on a Windows machine, you’ll need to &lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;download and install the git-flow&lt;/a&gt;. After the installation is done, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git flow init&lt;/code&gt; to use it in your project.&lt;/p&gt;

&lt;h2 id=&quot;5-git-fork-workflow&quot;&gt;5. Git Fork Workflow&lt;/h2&gt;

&lt;p&gt;The Fork workflow is popular among teams who use open-source software.&lt;/p&gt;

&lt;p&gt;The flow usually looks like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The developer forks the open-source software’s official repository. A copy of this repository is created in their account.&lt;/li&gt;
  &lt;li&gt;The developer then clones the repository from their account to their local system.&lt;/li&gt;
  &lt;li&gt;A remote path for the official repository is added to the repository that is cloned to the local system.&lt;/li&gt;
  &lt;li&gt;The developer creates a new feature branch is created in their local system, makes changes, and commits them.&lt;/li&gt;
  &lt;li&gt;These changes along with the branch are pushed to the developer’s copy of the repository on their account.&lt;/li&gt;
  &lt;li&gt;A pull request from the branch is opened to the official repository.&lt;/li&gt;
  &lt;li&gt;The official repository’s manager checks the changes and approves the changes to get merged into the official repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;automating-your-git-workflows-for-better-productivity&quot;&gt;Automating your Git Workflows for better productivity&lt;/h2&gt;

&lt;p&gt;One of the things that developers have to constantly juggle with is updating their project management tool to keep their teammates updated. That’s why, at Zepel, our developers automate their workflow, so they can spend more of their time building the software.&lt;/p&gt;

&lt;p&gt;Here’s how we automate our git workflow to keep everyone in sync:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/04/zepel-git-developer-workflow.png&quot; alt=&quot;Developer Workflow with GitHub, Zepel, and Slack Integrations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While Zepel integrates deeply with &lt;a href=&quot;https://zepel.io/guide/integrations/github/&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://zepel.io/guide/integrations/bitbucket/&quot;&gt;Bitbucket&lt;/a&gt;, and &lt;a href=&quot;https://zepel.io/guide/integrations/gitlab/&quot;&gt;GitLab&lt;/a&gt;, we use GitHub internally. So, once we’ve integrated GitHub with Zepel, our development team sets up the git workflow automation within Zepel. Here’s how it looks today:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/01/zepel-git-workflow-automation.png&quot; alt=&quot;Git workflow automation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As developers continue to make progress, our team automatically gets a Slack notification and their changes are recorded within the user story.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zepel.io/blog/content/images/2020/05/image.png&quot; alt=&quot;Git workflow updates to user story in real-time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The git workflows I’ve shown in this article are examples of some of the popular and best working workflows for the development team. Some teams create a branch for Staging and it works perfectly for them.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>为什么老编辑器Vim这么“难用”，却很受欢迎？</title>
   <link href="http:///cs/how-did-vim-become-so-popular.html"/>
   <updated>2020-07-15T00:00:00+08:00</updated>
   <id>/cs/how-did-vim-become-so-popular</id>
   <content type="html">&lt;h1 id=&quot;为什么老编辑器vim这么难用却很受欢迎转&quot;&gt;为什么老编辑器Vim这么“难用”，却很受欢迎？$^{[转]}$&lt;/h1&gt;

&lt;p&gt;来源：量子位 一个1991年正式发布，如今已经快30岁的「高龄」的代码编辑器Vim，为何如此受欢迎？ 在2019年「StackOverflow」关于最流行的开发环境的调查，Vim仍然排在并列第四位，大约有25％的Web开发人员正在使用它。
&lt;!-- more --&gt;
&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/f2aeey.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而在它之前的，全是&lt;strong&gt;2000年&lt;/strong&gt;以后才出现的代码编辑器。&lt;/p&gt;

&lt;p&gt;Vim除了「高龄」以外，还有一个点也困扰着大家，那就是「难用」。如果你没用过，你连怎么退出都不会！&lt;/p&gt;

&lt;p&gt;而且这个难用的梗经久不衰。&lt;/p&gt;

&lt;p&gt;比如「StackOverflow」有一个近&lt;strong&gt;八年&lt;/strong&gt;之久的问题，活跃度仅在&lt;strong&gt;2天&lt;/strong&gt;前，浏览量累计达&lt;strong&gt;210万次&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「如何退出Vim编辑器？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/bAf6vm.png&quot; alt=&quot;img&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个看上去似乎是再简单不过的问题了，却依然经久不衰，引发网友热切讨论。&lt;/p&gt;

&lt;p&gt;这时候，可能就想问，为何这个Vim这么难用，还这么受欢迎？&lt;/p&gt;

&lt;p&gt;了解一下它的历史由来，也许就可以窥见一些原因。&lt;/p&gt;

&lt;h2 id=&quot;半世纪的积累&quot;&gt;半世纪的积累&lt;/h2&gt;

&lt;p&gt;最近有一位博主Nikola Đuza，就介绍了Vim是如何开始的——「How Did Vim Become So Popular」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/nyUZjy.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还记得以前「打孔卡」的时代吗？将「打孔卡」放入计算机内部从而实现编程。对于这一方式来说，放置他们的顺序很重要。&lt;/p&gt;

&lt;p&gt;想象一下，这是一张4.5mb数据的照片，堆叠在62500个打孔卡中，然后删除它，再次对它排序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/eMNZZr.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是随着计算机功能和存储增长，打孔卡渐渐不能满足程序员的需求，这时候出现了QED编辑器（ed的前身），由此便进入到了「行编辑」时代。&lt;/p&gt;

&lt;h3 id=&quot;ed编辑器&quot;&gt;ed编辑器&lt;/h3&gt;

&lt;p&gt;ed编辑器是一款经典的行编辑器，由贝尔实验室开发，1973年正式发布，已经有47年之久，但至今仍然可以使用。&lt;/p&gt;

&lt;p&gt;如果你使用的是Linux或Mac OS，打开终端，输入ed，便可以得到一个简单的行编辑器。&lt;/p&gt;

&lt;p&gt;而如果你要写入文件，输入 a并按Enter键，就可以开始编写文本，输入.退出附件模式。然后写入文件，可以输入「w myfile.txt」并按Enter键，最后输入q退出。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ed
a
Hey there！
I'm qbitai.I'm using ed right now.
How cool!    
.
w myfile.txt
60
q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而使用Vim的网友，可能就会觉得很熟悉。Vim和ed有很多相似的地方。这篇博主就提到说，如果你会使用Vim，那么ed就会很快上手。&lt;/p&gt;

&lt;p&gt;比如，&lt;strong&gt;:q&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/7Jnaey.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而在ed之后，便是em。它有「the editor for mortals」（凡人的编辑器）的称号。&lt;/p&gt;

&lt;p&gt;也就是说，em可以跟ed做一样的事情，但是没有ed那般神秘，更适合大多数人使用。&lt;/p&gt;

&lt;h3 id=&quot;vim的前身vi&quot;&gt;Vim的前身——Vi&lt;/h3&gt;

&lt;p&gt;而随后基于em代码，Sun联合创始人，兼首席科学家Bill Joy开发了ex，算得上是扩展版。它在以往的模式上增加了&lt;strong&gt;visual&lt;/strong&gt;模式，它可以在屏幕上打开文件。&lt;/p&gt;

&lt;p&gt;三年之后，操作系统中引入了可执行文件Vi，但仍然可以通过在Vi/Vim访问ex命令。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/UBj2qu.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是他奠定了今天Vim编辑器的键位设计，如果觉得快捷键难记，就怪他吧。&lt;/p&gt;

&lt;p&gt;当时Bill Joy使用的是下面的键盘：esc键在现在的tab位置，方向键和字母键混用，这也就注定了之后Vim怪异的键位设计。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/n22Abi.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;vi发布是在1979年，那么Vim是如何诞生的呢？&lt;/p&gt;

&lt;h3 id=&quot;vim的诞生&quot;&gt;Vim的诞生&lt;/h3&gt;

&lt;p&gt;这还得从Vi发布之后的「模仿」开始，很多人开始模仿、克隆vi编辑器。当时就有这么一个「Vi Improved」从中脱颖而出。&lt;/p&gt;

&lt;p&gt;它是由「Bram Moolenaar」创建，这个人来头可不小，他还是软件开发工具A-A-P、编程语言Zimbu的开发者。在使用Vim的人，可能看到过他的名字。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/veUjEf.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bram使用了一个名为STEVIE的Vi克隆版，并注意到它缺少许多vi的命令。他在此基础上增加了一些新的功能，使其&lt;strong&gt;与vi兼容&lt;/strong&gt;，并以 “Vi Improved “的名义发布。&lt;/p&gt;

&lt;p&gt;1993年的2.0版本开始使用Vim名字，然后一直这样沿用至今。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/iuAnma.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个几乎集成了近半世纪智慧与努力的Vim，将大量的精力都放在了兼容性上。&lt;/p&gt;

&lt;p&gt;博主也说，也许Vim一些有用的功能让出名，但是能让Vim一直都屹立不倒的原因是，它几乎兼容了所有你能想到的东西。&lt;/p&gt;

&lt;p&gt;这也是很多程序员的爱用Vim主要原因。而除了兼容性强的优点，强大的键位设计，自行设定快捷键等这些都让Vim成为提升工作效率的绝对利器呀！&lt;/p&gt;

&lt;h2 id=&quot;让人又爱又恨&quot;&gt;让人又爱又恨&lt;/h2&gt;

&lt;p&gt;Vim诞生的时候，鼠标还不是电脑标配，所以Vim尽量为纯键盘操作而优化。&lt;/p&gt;

&lt;p&gt;而后来图形化界面、鼠标的普及，让更过代码编辑器脱颖而出，配合鼠标操作学习门槛低，但效率不及Vim老手。&lt;/p&gt;

&lt;p&gt;这也是Vim让人又爱又恨的原因吧。&lt;/p&gt;

&lt;p&gt;谈到Vim，国内的程序员怎么看？首先是入门难度大：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;用Vim写接口还行，不过还是需要学习下Vim的快捷键，不然太痛苦了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/eErMN3.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是用熟了之后，简直能把Vim用的飞起：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;熟悉了之后确实操作起来很快，特别不喜欢用上下左右键。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​    &lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/zMF7va.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有Vim重度使用者来现身说法，&lt;strong&gt;真正的Vim高手，是不需要鼠标的～&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;就因为喜欢上这种双手不离键盘就可以操控一切的feel ，Vim可以让我对文本的操作更加精准，高效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://mianbaoban-assets.oss-cn-shenzhen.aliyuncs.com/2020/7/EJJb2e.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过，这位网友也提到，对初学者可能不是特别友好，因为Vim有一定的学习成本，只有做到非常熟练才能感受到它带来的快捷。&lt;/p&gt;

&lt;h2 id=&quot;如何花式退出vim&quot;&gt;如何花式退出Vim？&lt;/h2&gt;

&lt;p&gt;那么回到一开始的问题，怎么退出Vim呢？&lt;/p&gt;

&lt;p&gt;吐槽归吐槽，你觉得Vim好用吗？你在写代码的时候又用着哪一款编辑器呢？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Manjaro Kde配置全攻略</title>
   <link href="http:///Manjaro-KDE%E9%85%8D%E7%BD%AE%E5%85%A8%E6%94%BB%E7%95%A5.html"/>
   <updated>2020-07-05T00:00:00+08:00</updated>
   <id>/Manjaro-KDE配置全攻略</id>
   <content type="html">&lt;h1 id=&quot;manjaro-kde配置全攻略转&quot;&gt;Manjaro-KDE配置全攻略&lt;script type=&quot;math/tex&quot;&gt;^{[转]}&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;笔者比较好奇这个传说中排名第一的linux发行版到底有什么魔力，所以说干就干，装了一个manjaroKDE桌面的版本，现在使用了大概两周，我来分享一下我的体验以及配置全攻略。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;1官方三种桌面环境的介绍&quot;&gt;1.官方三种桌面环境的介绍&lt;/h2&gt;
&lt;p&gt;去manjaro官网下载系统，官方提供三种桌面环境，笔者都体验过，目前觉得KDE最合心意，功能最多，用起来也最顺手，对新手也友好，推荐各位使用。
Xfce桌面是最为轻量的官方版本，系统占用很小，你可以尝试给家里面的老电脑装一个xfce，但是缺点也很明显，桌面可定制性最差，一开始我装的就是xfce，然后因为它的环境太简陋了，所以就转向了KDEKDE是三者之中可玩性最高，功能最强大的桌面环境，系统占用也不大，对于各位的主力机来说，我觉得这个大可不必在意。Gnome：3.36以后的Gnome功能加了好多，但还是老问题：各种各样的扩展导致桌面不稳定，不建议入手Gnome版本，就算你是Gnome老用户，我还是强烈建议你使用KDE注意：这里只针对Manjaro定制的Gnome，并不是所有发行版的Gnome都这样另外DDE之前我做过推荐，但是DDE对于WiFi的支持太差，不建议使用&lt;/p&gt;

&lt;h2 id=&quot;2-制作启动u盘&quot;&gt;2. 制作启动U盘&lt;/h2&gt;

&lt;p&gt;下载iso文件之后，使用 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rufus.ie/&quot;&gt;rufus&lt;/a&gt; 将其写入到U盘中，网上比较旧的攻略会有dd模式写入的说法，现在没有这个选项了，直接写入就可以，注意写入之后你的U盘可见大小会变小&lt;/p&gt;

&lt;p&gt;恢复的方法：&lt;/p&gt;

&lt;p&gt;下载 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.diskgenius.cn/&quot;&gt;DiskGenius&lt;/a&gt; 先删除U盘所有分区保存更改，然后清除扇区数据，之后格式化&lt;/p&gt;

&lt;p&gt;直接格式化会失败，必须先清除扇区数据&lt;/p&gt;

&lt;p&gt;如果rufus不行也可以试试 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.balena.io/etcher/&quot;&gt;Etcher&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-系统安装&quot;&gt;3. 系统安装&lt;/h2&gt;

&lt;p&gt;这里我假设你的电脑引导方式是UEFI&lt;/p&gt;

&lt;p&gt;如果你的硬盘是ssd+hdd，并且打算把系统装在hdd下的话，建议直接用windows的efi分区，hdd中划分一个区出来挂载/区，或者在ssd中分一个150MB（当然大点也行）的区出来挂载/boot/efi&lt;/p&gt;

&lt;p&gt;插上U盘，在电脑logo出现之前狂按F12手动选择从U盘启动&lt;/p&gt;

&lt;p&gt;如果你的电脑有NVIDIA和Intel双显卡的话，开机界面将drive改成nonfree，这样系统会自动帮你安装适配的NVIDIA驱动（简直太方便了）&lt;/p&gt;

&lt;p&gt;如果这一步你没有改，进去之后手动安装NVIDIA驱动千万不要自己随便安装，这样很可能会导致下次启动进入X-Window界面失败，具体怎么安装可以参考&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//wiki.manjaro.org/index.php%3Ftitle%3DConfigure_NVIDIA_%28non-free%29_settings_and_load_them_on_Startup&quot;&gt;Manjaro WiK&lt;/a&gt;i的解决方案&lt;/p&gt;

&lt;p&gt;进入到系统安装界面之后所有步骤都很简单，就是在划分区的时候需要注意，如果你是单ssd的话就简单了，直接选择你事先划好分区安装就好了&lt;/p&gt;

&lt;p&gt;如果你的ssd是NVMe协议M.2的，需要在进入安装界面之前先进去BIOS里面修改从硬盘的启动形式，把RAID改成AHCI，保存退出，否则进入安装界面你不会看到你的NVMe硬盘，做好这件事其他就都和普通ssd一样了。还需要注意的一点是，修改成AHCI模式之后，重新进入Windows时会有问题，这个时候不要慌，等电脑自动重启第三次的时候，进入安全模式启动Windows，进去之后重启系统，再次进入Windows就不需要安全模式了&lt;/p&gt;

&lt;p&gt;安装完毕重启即可&lt;/p&gt;
&lt;h2 id=&quot;4换源&quot;&gt;4.换源&lt;/h2&gt;

&lt;p&gt;启动terminal，输入：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman-mirrors &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; China &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; rank
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在弹出的框中选一个最快的源，一个就好，选多了会降低速度&lt;/p&gt;

&lt;p&gt;6.9更新，不建议使用archlinuxcn的源，因为并不一定兼容（而且已经有人遇到了问题&lt;/p&gt;

&lt;p&gt;接着更新系统&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Syyu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;系统更新完毕&lt;/p&gt;

&lt;h2 id=&quot;5-安装软件&quot;&gt;5. 安装软件&lt;/h2&gt;

&lt;p&gt;Manjaro背靠Arch软件仓库，安装软件爽的yp，仓库又全又新，基本上遇不到依赖问题需要手动去搜该怎么安装，这也是我不愿意换回Ubuntu的一个重要原因&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; yay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yay是一个用Go语言写的一个AUR助手，有些时候官方仓库没有你想要的软件，就需要通过yay来安装&lt;/p&gt;

&lt;p&gt;有了yay，以后就不用sudo pacman了&lt;/p&gt;

&lt;p&gt;5.1安装拼音输入法：Google拼音&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; fcitx-im kcm-fcitx fcitx-googlepinyin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者Sogou拼音&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S fcitx-im kcm-fcitx fcitx-sogouimebs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在~目录下新建.xprofile文件&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano ~/.xprofile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入内容：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=&quot;@im=fcitx&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存退出，当然你也可以先安装vim用vim来编辑&lt;/p&gt;

&lt;p&gt;重启切换输入法就可以用了(不过我建议先不要重启，可以多做点事&lt;/p&gt;

&lt;p&gt;5.2 配置ohmyzsh（神器，用过的都说好&lt;/p&gt;

&lt;p&gt;首先说一下这个过程不需要使用pacman/yay安装软件，因此可以和安装软件并发进行&lt;/p&gt;

&lt;p&gt;首先修改默认shell为zsh&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装ohmyzsh&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果每次执行都失败提示被拒绝连接就先改一下hosts文件&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把这段话复制到下面&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# GitHub Start
52.74.223.119 github.com
192.30.253.119 gist.github.com
54.169.195.247 api.github.com
185.199.111.153 assets-cdn.github.com
151.101.76.133 raw.githubusercontent.com
151.101.108.133 user-images.githubusercontent.com
151.101.76.133 gist.githubusercontent.com
151.101.76.133 cloud.githubusercontent.com
151.101.76.133 camo.githubusercontent.com
151.101.76.133 avatars0.githubusercontent.com
151.101.76.133 avatars1.githubusercontent.com
151.101.76.133 avatars2.githubusercontent.com
151.101.76.133 avatars3.githubusercontent.com
151.101.76.133 avatars4.githubusercontent.com
151.101.76.133 avatars5.githubusercontent.com
151.101.76.133 avatars6.githubusercontent.com
151.101.76.133 avatars7.githubusercontent.com
151.101.76.133 avatars8.githubusercontent.com
# GitHub End
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.2.1安装zsh-syntax-highlighting：提供命令高亮&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.2.2安装autosuggestions：记住你之前使用过的命令&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.2.3 安装incr：再也不用先ls在粘贴文件名了，看下效果：
&lt;img src=&quot;https://pic4.zhimg.com/80/v2-dc58639be0404132525bd42bdc0677a7_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
去&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mimosa-pudica.net/zsh-incremental.html&quot;&gt;incr&lt;/a&gt;官方网站下载，假设保存在了~目录下，接着执行：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir ~/.oh-my-zsh/custom/plugins/incr
mv ~/incr-0.2.zsh ~/.oh-my-zsh/custom/plugins/incr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;incr有个问题：&lt;/p&gt;

&lt;p&gt;输入git clone 之后会卡死，所以建议使用时先输入网址，再到前面输入git clone&lt;/p&gt;

&lt;p&gt;5.2.4 安装thefuck：帮你更加高效地学习linux命令&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --user thefuck
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输错命令不要慌，输入fuck即可帮你更正
&lt;img src=&quot;https://pic4.zhimg.com/80/v2-d89170a00b73059a1d2362a1d3395117_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
如果下载太慢：
mkdir ~/.pipnano ~/.pip/pip.conf写入如下内容[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host=mirrors.aliyun.com这样就永久地修改了用户级别的pip下载源5.2.5 启用所有插件nano ~/.zshrc将plugins=(git)改为:plugins=(git zsh-syntax-highlighting zsh-autosuggestions sudo extract)这个sudo是ohmyzsh自带的插件，功能是在你输入的命令的开头添加sudo ，方法是双击Escextract也是自带插件，不用再去记不同文件的解压命令，方法是extract +你要解压的文件名在下面那句：source $ZSH/oh-my-zsh.sh下面输入：source ~/.oh-my-zsh/custom/plugins/incr/incr*.zsh在文件末尾输入：eval $(thefuck –alias)保存退出之后手动修改konsole的默认bash为zsh：
&lt;img src=&quot;https://pic4.zhimg.com/80/v2-e1cf9c06a05965868b0f1217b3678243_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
打开konsole执行：
source ~/.zshrc配置完毕，这时候输入zsh感受一下ohmyzsh以及这些插件的强大吧还有很多有意思的插件，可以自行安装alias 可以帮助你简化很多命令，具体设置看你习惯
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-a7a40c6064f7cdda30a979b50b236744_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
推荐一个极简风格的主题：light和dark都能完美适配&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/reobin/typewritten&quot;&gt;reobin/typewritten​&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/reobin/typewritten&quot;&gt;github.com&lt;img src=&quot;https://pic4.zhimg.com/v2-2a69547d4db6b49cdafdbc18d09149eb_ipico.jpg&quot; alt=&quot;图标&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;效果大概这样：
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-71ebc3be0c2326425ed6fb9ce15ac468_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
5.3安装SpaceVim（现代化的vim插件管理工具，开箱即用，不使用vim的可以略过&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sLf&lt;/span&gt; https://spacevim.org/cn/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完毕之后进入vim会自动开始配置，搭建具体的开发环境请移步&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//spacevim.org/cn/quick-start-guide/&quot;&gt;spaceVim官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;改掉相对行号需要编辑~/.SpaceVim.d/init.toml文件&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim ~/.SpaceVim.d/init.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在[option]中添加：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;relativenumber = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-191c0a16b0f7d76a1c82fbbb3811ea36_1440w.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.4 安装腾讯系软件&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S deepin-wine-tim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装过程中出现选择输入n就好&lt;/p&gt;

&lt;p&gt;为了让tim能接收到图片，需要禁用ipv6&lt;/p&gt;

&lt;p&gt;手动禁用：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh -c 'echo 1 &amp;gt;&amp;gt; /proc/sys/net/ipv6/conf/wlp3s0/disable_ipv6'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开机禁用：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vim /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;// 我这里使用了开机动画所以内容是这样&lt;/p&gt;

&lt;p&gt;为：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;ipv6.disable=1 quiet  splash&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;// 只要在引号内加入ipv6.disable=1 就可以&lt;/p&gt;

&lt;p&gt;自动切换deepin-wine环境&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/deepinwine/apps/Deepin-Tim/run.sh -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有问题直接去&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/countstarlight/deepin-wine-tim-arch/issues&quot;&gt;作者GitHub项目地址 ​&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/countstarlight/deepin-wine-tim-arch/issues&quot;&gt;github.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;开issue反馈就好了&lt;/p&gt;

&lt;p&gt;安装微信（直接yay -S deepin-wine-wechat得到的版本暂时还有bug，不能发图片和文件）&lt;/p&gt;

&lt;p&gt;所以这里建议使用旧版本的微信：&lt;/p&gt;

&lt;p&gt;去这个网址下：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/countstarlight/deepin-wine-wechat-arch/releases/tag/v2.7.1.88-1&quot;&gt;deepin-wine-wechat v2.7.1.88-1&lt;/a&gt; 如果没有梯子用这个：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//g.widora.cn/&quot;&gt;GitHub代下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;假设你下载到了~目录下，文件名为：deepin-wine-wechat-2.7.1.88-1-x86_64.pkg.tar.xz，执行：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pacman -U ~/deepin-wine-wechat-2.7.1.88-1-x86_64.pkg.tar.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装之后先切换到deepin-wine环境：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/deepinwine/apps/Deepin-WeChat/run.sh -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;登录之后关闭自动更新&lt;/p&gt;

&lt;p&gt;修改/etc/pacman.conf 禁止AUR更新这个包&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vim /etc/pacman.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按下 28gg 删去开头的# 在=后面加上：deepin-wine-wechat 2.7.1.88-1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-114a12657417ba0269fcebf554f3cede_1440w.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等到啥会儿这个bug被修复再更新&lt;/p&gt;

&lt;p&gt;5.5 安装其他软件：&lt;/p&gt;

&lt;p&gt;ranger：终端文件浏览器&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S ranger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-00c910b82fb1069e31dd15ee4ad641dd_1440w.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wps:中文版，想要英文版把后面那个包去掉（不建议用wps，经常性卡死）&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S wps-office wps-office-mui-zh-cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;libreoffice：如果你安装时没有装的话（建议）&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S libreoffice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其下libreoffice-fresh相当于是beta版，libreoffice-still相当于是stable版&lt;/p&gt;

&lt;p&gt;网易云音乐：夸&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S netease-cloud-music
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在贴吧找到了网易云音乐搜索框和评论区无法输入中文的解决办法：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitee.com/ForMat1/netease-cloud-music_For_Arch&quot;&gt;ForMat网络安全联盟/netease-cloud-music_For_Arch​&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitee.com/ForMat1/netease-cloud-music_For_Arch&quot;&gt;gitee.com&lt;img src=&quot;https://pic4.zhimg.com/v2-ae5c1a395e022ef666bdd3867d0f5fcb_ipico.jpg&quot; alt=&quot;图标&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关于其中一个压缩包下载过慢的问题：&lt;/p&gt;

&lt;p&gt;因为linux下的百度网盘速度也慢的要死了所以这里建议这样下载&lt;/p&gt;

&lt;p&gt;复制下面这个链接到这个网站代下载 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//g.widora.cn/&quot;&gt;GitHub代下载&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/linuxdeepin/cef-binary/archive/fecf00339545d2819224333cc506d5aa22ae8008.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后将下载好的文件重命名为&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cef-binary-fecf00339545d2819224333cc506d5aa22ae8008.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将其放在qcef目录下&lt;/p&gt;

&lt;p&gt;使用这个就不要安装前面那个&lt;/p&gt;

&lt;p&gt;chrome&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S google-chrome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;福昕阅读器:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S foxitreader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;百度网盘：以后大家不要往这上面传文件了，我推荐坚果云，百度赶紧爬&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S baidunetdisk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者命令行（CLI）的：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S baidupcs-go-bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;坚果云：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S nutstore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为知笔记：全平台通用、有云端同步、支持md的笔记&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S wiznote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Typora：我认为最舒适的md编辑器&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S typora
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flameshot：最强大的截图工具 当你的tim/微信截图不好用的时候，用这个&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S flameshot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;timeshift：强大好用的备份、回滚系统工具&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay -S timeshift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置快捷键启动的方式：&lt;/p&gt;

&lt;p&gt;设置 -&amp;gt; 快捷键 -&amp;gt; 自定义快捷键 -&amp;gt; 编辑 -&amp;gt; 新建 -&amp;gt; 全局快捷键 -&amp;gt; 命令/URL&lt;/p&gt;

&lt;p&gt;设置触发器：设置为你习惯的快捷键 -&amp;gt; 动作：命令/URL这填：/usr/bin/flameshot gui
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-316b039a03508ed727fd95bd5ebaeb40_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
设置快捷键
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-df9bd21b536019e168bc76fdb958d6d2_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
设置命令XDM：Linux下最快的下载神器yay -S xdman建议直接去官网下载压缩包安装，比命令行快很多calibre：电子书管理神器yay -S calibre系统托盘那开启夜间颜色控制，不需要安装redshift了6.字体:1.使用Windows/Mac OS字体Fonts (简体中文) - ArchWiki​wiki.archlinux.org这里建议直接拷贝字体文件而非链接2.渲染效果优化字体配置​ohmyarch.github.io7.美化（饱暖思淫欲安装latte-dockyay -S latte-dock添加一个新空面板，默认会出现在上面，然后删除下面这个面板在新面板上添加必要的部件：应用程序面板，数字时钟，托盘图标还可以加全局菜单，显示面板等等
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-fc558da85f947d06333713280e3698bc_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
启动latte-dock，下方就会出现一个dock栏，具体配置看自己爱好移除那个时钟的方法：右键 配置lattedock 然后右键 那个时钟 移除 就好了进入设置-外观中选择你喜欢的主题什么的安装并且应用即可设置-工作空间行为-桌面特效 中可以启用一些华丽的特效设置-开机和关机 中更改登录屏幕等效果在设置-工作空间行为-常规行为-点击行为 中改掉单击打开文件/文件夹的设置
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-e9a142d1681551f93b9d6f325252c992_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
修改~下的用户文件夹名称为英文：先去手动修改文件夹名称，然后在 设置 -&amp;gt; 应用程序 -&amp;gt; 地点 这修改
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-02fb0726008c5e01bb4d3b5d7eef2e3a_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
添加开机动画：参见这篇教程​www.jianshu.com修改grub主题：去 Gnome-look 找自己喜欢的grub主题按照提示安装就好了全部设置完之后就可以重启了8.双系统时间同步按照 Arch WiKi 的建议，这里修改Windows系统的注册表：ctrl+X 按 A 以管理员方式打开PowerShell，输入reg add “HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation” /v RealTimeIsUniversal /d 1 /t REG_QWORD /f如果你的WIndows是32位的，把上述代码中的REG_QWORD改成REG_DWORD同时禁用Windows的自动同步时间功能重启进入Manjaro，配置一下fcitx:
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-fecc502d67b3de31bcfa3eefefa07de2_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
9.科学上网因为我用的是v2ray，所以这里推荐一个v2ray的图形化配置工具：qv2rayyay -S qv2ray v2ray使用方法在这里：https://qv2ray.github.io/getting-started/另外这个程序也支持ssr和trojan，可以通过插件来实现：github地址：Qv2ray​github.com最后附一张图：
&lt;img src=&quot;https://pic4.zhimg.com/80/v2-76a5d3460070ee862c8582914e597817_1440w.jpg&quot; alt=&quot;输入图片描述&quot; /&gt;
装好Manjaro必须要有的习惯：1.必须要做timeshift，以防你哪天玩坏只能重装2.每天要开机执行一遍sudo pacman -Syyu虽说Manjaro相对Arch应该稳定一点，但终究是滚动发行版，还是有滚挂的风险防止滚挂的最好办法就是 及时滚 长时间不更新必挂。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux 桌面史话</title>
   <link href="http:///cs/Linux-desktop-history.html"/>
   <updated>2020-07-04T00:00:00+08:00</updated>
   <id>/cs/Linux-desktop-history</id>
   <content type="html">&lt;h1 id=&quot;linux-桌面史话转&quot;&gt;Linux 桌面史话$^{[转]}$&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;自 20 世纪 90 年代初以来，Linux 桌面已从一个简单的窗口管理器发展为一个完整的桌面。让我们一起来回顾一下 Linux 桌面的历史。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- more --&gt;

&lt;p&gt;我第一次安装 Linux 是在 1993 年。那时，安装这种操作系统没有太多的选择。早期，许多人只是从别人那里复制一个运行中的镜像。然后有人有了一个很好的想法，创建一个 Linux 的“发行版”，让你可以自定义要安装的软件。这就是 Softlanding Linux 系统（SLS），也是我首次接触 Linux。&lt;/p&gt;

&lt;p&gt;当时我的 386 PC 虽然内存不多，但已经足够了。SLS 1.03 需要 2MB 的内存才能运行，如果要编译程序，则需要 4MB 的内存。如果要运行 X 窗口系统，则需要多达 8MB 的内存！而我的电脑正好有足够的内存来运行 X 窗口系统。&lt;/p&gt;

&lt;p&gt;因为我是在命令行中成长的，所以图形化的用户界面对我来说并不重要，但它确实很方便，我可以在不同的窗口中运行应用程序，并在任务间轻松切换。&lt;/p&gt;

&lt;p&gt;从我第一次尝试 Linux 开始，我就迷上了它。从那以后，我一直在台式机上使用 Linux。和许多人一样，我也曾有一段时间以双引导配置运行 Linux，这样我就可以跳回到 MS-DOS 和 Windows 来运行某些程序。直到 1998 年，我终于冒了个险，全面投身于 Linux 之中。&lt;/p&gt;

&lt;p&gt;在过去的 26 年中，我看着 Linux 桌面逐渐成熟。在这段时间里，我还尝试了各种有趣的桌面环境，下面我来分享一下 Linux 桌面的历史。&lt;/p&gt;

&lt;h2 id=&quot;x-和窗口管理器&quot;&gt;X 和窗口管理器&lt;/h2&gt;

&lt;p&gt;Linux 上的第一个“桌面”还不是桌面。相反，它们是运行在 X 窗口系统上的“窗口管理器window manager”（WM）。X 提供了图形用户界面的基本构件，比如在屏幕上创建窗口，并提供键盘和鼠标输入。就其本身而言，X 的用处并不大。为了使 X 图形环境变得有用，你需要一种方法来管理会话中的所有窗口。这就出现了窗口管理器window manager。运行 xterm 或 xclock 之类的 X 程序就会在一个窗口中打开该程序。窗口管理器可以跟踪窗口并进行基本的内部管理，例如让你可以来回移动窗口并将其最小化。其余的事情取决于你自己。你可以通过将程序名列在  &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xinitrc&lt;/code&gt;  文件中以在 X 开始时启动这些程序，但是通常，你会从 xterm 中运行新程序。&lt;/p&gt;

&lt;p&gt;在 1993 年，最常见的窗口管理器是 TWM，它的历史可以追溯到 1988 年。TWM 相当简单，仅仅提供了基本的窗口管理功能。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142516eu4s0ryoo6ps930u.png&quot; alt=&quot;_SLS 1.05 上的 TWM，显示了 xterm、xclock 和 Emacs 编辑器_&quot; /&gt;
另一个早期的窗口管理器是 OpenLook 虚拟窗口管理器（OLVWM）。OpenLook 是 Sun 微系统公司在 20世纪 80 年代开发的图形用户界面，后来被移植到其它 Unix 平台。作为一个_虚拟_窗口管理器，OLVWM 支持多个工作区。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142517ki2je81uj9ebb6ct.png&quot; alt=&quot;_SLS 1.05 上的 OLVWM，显示了 xterm 和虚拟工作区选择器_&quot; /&gt;
当 Linux 开始流行起来的时候，没多久就有人创建出性能更流畅、界面更好的新窗口管理器。这些新的窗口管理器中首先出现的是虚拟窗口管理器 FVWM。FVWM 比 TWM 或 OLVWM 更具现代感。但是，我们仍然没有桌面。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142517lbgicv6z7diitzvz.png&quot; alt=&quot;_SLS 1.05 上的 FVWM，显示了 xterm 和文件管理器_&quot; /&gt;
以现代的眼光来看，TWM 和 FVWM 可能看起来很朴素。但重要的是要想想当时其它图形环境是什么样子。 Windows 当时的版本看起来也相当简单。Windows 版本 1 到版本 3 使用了一个称为“程序管理器”的普通启动器。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142518lkreu6l4mnv6ftff.png&quot; alt=&quot;_Windows 3.11，显示程序管理器和记事本编辑器_&quot; /&gt;
1995 年 8 月，微软发布了 Windows 95，改变了现代 PC 桌面的格局。当然，我当时对此印象很深刻。我曾觉得 Windows 3.x 笨拙而丑陋，但 Windows 95 却流畅而漂亮。更重要的是，我们现在将 Windows 95 视为“&lt;strong&gt;桌面&lt;/strong&gt;”。新的“桌面”隐喻是一个巨大的进步。你可以在桌面上放置图标——事实上，Windows 95 提供了两个默认的桌面图标，分别是“我的电脑”（用于打开文件管理器）和“回收站”（用于放置以后要删除的文件）。
但是，更重要的是，Windows 95 桌面的意味着_整合_。程序管理器不见了，取而代之的是屏幕底部的任务栏，可让你使用更简单的“开始”菜单启动新程序。任务栏是多功能的，还通过一系列的按钮显示了你正在运行的程序，而托盘显示了时间、扬声器音量和其它简单的控件。你可以在这个新桌面上右键单击任何对象， Windows 95 会为你提供一个上下文相关的菜单，其中又你可以执行的操作。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142520fy6yua465u2giaqv.png&quot; alt=&quot;_Windows 95，显示了记事本编辑器_&quot; /&gt;
与以前版本的 Windows 甚至其它 Linux 窗口管理器相比，Windows 95 的界面更加流畅并且易于使用。值得一提的是，Linux 开发人员创建了一个模仿 Windows 95 界面的 FVWM 的新版本。名为 FVWM95 的新窗口管理器仍然不是桌面，但它看起来非常漂亮。新的任务栏让你可以使用“开始”菜单启动新的 X 程序。任务栏还可以使用类似于 Windows 95 的按钮显示了正在运行的程序。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142521cmc9iqlqiu6niqjh.png&quot; alt=&quot;_在 Red Hat Linux 5.2 上的 FVWM95，显示了 xterm 和一个带有 xterm 图标、文件管理器和其他程序的快速访问程序启动器_&quot; /&gt;
虽然 FVWM95 和其他窗口管理器都在改进，但核心问题仍然存在：Linux 并没有真正的桌面。它具有一堆窗口管理器，仅此而已。使用图形用户界面的 Linux 应用程序（基本上意味着它们是 X 应用程序）看起来形态各异且工作方式也不同。除了 X 窗口系统提供的简单的纯文本复制/粘贴功能外，你不能从一个应用程序复制和粘贴到另一个应用程序里。Linux 真正需要的是在其图形用户界面中进行彻底的重新打造，以创建它的第一个桌面。&lt;/p&gt;

&lt;h2 id=&quot;linux-桌面之初啼&quot;&gt;Linux 桌面之初啼&lt;/h2&gt;

&lt;p&gt;在 1996 年，Matthias Ettrich 有感于 X 之下 Linux 应用程序体验不一致的困扰。他想使找个更易于使用的图形环境，而且更重要的是，他想让所有东西都“集成”在一起，就像真正的桌面一样。
Matthias 开始了K 桌面环境K Desktop Environment（KDE）的工作。那个 K 代表着 “Kool”（LCTT 译注：即 Cool）。但是 KDE 这个名字也意味着可以类似通用桌面环境Common Desktop Environment（CDE）的做法，而 CDE 是“大 Unix”世界的标准。尽管到了 1996 年，CDE 看起来已经有点过时了。CDE 基于 Motif 部件集，这也是 FVWM 所模仿的设计。KDE 1.0 于 1998 年 7 月完成，与 FVWM95 等普通窗口管理器相比，它有了明显改进。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142526iao96df8affatt28.png&quot; alt=&quot;_K 桌面环境（KDE）版本 1.0。图片来源：Paul Brown / KDE_&quot; /&gt;
KDE 是 Linux 向前迈出的一大步。最终，Linux 有了一个真正的桌面，集成了应用程序和更多现代的桌面图标。KDE 的设计与 Windows 95 并无不同。屏幕底部有一个任务栏，它提供了相当于 Windows 95 的“开始”菜单以及一些应用程序的快捷键。KDE 还支持虚拟桌面，这些桌面被巧妙地标记为 “One”、“ Two”、“Three” 和 “Four”。正在运行的应用程序通过位于屏幕顶部单独的任务栏的按钮表示。&lt;/p&gt;

&lt;p&gt;但并不是每个人都对 KDE 感到满意。为了将 GUI 从系统中抽象出来，KDE 使用了 Trolltech 的 Qt 工具套件库。不幸的是，Qt 并不是以自由软件的许可证进行分发的。Trolltech 允许 Qt 在自由软件应用程序中免费使用，但在商业或专有应用程序中要收取使用费。而且这种二分法与自由软件不符。这给 Linux 发行版带来了问题：它们应该包括 KDE 吗？还是默认使用 FVWM 这样老式但属于自由软件的图形用户界面？&lt;/p&gt;

&lt;p&gt;面对这种情况，Miguel de Icaza 和 Federico Mena 于 1997 年开始开发新的 Linux 桌面上。这个新项目被称为 GNOME，即GNU 网络对象模型环境GNU Network Object Model Environment的缩写。GNOME 旨在成为一个完全自由的软件，并使用了一个不同的工具套件库 —— 来自 GIMP 图像编辑器的 GTK。GTK 从字面上的意思  GIMP 工具套件GIMP Tool Kit。当 GNOME 1.0 终于在 1999 年发布时，Linux 又多了一个现代化的桌面环境。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142543us4ft4cbbt7jt4tf.png&quot; alt=&quot;_GNOME 1.0 版。图片来源：GNOME 文档项目_&quot; /&gt;
有两个 Linux 桌面环境固然很棒，但“KDE 与 GNOME”之争仍持续了一段时间。到了 1999 年，Trolltech 以新的公共许可证 Q 公共许可证Q Public License（QPL）重新发布了 Qt 库。但是，新许可证有其自身的包袱—-QPL 仅适用于 Qt 在开源软件项目中的使用，而不适用于商业项目。因此，自由软件基金会Free Software Foundation（FSF）认为 QPL 与 GNU 通用公共许可证GNU General Public License（GNU GPL）&lt;a href=&quot;https://www.linuxtoday.com/developer/2000090500121OPLFKE&quot;&gt;不兼容&lt;/a&gt;。这个许可证问题一直持续到 2000 年 Trolltech 在 GNU GPL v2 下重新发布 Qt 库。&lt;/p&gt;

&lt;h2 id=&quot;随着时间的发展&quot;&gt;随着时间的发展&lt;/h2&gt;

&lt;p&gt;Linux 桌面继续走向成熟。KDE 和 GNOME 进行了一场友好的竞争，促使双方都在增加了新的功能，还互相交流了思想和观念。到了 2004 年，GNOME 和 KDE 都取得了长足的进步，但只是给用户界面带来了渐进式的变化。&lt;/p&gt;

&lt;p&gt;KDE 2 和 3 继续依赖屏幕底部的任务栏概念，但并入了用于运行应用程序的按钮。KDE 最明显的变化之一是添加了 Konqueror 浏览器，该浏览器首次出现在 KDE 2 中。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142601myfdvn0zkeq0yyky.png&quot; alt=&quot;_KDE 2.2.2（2001），显示了 Konqueror 浏览器。图片来源：Paul Brown / KDE_&quot; /&gt;
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142618ibssww87ch8gbv8c.png&quot; alt=&quot;_Fedora Core 2 上的 KDE 3.2.2（2004），显示了 Konqueror 文件管理器（使用 Fedora Core 2 主题）_&quot; /&gt;
GNOME 2 也使用了任务栏概念，但将任务栏一分为二：屏幕顶部的任务栏用于启动应用程序并响应桌面提示，屏幕底部的任务栏用于显示正在运行的应用程序。我把这两个任务栏称之为“你可以做的事情”（顶部）和“你正在做的事情”（底部）。除了精简的用户界面外，GNOME 还添加了由 Eazel 开发的更新过的文件管理器，名为 Nautilus。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142622g2ux5d90dz92677z.png&quot; alt=&quot;_Fedora Core 2 上的 GNOME 2.6.0（2004），显示了 Nautilus 文件管理器（使用 Fedora Core 2 主题）_&quot; /&gt;
随着时间的流逝，KDE 和 GNOME 走了不同的道路。两者都提供了功能丰富、健壮且现代化的桌面环境，但是却具有不同的用户界面目标。2011 年，GNOME 和 KDE 在桌面界面上出现了很大的偏差。KDE 4.6（2011 年 1 月）和 KDE 4.7（2011 年 7 月）提供了更传统的桌面感受，同时继续根植于许多用户熟悉的任务栏概念。当然，KDE 的底层发生很多变化，但是它仍然保留了熟悉的外观。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142652a01ev1yvmy17sg4g.png&quot; alt=&quot;_KDE 4.6，显示 Gwenview 图像查看器。图片来源：KDE_&quot; /&gt;
2011 年，GNOME 以一个新的桌面概念彻底改变了走向。GNOME 3 旨在创建一个更简单、更精简的桌面体验，使用户能够专注于自己的工作。任务栏消失了，取而代之的是屏幕顶部的黑色状态栏，其中包括音量和网络控件，显示了时间和电池状态，并允许用户通过重新设计过的菜单启动新程序。&lt;/p&gt;

&lt;p&gt;菜单的变化最具最戏剧性。单击“活动”菜单或将鼠标移到“活动”的“热角”，所有打开的应用程序会显示为单独的窗口。用户还可以从“概述”中单击“应用程序”选项卡以启动新程序。“概述”还提供了一个内部集成的搜索功能。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142711om9hq79omoxxmmr7.png&quot; alt=&quot;_GNOME 3.0，显示 GNOME 图片应用程序。图片来源：GNOME_&quot; /&gt;
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142729sqkmvml35alkhl5k.png&quot; alt=&quot;_GNOME 3.0，显示活动概述。图片来源：GNOME_&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;你的桌面之选&quot;&gt;你的桌面之选&lt;/h2&gt;
&lt;p&gt;拥有两个 Linux 桌面意味着用户有很大的选择余地。有些人喜欢 KDE，而另一些人喜欢 GNOME。没关系，选择最适合你的桌面就行。&lt;/p&gt;

&lt;p&gt;可以肯定的是，KDE 和 GNOME 都有拥护者和批评者。例如，GNOME 因为放弃任务栏而改成“活动概述”而受到了不少批评。也许最著名的批评者是 Linus Torvalds，他在 2011 年&lt;a href=&quot;https://www.theregister.co.uk/2011/08/05/linus_slams_gnome_three/&quot;&gt;大声斥责并抛弃了&lt;/a&gt;新的 GNOME，将其视为“邪恶的烂摊子”，然后在两年后又&lt;a href=&quot;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTMxNjc&quot;&gt;回到了&lt;/a&gt;  GNOME。&lt;/p&gt;

&lt;p&gt;其他人也对 GNOME 3 提出了类似的批评，以至于一些开发人员复刻 GNOME 2 的源代码创建了 MATE 桌面。MATE（是MATE 高级传统环境MATE Advanced Traditional Environment的递归缩写）延续了 GNOME 2 的传统任务栏界面。&lt;/p&gt;

&lt;p&gt;无论如何，毫无疑问当今两个最受欢迎的 Linux 桌面是 KDE 和 GNOME。它们的当前版本非常成熟，功能也很丰富。KDE 5.16（2019）和 GNOME 3.32（2019）都试图简化和精简 Linux 桌面体验，但是方式有所不同。GNOME 3.32 继续致力于极简外观，删除所有分散用户注意力的用户界面元素，以便用户可以专注于其应用程序和工作。KDE 5.16 采用了更为熟悉的任务栏方法，但也增加了其他视觉上的改进和亮点，尤其是改进的小部件处理和图标。
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142737nw3l58udxssuz3q8.png&quot; alt=&quot;_KDE 5.16 Plasma。图片来源：KDE_&quot; /&gt;
&lt;img src=&quot;https://img.linux.net.cn/data/attachment/album/202004/03/142754f1nidozdgr41a4ga.png&quot; alt=&quot;_GNOME 3.32。图片来源：GNOME_&quot; /&gt;
同时，你也不会完全失去它们之间的兼容性。每个主要的 Linux 发行版都提供了兼容性库，因此你可以在运行 GNOME 的同时来运行 KDE 应用程序。当你真正想使用的应用程序是为其他桌面环境编写的，这一点非常有用。你可以在 GNOME 上运行 KDE 应用程序，反之亦然。&lt;/p&gt;

&lt;p&gt;我认为这种态势不会很快改变，这是一件好事。KDE 和 GNOME 之间的良性竞争使这两个阵营的开发人员可以避免故步自封。无论你使用 KDE 还是 GNOME，你都将拥有一个集成度很高的现代化桌面。而最重要的是，这意味着 Linux 拥有自由软件最好的特点：选择。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>退刀槽的尺寸标注</title>
   <link href="http:///eng/%E9%80%80%E5%88%80%E6%A7%BD%E7%9A%84%E5%B0%BA%E5%AF%B8%E6%A0%87%E6%B3%A8.html"/>
   <updated>2020-07-04T00:00:00+08:00</updated>
   <id>/eng/退刀槽的尺寸标注</id>
   <content type="html">&lt;h1 id=&quot;退刀槽的尺寸标注转&quot;&gt;退刀槽的尺寸标注$^{[转]}$&lt;/h1&gt;

&lt;p&gt;退刀槽可按“槽宽×直径”或“槽宽×槽深”的形式注写，什么情况下用“槽宽×直径”？什么情况下用“槽宽×槽深”标？ 图中的直径9.2就是绿线所示部位的直径，0.4是红线所示的高度？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1620983664,851208775&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG?w=477&amp;amp;h=327&amp;amp;s=87907C235BA062941F08E0CC0100E0E3&quot; alt=&quot;退刀槽&quot; /&gt;
1.退刀槽在没有“尺寸精度”要求前提下，两种标注（槽宽×直径或槽宽×槽深）都可以，两者可换算，“自由公差”精度没问题，不必考虑基准问题， 2.1.6×0.4退刀槽；0.4是红线所示的高度，操作者不会以大圆为基准往下量的。（退刀槽是由小圆轴切削成的） 3.退刀槽在《机械设计手册》中有标准，按所配合的零件结构不同，分为A,B,C,D,E,F几种形式，此类标注就不是简单的“槽宽×直径”或“槽宽×槽深” 供参考！
&lt;img src=&quot;https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2466838317,324968750&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG?w=615&amp;amp;h=179&amp;amp;s=0EAC7A22A4A0CD0B4C78F0D7000040B1&quot; alt=&quot;两种标注&quot; /&gt;
在必须保证直径时用“槽宽×直径”。 同样，在必须保证槽深时用“槽宽×槽深”。 虽然，可能会得到相同的结果，但是，基准与概念都不一样。 槽宽×直径时：槽深的基准是中心线。 槽宽×槽深时：槽深的基准是轮廓线。&lt;/p&gt;

&lt;p&gt;按GB4458.4（机械制图尺寸注法）提示： 图中A、B属销、轴类退刀槽一般注法，可以任选其一。 图中C属于非轴类的退刀槽的一般注法。&lt;/p&gt;

&lt;h2&gt;&lt;img src=&quot;https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=2236551485,65390368&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG?w=640&amp;amp;h=191&amp;amp;s=8EAA7C23CDB0CC0B06DDE5DA0000C0B2&quot; alt=&quot;机械制图尺寸注法&quot; /&gt;&lt;/h2&gt;
&lt;p&gt;退刀槽可按“槽宽×直径”或“槽宽×槽深”的形式注写，什么情况下用“槽宽×直径”？什么情况下用“槽宽×槽深”标？&lt;br /&gt;
图中的直径9.2就是绿线所示部位的直径，0.4是红线所示的高度？
&lt;img src=&quot;http://www.iw168.cn/upFiles/infoImg/coll/20161207/OT20161207161534986.png&quot; alt=&quot;输入图片描述&quot; /&gt;
1.退刀槽在没有“尺寸精度”要求前提下，两种标注（槽宽×直径或槽宽×槽深）都可以，两者可换算，“自由公差”精度没问题，不必考虑基准问题，&lt;br /&gt;
2.1.6×0.4退刀槽；0.4是红线所示的高度，操作者不会以大圆为基准往下量的。（退刀槽是由小圆轴切削成的）&lt;br /&gt;
3.退刀槽在《机械设计手册》中有标准，按所配合的零件结构不同，分为A,B,C,D,E,F几种形式，此类标注就不是简单的“槽宽×直径”或“槽宽×槽深”&lt;br /&gt;
供参考！
&lt;img src=&quot;http://www.iw168.cn/upFiles/infoImg/coll/20161207/OT20161207161534865.png&quot; alt=&quot;输入图片描述&quot; /&gt;
在必须保证直径时用“槽宽×直径”。&lt;br /&gt;
同样，在必须保证槽深时用“槽宽×槽深”。&lt;br /&gt;
虽然，可能会得到相同的结果，但是，6准与概念都不一样。&lt;br /&gt;
槽宽×直径时：槽深的基准是中心线。&lt;br /&gt;
槽宽×槽深时：槽深的基准是轮廓线。&lt;/p&gt;

&lt;p&gt;按GB4458.4（机械制图尺寸注法）提示：&lt;br /&gt;
图中A、B属销、轴类退刀槽一般注法，可以任选其一。&lt;br /&gt;
图中C属于非轴类的退刀槽的一般注法。
&lt;img src=&quot;http://www.iw168.cn/upFiles/infoImg/coll/20161207/OT20161207161534917.png&quot; alt=&quot;输入图片描述&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>日出日落时间计算</title>
   <link href="http:///other/sunrise-sunset-time-caculator.html"/>
   <updated>2019-12-19T00:00:00+08:00</updated>
   <id>/other/sunrise-sunset-time-caculator</id>
   <content type="html">&lt;h1 id=&quot;日出日落计算&quot;&gt;日出日落计算&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/&quot; title=&quot;首页&quot;&gt;首页&lt;/a&gt;
&lt;!-- more --&gt;&lt;/p&gt;

&lt;iframe src=&quot;/pub/proj/srss/richuriluoshijian.html&quot; align=&quot;center&quot; width=&quot;600&quot; height=&quot;700&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>卡方检验</title>
   <link href="http:///sch/chi-square-test.html"/>
   <updated>2019-11-04T00:00:00+08:00</updated>
   <id>/sch/chi-square-test</id>
   <content type="html">&lt;h1 id=&quot;卡方检验转&quot;&gt;卡方检验$^{[转]}$&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;卡方检验(Chi-square test/Chi-Square Goodness-of-Fit Test)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;什么是卡方检验&quot;&gt;什么是卡方检验&lt;/h2&gt;

&lt;p&gt;卡方检验是一种用途很广的计数资料的假设检验方法。它属于非参数检验的范畴，主要是比较两个及两个以上样本率( 构成比）以及两个分类变量的关联性分析。其根本思想就是在于比较理论频数和实际频数的吻合程度或拟合优度问题。
&lt;!-- more --&gt;
它在分类资料统计推断中的应用，包括：两个率或两个构成比比较的卡方检验；多个率或多个构成比比较的卡方检验以及分类资料的相关分析等。&lt;/p&gt;

&lt;h2 id=&quot;卡方检验的基本原理&quot;&gt;卡方检验的基本原理&lt;/h2&gt;
&lt;h3 id=&quot;卡方检验的基本思想&quot;&gt;卡方检验的基本思想&lt;/h3&gt;
&lt;p&gt;卡方检验是以$χ^2$分布为基础的一种常用假设检验方法，它的无效假设$H_0$是：观察频数与期望频数没有差别。&lt;/p&gt;

&lt;p&gt;该检验的基本思想是：首先假设$H_0$成立，基于此前提计算出$χ^2$值，它表示观察值与理论值之间的偏离程度。根据$χ^2$分布及自由度可以确定在$H_0$假设成立的情况下获得当前统计量及更极端情况的概率P。如果P值很小，说明观察值与理论值偏离程度太大，应当拒绝无效假设，表示比较资料之间有显著差异；否则就不能拒绝无效假设，尚不能认为样本所代表的实际情况和理论假设有差别。&lt;/p&gt;

&lt;h2 id=&quot;卡方值的计算与意义&quot;&gt;卡方值的计算与意义&lt;/h2&gt;
&lt;p&gt;$χ^2$值表示观察值与理论值之问的偏离程度。计算这种偏离程度的基本思路如下。&lt;/p&gt;

&lt;p&gt;(1)设A代表某个类别的观察频数，E代表基于$H_0$计算出的期望频数，A与E之差称为残差。&lt;/p&gt;

&lt;p&gt;(2)显然，残差可以表示某一个类别观察值和理论值的偏离程度，但如果将残差简单相加以表示各类别观察频数与期望频数的差别，则有一定的不足之处。因为残差有正有负，相加后会彼此抵消，总和仍然为0，为此可以将残差平方后求和。&lt;/p&gt;

&lt;p&gt;(3)另一方面，残差大小是一个相对的概念，相对于期望频数为10时，期望频数为20的残差非常大，但相对于期望频数为1 000时20的残差就很小了。考虑到这一点，人们又将残差平方除以期望频数再求和，以估计观察频数与期望频数的差别。&lt;/p&gt;

&lt;p&gt;进行上述操作之后，就得到了常用的$χ^2$统计量，由于它最初是由英国统计学家Karl Pearson在1900年首次提出的，因此也称之为Pearson $χ^2$，其计算公式为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x^2=\sum \frac{(A-E)^2}E=\sum_{n-1}^k\frac{(A_i-E_i)^2}{E_i}=\sum_{i=1}^k\frac{(A_i-np_i)^2}{np_i},(i=1,2,3,\ldots,k)&lt;/script&gt;

&lt;p&gt;其中，$A_i$为i水平的观察频数，$E_i$为i水平的期望频数，n为总频数，$p_i$为i水平的期望频率。i水平的期望频数$E_i$等于总频数n×i水平的期望概率$p_i$，k为单元格数。当n比较大时，$χ_2$统计量近似服从k-1(计算$E_i$时用到的参数个数)个自由度的卡方分布。&lt;/p&gt;

&lt;p&gt;作为学术界的领袖，Pearson先生当初发表在《哲学杂志》上的$χ^2$论文题目为：On the criterion that a given system of deviations from the probable in the case of a correlated system of variables is such that it can be reasonably supposed to have arisen from random sampling.&lt;/p&gt;

&lt;p&gt;由卡方的计算公式可知，当观察频数与期望频数完全一致时，$χ^2$值为0；观察频数与期望频数越接近，两者之间的差异越小，$χ^2$值越小；反之，观察频数与期望频数差别越大，两者之间的差异越大，$χ^2$值越大。换言之，大的$χ^2$值表明观察频数远离期望频数，即表明远离假设。小的χ2值表明观察频数接近期望频数，接近假设。因此，$χ^2$是观察频数与期望频数之间距离的一种度量指标，也是假设成立与否的度量指标。如果$χ^2$值“小”，研究者就倾向于不拒绝$H_0$；如果$χ^2$值大，就倾向于拒绝$H_0$。至于$χ^2$在每个具体研究中究竟要大到什么程度才能拒绝$H_0$，则要借助于卡方分布求出所对应的P值来确定。&lt;/p&gt;

&lt;h2 id=&quot;卡方检验的样本量要求&quot;&gt;卡方检验的样本量要求&lt;/h2&gt;

&lt;p&gt;卡方分布本身是连续型分布，但是在分类资料的统计分析中，显然频数只能以整数形式出现，因此计算出的统计量是非连续的。只有当样本量比较充足时，才可以忽略两者间的差异，否则将可能导致较大的偏差具体而言，一般认为对于卡方检验中的每一个单元格，要求其最小期望频数均大于1，且至少有4／5的单元格期望频数大于5，此时使用卡方分布计算出的概率值才是准确的。如果数据不符合要求，可以采用确切概率法进行概率的计算。&lt;/p&gt;

&lt;h3 id=&quot;卡方检验的类型&quot;&gt;卡方检验的类型&lt;/h3&gt;
&lt;h4 id=&quot;1四格表资料的卡方检验&quot;&gt;1、四格表资料的卡方检验&lt;/h4&gt;
&lt;p&gt;四格表资料的卡方检验用于进行两个率或两个构成比的比较。&lt;/p&gt;

&lt;p&gt;1）专用公式：&lt;/p&gt;

&lt;p&gt;若四格表资料四个格子的频数分别为a，b，c，d，则四格表资料卡方检验的&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;卡方值=(ad-bc)^2\frac n{(a+b)(c+d)(a+c)(b+d)}&lt;/script&gt; ,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;自由度v=(行数-1)(列数-1)&lt;/script&gt;

&lt;p&gt;2、行×列表资料的卡方检验&lt;/p&gt;

&lt;p&gt;行×列表资料的卡方检验用于多个率或多个构成比的比较。&lt;/p&gt;

&lt;p&gt;1）专用公式：&lt;/p&gt;

&lt;p&gt;r行c列表资料卡方检验的&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;卡方值=n[(\frac {A_{11}}{n_1n_1}+\frac {A_{12}}{n_1n_2}+\ldots+\frac {A_{rc}}{n_rn_c})]-1&lt;/script&gt;

&lt;p&gt;2)应用条件：&lt;/p&gt;

&lt;p&gt;要求每个格子中的理论频数T均大于5或1&amp;lt;T&amp;lt;5的格子数不超过总格子数的1/5。当有T&amp;lt;1或1&amp;lt;T&amp;lt;5的格子较多时，可采用并行并列、删行删列、增大样本含量的办法使其符合行×列表资料卡方检验的应用条件。而多个率的两两比较可采用行×列表分割的办法。&lt;/p&gt;

&lt;p&gt;3、列联表资料的卡方检验&lt;/p&gt;

&lt;p&gt;同一组对象，观察每一个个体对两种分类方法的表现，结果构成双向交叉排列的统计表就是列联表。&lt;/p&gt;

&lt;p&gt;1）R×C 列联表的卡方检验：&lt;/p&gt;

&lt;p&gt;R×C 列联表的卡方检验用于R×C列联表的相关分析，卡方值的计算和检验过程与行×列表资料的卡方检验相同。&lt;/p&gt;

&lt;p&gt;2）2×2列联表的卡方检验：&lt;/p&gt;

&lt;p&gt;2×2列联表的卡方检验又称配对记数资料或配对四格表资料的卡方检验，根据卡方值计算公式的不同，可以达到不同的目的。当用一般四格表的卡方检验计算时，&lt;/p&gt;

&lt;p&gt;$卡方值=(ad-bc)^2\frac n{(a+b)(c+d)(a+c)(b+d)}$&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;，此时用于进行配对四格表的相关分析，如考察两种检验方法的结果有无关系；当$卡方值=\frac {(&lt;/td&gt;
      &lt;td&gt;b-c&lt;/td&gt;
      &lt;td&gt;-1)^2}{b+c}$时，此时卡方检验用来进行四格表的差异检验，如考察两种检验方法的检出率有无差别。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;列联表卡方检验应用中的注意事项同R×C表的卡方检验相同。&lt;/p&gt;

&lt;h2 id=&quot;卡方检验的用途&quot;&gt;卡方检验的用途&lt;/h2&gt;
&lt;p&gt;卡方检验最常见的用途就是考察某无序分类变量各水平在两组或多组间的分布是否一致实际上，除了这个用途之外．卡方检验还有更广泛的应用。具体而言，其用途主要包括以下几个方面：&lt;/p&gt;

&lt;p&gt;(1)检验某个连续变量的分布是否与某种理论分布相一致。如是否符合正态分布、是否服从均匀分布、是否服从Poisson分布等。&lt;/p&gt;

&lt;p&gt;(2)检验某个分类变量各类的出现概率是否等于指定概率。如在36选7的彩票抽奖中，每个数字出现的概率是否各为$\frac 1{36}$；掷硬币时，正反两面出现的概率是否均为0.5。&lt;/p&gt;

&lt;p&gt;(3)检验某两个分类变量是否相互独立。如吸烟(二分类变量：是、否)是否与呼吸道疾病(二分类变量：是、否)有关；产品原料种类(多分类变量)是否与产品合格(二分类变量)有关。&lt;/p&gt;

&lt;p&gt;(4)检验控制某种或某几种分类因素的作用以后，另两个分类变量是否相互独立。如在上例中，控制性别、年龄因素影响以后，吸烟是否和呼吸道疾病有关；控制产品加工工艺的影响后，产品原料类别是否与产品合格有关。&lt;/p&gt;

&lt;p&gt;(5)检验某两种方法的结果是否一致。如采用两种诊断方法对同一批人进行诊断，其诊断结果是否一致；采用两种方法对客户进行价值类别预测，预测结果是否一致&lt;/p&gt;

&lt;h2 id=&quot;卡方检验的应用条件&quot;&gt;卡方检验的应用条件&lt;/h2&gt;
&lt;p&gt;适用于四格表应用条件：&lt;/p&gt;

&lt;p&gt;1)随机样本数据。两个独立样本比较可以分以下3种情况：&lt;/p&gt;

&lt;p&gt;(1)所有的理论数T≥5并且总样本量n≥40，用Pearson卡方进行检验。&lt;/p&gt;

&lt;p&gt;(2)如果理论数T＜5但T≥1，并且n≥40，用连续性校正的卡方进行检验。&lt;/p&gt;

&lt;p&gt;(3)如果有理论数T＜1或n＜40，则用Fisher’s检验。&lt;/p&gt;

&lt;p&gt;2)卡方检验的理论频数不能太小。&lt;/p&gt;

&lt;p&gt;R×C表卡方检验应用条件：&lt;/p&gt;

&lt;p&gt;(1)R×C表中理论数小于5的格子不能超过1／5；&lt;/p&gt;

&lt;p&gt;(2)不能有小于1的理论数。如果实验中有不符合R×C表的卡方检验，可以通过增加样本数、列合并来实现。&lt;/p&gt;

&lt;h2 id=&quot;卡方检验应用实例&quot;&gt;卡方检验应用实例&lt;/h2&gt;
&lt;h3 id=&quot;1应用实例适合度检验&quot;&gt;1.应用实例——适合度检验&lt;/h3&gt;

&lt;p&gt;实际执行多项式试验而得到的观察次数，与虚无假设的期望次数相比较，称为卡方适度检验，即在于检验二者接近的程度，利用样本数据以检验总体分布是否为某一特定分布的统计方法。这里以掷骰子为例介绍适度检验的方法。&lt;/p&gt;

&lt;p&gt;【例1】&lt;/p&gt;

&lt;p&gt;(1)假设掷一骰子120次，各点数共出现次数为a，b为各点数出现的期望值$120×\frac16=20$，建立工作表文件，如图1所示。&lt;/p&gt;

&lt;p&gt;(2)设置零假设$H_0$：观察分布等于期望分布。&lt;/p&gt;

&lt;p&gt;(3)计算卡方检验统计量，如图2所示。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D_2=\frac{(B_2-C_2)^2}{C_2}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D_8=\sum{(D_2:D_7)}&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/Kxene0&quot;&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/04/Kxene0.md.jpg&quot; alt=&quot;Kxene0.md.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(4)确定自由度，(6-1)×(2-1)=5；选择显著水平α=0.05。&lt;/p&gt;

&lt;p&gt;(5)利用Excel提供的CHIINV函数求临界值，在D9单元格中键入“=CHIINV(0.05，5)”按回车键，得临界值11.07。&lt;/p&gt;

&lt;p&gt;(6)比较临界值和统计量，11.07&amp;gt;2.3，即临界值大于统计量，故差异不显著，接受H0。&lt;/p&gt;

&lt;h4 id=&quot;2应用实例2独立性检验&quot;&gt;2.应用实例2——独立性检验&lt;/h4&gt;

&lt;p&gt;卡方独立性检验是用来检验两个属性间是否独立。一个变量作为行，另一个变量作为列。下面一例便是介绍卡方独立性检验的方法。&lt;/p&gt;

&lt;p&gt;【例2】某机构欲了解现在性别与收入是否有关，他们随机抽样500人，询问对此的看法，结果分为“有关、无关、不好说，，三种答案，图3中县调查得到的数据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/04/KxeAzj.png&quot; alt=&quot;KxeAzj.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是利用Excel解决此问题的步骤。&lt;/p&gt;

&lt;p&gt;(1)零假设$H_0$：性别与收入无关。&lt;/p&gt;

&lt;p&gt;(2)确定自由度为(3-1)×(2-1)=2，选择显著水平α=0.05。&lt;/p&gt;

&lt;p&gt;(3)求解男女对收入与性别相关不同看法的期望次数，这里采用所在行列的合计值的乘机除以总计值来计算每一个期望值，如图4所示，在单元格B9中键入“=B5*E3/E5”，同理(第一个等于号理解为在单元格中键入)：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;B10=“=B5*E4/E5，
C9=“=C5*E3/E5”，
C10=“=C5*E4/E5”，
D9=“=D5*E3/E5”，
D10=“=D5*E4/E5” 。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/04/KxeVQs.png&quot; alt=&quot;KxeVQs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(4)利用卡方统计量计算公式计算统计量，在单元格B15中键入“=(B3-B9)^2/B9”，其余单元格依次类推，结果如图5所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/04/KxeZyn.png&quot; alt=&quot;KxeZyn.png&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X^2=\sum\frac{(f_0-f_e)^2}{f_e}=14.32483&lt;/script&gt;

&lt;p&gt;(5)利用Excel提供的CHIINV函数计算显著水平为0.05，自由度为2卡方分布的临界值，在Excel单元格中键入“=CHIINV(0.05,2)”按回车键，得临界值为5.9915。&lt;/p&gt;

&lt;p&gt;(6)比较统计量度和临界值，统计量14.32483大于临界值5.9915，故拒绝零假设。&lt;/p&gt;

&lt;h4 id=&quot;3应用实例3统一性检验&quot;&gt;3．应用实例3——统一性检验&lt;/h4&gt;

&lt;p&gt;检验两个或两个以上总体的某一特性分布，也就是各“类别”的比例是否统一或相近，一般称为卡方统一性检验或者卡方同质性检验。下面一例便是利用卡方统一性检验的例子。&lt;/p&gt;

&lt;p&gt;【倒3】某咨询公司想了解南京和北京的市民对最低生活保障的满意程度是否相同。他们从南京抽出600居民，北京抽取600居民，每个居民对满意程度(非常满意、满意、不满意、非常不满意)任选一种，且只能选一种。将统计结果键入Excel工作表中，如图6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/04/KxekWQ.jpg&quot; alt=&quot;KxekWQ.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所示。 Image:图6 抽查统计结果.jpg&lt;/p&gt;

&lt;p&gt;下面是利用Excel解决此问题的步骤。&lt;/p&gt;

&lt;p&gt;(1)零假设H0：南京和北京居民对最低生活保障满意程度的比例相同。&lt;/p&gt;

&lt;p&gt;(2)确定自由度为(4-1)×(2-1)=3，选择显著水平α=0.05。&lt;/p&gt;

&lt;p&gt;(3)求解卡方检验的l临界值，在Excel单元格中键入“=CHIINV(0.05，3)”，按回车键得临界值为7.81。&lt;/p&gt;

&lt;p&gt;(4)计算北京和南京不同满意程度的期望值，在单元格B11和C11中分别键入“=$B$7&lt;em&gt;D3/$D$7”和“=$C$7&lt;/em&gt;D3/$D$7”，选中B11：C11，按住C11右下角填充控制点，填充至C14。&lt;/p&gt;

&lt;p&gt;(5)计算卡方统计量，在单元格B19中键入“=(B3-B11)^2/B11”，其余单元格依次类推，结果如图7所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/04/KxeeLq.jpg&quot; alt=&quot;KxeeLq.jpg&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X^2=\sum\frac{(f_0-f_e)^2}{f_e}=14.3875&lt;/script&gt;

&lt;p&gt;(6)比较统计量和临界值，统计量1.3875小于临界值7.81，故接受零假设。&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 1.0 1.1 张文彤,邝春伟编著.第16章 无序分类变量的统计推断——卡方检验 SPSS统计分析基础教程 第2版.高等教育出版社,2011.11.
2.刘铁民主编.第十章 安全生产统计分析 安全生产管理知识 2006版.中国大百科全书出版社,2006年05月第1版.
3.卡方检验的应用条件[J].中国医药科学,2013,(第2期).
4.孙志刚,杨聪.第八章 假设检验 Excel在经济与数理统计中的应用.中国电力出版社,2004年01月第1版.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://wiki.mbalib.com/wiki/卡方检验&quot; title=&quot;卡方检验&quot;&gt;卡方检验&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>终于有人把RISC-V讲明白了</title>
   <link href="http:///cs/riscv-knowledge.html"/>
   <updated>2019-11-01T00:00:00+08:00</updated>
   <id>/cs/riscv-knowledge</id>
   <content type="html">&lt;h1 id=&quot;终于有人把risc-v讲明白了转&quot;&gt;终于有人把RISC-V讲明白了$^{[转]}$&lt;/h1&gt;
&lt;h2 id=&quot;0-risc-v和其他开放架构有何不同&quot;&gt;0 RISC-V和其他开放架构有何不同&lt;/h2&gt;
&lt;p&gt;如果仅从“免费”或“开放”这两点来评判，RISC-V架构并不是第一个做到免费或开放的处理器架构。
在开始之前，我们先通过论述几个具有代表性的开放架构，来分析RISC-V架构的不同之处以及为什么其他开放架构没能取得足够的成功。
&lt;!-- more --&gt;&lt;/p&gt;
&lt;h3 id=&quot;01-平民英雄openrisc&quot;&gt;0.1 平民英雄——OpenRISC&lt;/h3&gt;
&lt;p&gt;OpenRISC是OpenCores组织提供的基于GPL协议的开放源代码RISC处理器。
OpenRISC具有以下特点：
采用免费开放的32/64位 RISC架构。
用Verilog HDL（硬件描述语言）实现了基于该架构的处理器源代码。
具有完整的工具链。
OpenRISC被应用到很多公司的项目之中。可以说，OpenRISC是应用非常广泛的一种开源处理器实现。
OpenRISC的不足之处在于其侧重于实现一种开源的CPU Core，而非立足于定义一种开放的指令集架构，因此其架构的发展不够完整，指令集的定义也不具备上节中提到的RISC-V架构的优点，更加没有上升到成立专门的基金会组织的高度。OpenRISC更多的时候被认为是一个开源的Core，而非一种优美的指令集架构。此外，OpenRISC的许可证为GPL，这意味着所有的指令集改动都必须开源（而RISC-V则无此约束）。 
###0.2 豪门显贵——SPARC
SPARC架构作为经典的RISC微处理器架构之一，SPARC最早于1985年由Sun电脑所设计。SPARC也是SPARC国际公司的注册商标之一，这家公司于1989年成立，目的是向外界推广SPARC架构以及为该架构进行兼容性测试。该公司为了推广SPARC的生态系统，SPARC国际公司将标准开放，并授权予多家生产商采用，包括德州仪器、Cypress半导体和富士通等。由于SPARC架构也对外完全开放，因此，也出现了完全开放源码的LEON处理器。不仅如此，Sun公司还于1994年推动SPARC v8架构成为IEEE标准（IEEE Standard 1754-1994）。&lt;/p&gt;

&lt;p&gt;由于SPARC架构的初衷是面向服务器领域而设计，其最大的特点是拥有一个大型的寄存器窗口，符合SPARC架构的处理器需要实现从72到640个之多的通用寄存器，每个寄存器宽度为64bits，组成一系列的寄存器组，称之为寄存器窗口。&lt;/p&gt;

&lt;p&gt;这种寄存器窗口的架构，由于可以切换不同的寄存器组快速地响应函数调用与返回，因此，能够产生非常高的性能，但是这种架构由于功耗面积代价太大，而并不适用于PC与嵌入式领域处理器。而SPARC架构也不具备模块化的特点，使得用户无法裁剪和选择。很难作为一种通用的处理器架构对商用的x86和ARM架构形成替代。&lt;/p&gt;

&lt;p&gt;设计这种超大服务器CPU芯片又非普通公司与个人所能涉足，而有能力设计这种大型CPU的公司也没有必要投入巨大的成本来挑战x86的统治地位。随着Sun公司的衰弱，SPARC架构现在基本上退出了人们的视野。感兴趣的读者请在网络上自行搜索文章《再见SPARC处理器，再见Sun》 
###0.3 名校优生——RISC-V
关于RISC-V在伯克利大学诞生的经历，本节在此不做重复赘述。&lt;/p&gt;

&lt;p&gt;因为多年来在CPU领域已经出现过多个免费或开放的架构，很多高校也在科研项目中推出过多种指令集架构。因此，当笔者第一次听说RISC-V之时，以为又是一个玩具，或纯粹学术性质的科研项目而不以为意。&lt;/p&gt;

&lt;p&gt;直到笔者亲自通读了一遍RISC-V的架构文档，不禁为其先进的设计理念所折服。同时，RISC-V架构的各种优点也得到了众多专业人士的青睐好评和众多商业公司的相继加盟。并且2016年RISC-V基金会的正式启动在业界引起了不小的影响。如此种种，使得RISC-V成为至今为止最具备革命性意义的开放处理器架构。
##1 简单就是美——RISC-V架构的设计哲学 
RISC-V架构作为一种指令集架构，在介绍细节之前，让我们先了解设计的哲学。所谓设计的“哲学”便是其推崇的一种策略，譬如说我们熟知的日本车的设计哲学是经济省油，美国车的设计哲学是霸气外漏等。RISC-V架构的设计哲学是什么呢？是“大道至简”。&lt;/p&gt;

&lt;p&gt;笔者最为推崇的一种设计原则便是：简单就是美，简单便意味着可靠。无数的实际案例已经佐证了“简单即意味着可靠的”真理，反之越复杂的机器越则越容易出错。&lt;/p&gt;

&lt;p&gt;所谓大道至简，在IC设计的实际工作中，笔者曾见过最简洁的设计实现安全可靠，也曾见过最繁复的设计长时间无法稳定收敛。最简洁的设计往往是最可靠的，在大多数的项目实践中一次次的得到检验。&lt;/p&gt;

&lt;p&gt;IC设计的工作性质非常特殊，其最终的产出是芯片，而一款芯片的设计和制造周期均很长，无法像软件代码那样轻易的升级和打补丁，每一次芯片的改版到交付都需要几个月的周期。不仅如此，芯片的一次制造成本费用高昂，从几十万美金到百千万美金不等。这些特性都决定了IC设计的试错成本极为高昂，因此能够有效的降低错误的发生就显得非常的重要。&lt;/p&gt;

&lt;p&gt;现代的芯片设计规模越来越大，复杂度越来越高，并不是说要求设计者一味的逃避使用复杂的技术，而是应该将好钢用在刀刃上，将最复杂的设计用在最为关键的场景，在大多数有选择的情况下，尽量选择简洁的实现方案。&lt;/p&gt;

&lt;p&gt;笔者在第一次阅读了RISC-V架构文档之时，不禁击节赞叹，拍案惊奇，因为RISC-V架构在其文档中不断地明确强调，其设计哲学是“大道至简”，力图通过架构的定义使得硬件的实现足够简单。其简单就是美的哲学，可以从几个方面容易看出，后续小节将一一加以论述 
###1.1 无病一身轻——架构的篇幅
在处理器领域，目前主流的架构为x86与ARM架构，笔者曾经参与设计ARM架构的应用处理器，因此需要阅读ARM的架构文档，如果对其熟悉的读者应该了解其篇幅。经过几十年的发展，现代的x86与ARM架构的架构文档长达几百数千页。打印出来能有半个桌子高，可真是“著作等身”。&lt;/p&gt;

&lt;p&gt;之所以现代x86与ARM架构的文档长达数千页，且版本众多，一个主要的原因是因为其架构的发展的过程也伴随了现代处理器架构技术的不断发展成熟。&lt;/p&gt;

&lt;p&gt;并且作为商用的架构，为了能够保持架构的向后兼容性，其不得不保留许多过时的定义，或者在定义新的架构部分时为了能够将就已经存在的技术部分而显得非常的别扭。久而久之就变得极为冗长。&lt;/p&gt;

&lt;p&gt;那么现代成熟的架构是否能够选择重新开始，重新定义一个简洁的架构呢，可以说是几乎不可能。其中一个重要的原因便是其无法向前兼容，从而无法得到用户的接受。试想一下如果我们买了一款新的搭配新的处理器的电脑或者手机回家，之前所有的软件都无法运行而变砖，那肯定是无法让人接受的。&lt;/p&gt;

&lt;p&gt;而现在才推出的RISC-V架构，则具备了后发优势，由于计算机体系结构经过多年的发展已经成为比较成熟的技术，多年来在不断成熟的过程中暴露的问题都已经被研究透彻，因此新的RISC-V架构能够加以规避，并且没有背负向后兼容的历史包袱，可以说是无病一身轻。&lt;/p&gt;

&lt;p&gt;目前的“RISC-V架构文档”分为“指令集文档”（riscv-spec-v2.2.pdf）和“特权架构文档”（riscv-privileged-v1.10.pdf）。“指令集文档”的篇幅为145页，而“特权架构文档”的篇幅也仅为91页。熟悉体系结构的工程师仅需一至两天便可将其通读，虽然“RISC-V的架构文档”还在不断地丰富，但是相比“x86的架构文档”与“ARM的架构文档”，RISC-V的篇幅可以说是极其短小精悍。&lt;/p&gt;

&lt;p&gt;感兴趣的读者可以在RISC-V基金会的网站上（https://riscv.org/specifications/）无需注册便可免费下载其文档，如图1所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pub/imgs/001/001.jpg&quot; alt=&quot;RISC-V基金会网站上的架构文档&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图1 RISC-V基金会网站上的架构文档&lt;/p&gt;
&lt;h3 id=&quot;12-能屈能伸模块化的指令集&quot;&gt;1.2 能屈能伸——模块化的指令集&lt;/h3&gt;
&lt;p&gt;RISC-V架构相比其他成熟的商业架构的最大一个不同还在于它是一个模块化的架构。因此，RISC-V架构不仅短小精悍，而且其不同的部分还能以模块化的方式组织在一起，从而试图通过一套统一的架构满足各种不同的应用。&lt;/p&gt;

&lt;p&gt;这种模块化是x86与ARM架构所不具备的。以ARM的架构为例，ARM的架构分为A、R和M三个系列，分别针对于Application（应用操作系统）、Real-Time（实时）和Embedded（嵌入式）三个领域，彼此之间并不兼容。&lt;/p&gt;

&lt;p&gt;但是模块化的RISC-V架构能够使得用户能够灵活选择不同的模块组合，以满足不同的应用场景，可以说是“老少咸宜”。譬如针对于小面积低功耗嵌入式场景，用户可以选择RV32IC组合的指令集，仅使用Machine Mode（机器模式）；而高性能应用操作系统场景则可以选择譬如RV32IMFDC的指令集，使用Machine Mode（机器模式）与User Mode（用户模式）两种模式。而他们共同的部分则可以相互兼容。&lt;/p&gt;

&lt;h3 id=&quot;13-浓缩的都是精华指令的数量&quot;&gt;1.3 浓缩的都是精华——指令的数量&lt;/h3&gt;
&lt;p&gt;短小精悍的架构以及模块化的哲学，使得RISC-V架构的指令数目非常的简洁。基本的RISC-V指令数目仅有40多条，加上其他的模块化扩展指令总共几十条指令。&lt;/p&gt;

&lt;h2 id=&quot;2-risc-v指令集架构简介&quot;&gt;2 RISC-V指令集架构简介&lt;/h2&gt;
&lt;p&gt;本章将对RISC-V的指令集架构多方面的特性进行简要介绍。&lt;/p&gt;

&lt;p&gt;2.1 模块化的指令子集
RISC-V的指令集使用模块化的方式进行组织，每一个模块使用一个英文字母来表示。RISC-V最基本也是唯一强制要求实现的指令集部分是由I字母表示的基本整数指令子集，使用该整数指令子集，便能够实现完整的软件编译器。其他的指令子集部分均为可选的模块，具有代表性的模块包括M/A/F/D/C，如表1所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pub/imgs/001/002.jpg&quot; alt=&quot;RISC-V的模块化指令集&quot; /&gt;&lt;/p&gt;

&lt;p&gt;表1 RISC-V的模块化指令集
为了提高代码密度，RISC-V架构也提供可选的“压缩”指令子集，由英文字母C表示。压缩指令的指令编码长度为16比特，而普通的非压缩指令的长度为32比特。以上这些模块的一个特定组合“IMAFD”，也被称为“通用”组合，由英文字母G表示。因此RV32G表示RV32IMAFD，同理RV64G表示RV64IMAFD。&lt;/p&gt;

&lt;p&gt;为了进一步减少面积，RISC-V架构还提供一种“嵌入式”架构，由英文字母E表示。该架构主要用于追求极低面积与功耗的深嵌入式场景。该架构仅需要支持16个通用整数寄存器，而非嵌入式的普通架构则需要支持32个通用整数寄存器。&lt;/p&gt;

&lt;p&gt;通过以上的模块化指令集，能够选择不同的组合来满足不同的应用。譬如，追求小面积低功耗的嵌入式场景可以选择使用RV32EC架构；而大型的64位架构则可以选择RV64G。&lt;/p&gt;

&lt;p&gt;除了上述的模块，还有若干的模块包括L、B、P、V和T等。这些扩展目前大多数还在不断完善和定义中，尚未最终确定，因此本文在此不做详细论述。&lt;/p&gt;

&lt;h3 id=&quot;22-可配置的通用寄存器组&quot;&gt;2.2 可配置的通用寄存器组&lt;/h3&gt;
&lt;p&gt;RISC-V架构支持32位或者64位的架构，32位架构由RV32表示，其每个通用寄存器的宽度为32比特；64位架构由RV64表示，其每个通用寄存器的宽度为64比特。&lt;/p&gt;

&lt;p&gt;RISC-V架构的整数通用寄存器组，包含32个（I架构）或者16个（E架构）通用整数寄存器，其中整数寄存器0被预留为常数0，其他的31个（I架构）或者15个（E架构）为普通的通用整数寄存器。&lt;/p&gt;

&lt;p&gt;如果使用了浮点模块（F或者D），则需要另外一个独立的浮点寄存器组，包含32个通用浮点寄存器。如果仅使用F模块的浮点指令子集，则每个通用浮点寄存器的宽度为32比特；如果使用了D模块的浮点指令子集，则每个通用浮点寄存器的宽度为64比特。&lt;/p&gt;

&lt;h3 id=&quot;23-规整的指令编码&quot;&gt;2.3 规整的指令编码&lt;/h3&gt;
&lt;p&gt;在流水线中能够尽早尽快的读取通用寄存器组，往往是处理器流水线设计的期望之一，这样可以提高处理器性能和优化时序。这个看似简单的道理在很多现存的商用RISC架构中都难以实现，因为经过多年反复修改不断添加新指令后，其指令编码中的寄存器索引位置变得非常的凌乱，给译码器造成了负担。&lt;/p&gt;

&lt;p&gt;得益于后发优势和总结了多年来处理器发展的教训，RISC-V的指令集编码非常的规整，指令所需的通用寄存器的索引（Index）都被放在固定的位置，如图2所示。因此指令译码器（Instruction Decoder）可以非常便捷的译码出寄存器索引然后读取通用寄存器组（Register File，Regfile）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pub/imgs/001/003.jpg&quot; alt=&quot;RV32I规整的指令编码格式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图2 RV32I规整的指令编码格式&lt;/p&gt;
&lt;h3 id=&quot;24-简洁的存储器访问指令&quot;&gt;2.4 简洁的存储器访问指令&lt;/h3&gt;
&lt;p&gt;与所有的RISC处理器架构一样，RISC-V架构使用专用的存储器读（Load）指令和存储器写（Store）指令访问存储器（Memory），其他的普通指令无法访问存储器，这种架构是RISC架构的常用的一个基本策略，这种策略使得处理器核的硬件设计变得简单。&lt;/p&gt;

&lt;p&gt;存储器访问的基本单位是字节（Byte）。RISC-V的存储器读和存储器写指令支持一个字节（8位），半字（16位），单字（32位）为单位的存储器读写操作，如果是64位架构还可以支持一个双字（64位）为单位的存储器读写操作。&lt;/p&gt;

&lt;p&gt;RISC-V架构的存储器访问指令还有如下显著特点：&lt;/p&gt;

&lt;p&gt;为了提高存储器读写的性能，RISC-V架构推荐使用地址对齐的存储器读写操作，但是地址非对齐的存储器操作RISC-V架构也支持，处理器可以选择用硬件来支持，也可以选择用软件来支持。&lt;/p&gt;

&lt;p&gt;由于现在的主流应用是小端格式（Little-Endian），RISC-V架构仅支持小端格式。有关小端格式和大端格式的定义和区别，本文在此不做过多介绍，若对此不甚了解的初学者可以自行查阅学习。&lt;/p&gt;

&lt;p&gt;很多的RISC处理器都支持地址自增或者自减模式，这种自增或者自减的模式虽然能够提高处理器访问连续存储器地址区间的性能，但是也增加了设计处理器的难度。RISC-V架构的存储器读和存储器写指令不支持地址自增自减的模式。&lt;/p&gt;

&lt;p&gt;RISC-V架构采用松散存储器模型（Relaxed Memory Model），松散存储器模型对于访问不同地址的存储器读写指令的执行顺序不作要求，除非使用明确的存储器屏障（Fence）指令加以屏蔽。&lt;/p&gt;

&lt;p&gt;这些选择都清楚地反映了RISC-V架构力图简化基本指令集，从而简化硬件设计的哲学。RISC-V架构如此定义非常合理，能够达到能屈能伸的效果。譬如：对于低功耗的简单CPU，可以使用非常简单的硬件电路即可完成设计；而对于追求高性能的超标量处理器则可以通过复杂设计的动态硬件调度能力来提高性能。&lt;/p&gt;

&lt;h3 id=&quot;25-高效的分支跳转指令&quot;&gt;2.5 高效的分支跳转指令&lt;/h3&gt;
&lt;p&gt;RISC-V架构有两条无条件跳转指令（Unconditional Jump），jal与jalr指令。跳转链接（Jump and Link）指令jal可用于进行子程序调用，同时将子程序返回地址存在链接寄存器（Link Register：由某一个通用整数寄存器担任）中。跳转链接寄存器（Jump and Link-Register）指令jalr指令能够用于子程序返回指令，通过将jal指令（跳转进入子程序）保存的链接寄存器用于jalr指令的基地址寄存器，则可以从子程序返回。&lt;/p&gt;

&lt;p&gt;RISC-V架构有6条带条件跳转指令（Conditional Branch），这种带条件的跳转指令跟普通的运算指令一样直接使用2个整数操作数，然后对其进行比较，如果比较的条件满足时，则进行跳转。因此，此类指令将比较与跳转两个操作放到了一条指令里完成。&lt;/p&gt;

&lt;p&gt;作为比较，很多的其他RISC架构的处理器需要使用两条独立的指令。第一条指令先使用比较指令，比较的结果被保存到状态寄存器之中；第二条指令使用跳转指令，判断前一条指令保存在状态寄存器当中的比较结果为真时则进行跳转。相比而言RISC-V的这种带条件跳转指令不仅减少了指令的条数，同时硬件设计上更加简单。&lt;/p&gt;

&lt;p&gt;对于没有配备硬件分支预测器的低端CPU，为了保证其性能，RISC-V的架构明确要求其采用默认的静态分支预测机制，即：如果是向后跳转的条件跳转指令，则预测为“跳”；如果是向前跳转的条件跳转指令，则预测为“不跳”，并且RISC-V架构要求编译器也按照这种默认的静态分支预测机制来编译生成汇编代码，从而让低端的CPU也能得到不错的性能。&lt;/p&gt;

&lt;p&gt;为了使硬件设计尽量简单，RISC-V架构特地定义了所有的带条件跳转指令跳转目标的偏移量（相对于当前指令的地址）都是有符号数，并且其符号位被编码在固定的位置。因此，这种静态预测机制在硬件上非常容易实现，硬件译码器可以轻松的找到这个固定的位置，并判断其是0还是1来判断其是正数还是负数，如果是负数则表示跳转的目标地址为当前地址减去偏移量，也就是向后跳转，则预测为“跳”。当然对于配备有硬件分支预测器的高端CPU，则可以采用高级的动态分支预测机制来保证性能。&lt;/p&gt;

&lt;h3 id=&quot;26-简洁的子程序调用&quot;&gt;2.6 简洁的子程序调用&lt;/h3&gt;
&lt;p&gt;为了理解此节，需先对一般RISC架构中程序调用子函数的过程予以介绍，其过程如下：&lt;/p&gt;

&lt;p&gt;进入子函数之后需要用存储器写（Store）指令来将当前的上下文（通用寄存器等的值）保存到系统存储器的堆栈区内，这个过程通常称为“保存现场”。&lt;/p&gt;

&lt;p&gt;在退出子程序之时，需要用存储器读（Load）指令来将之前保存的上下文（通用寄存器等的值）从系统存储器的堆栈区读出来，这个过程通常称为“恢复现场”。&lt;/p&gt;

&lt;p&gt;“保存现场”和“恢复现场”的过程通常由编译器编译生成的指令来完成，使用高层语言（譬如C或者C++）开发的开发者对此可以不用太关心。高层语言的程序中直接写上一个子函数调用即可，但是这个底层发生的“保存现场”和“恢复现场”的过程却是实实在在地发生着（可以从编译出的汇编语言里面看到那些“保存现场”和“恢复现场”的汇编指令），并且还需要消耗若干的CPU执行时间。&lt;/p&gt;

&lt;p&gt;为了加速这个“保存现场”和“恢复现场”的过程，有的RISC架构发明了一次写多个寄存器到存储器中（Store Multiple），或者一次从存储器中读多个寄存器出来（Load Multiple）的指令，此类指令的好处是一条指令就可以完成很多事情，从而减少汇编指令的代码量，节省代码的空间大小。但是此种“Load Multiple”和“Store Multiple”的弊端是会让CPU的硬件设计变得复杂，增加硬件的开销，也可能损伤时序使得CPU的主频无法提高，笔者在曾经设计此类处理器时便深受其苦。&lt;/p&gt;

&lt;p&gt;RISC-V架构则放弃使用这种“Load Multiple”和“Store Multiple”指令。并解释，如果有的场合比较介意这种“保存现场”和“恢复现场”的指令条数，那么可以使用公用的程序库（专门用于保存和恢复现场）来进行，这样就可以省掉在每个子函数调用的过程中都放置数目不等的“保存现场”和“恢复现场”的指令。&lt;/p&gt;

&lt;p&gt;此选择再次印证了RISC-V追求硬件简单的哲学，因为放弃“Load Multiple”和“Store Multiple”指令可以大幅简化CPU的硬件设计，对于低功耗小面积的CPU可以选择非常简单的电路进行实现，而高性能超标量处理器由于硬件动态调度能力很强，可以有强大的分支预测电路保证CPU能够快速的跳转执行，从而可以选择使用公用的程序库（专门用于保存和恢复现场）的方式减少代码量，但是同时达到高性能。&lt;/p&gt;

&lt;h3 id=&quot;27-无条件码执行&quot;&gt;2.7 无条件码执行&lt;/h3&gt;
&lt;p&gt;很多早期的RISC架构发明了带条件码的指令，譬如在指令编码的头几位表示的是条件码（Conditional Code），只有该条件码对应的条件为真时，该指令才被真正执行。&lt;/p&gt;

&lt;p&gt;这种将条件码编码到指令中的形式可以使得编译器将短小的循环编译成带条件码的指令，而不用编译成分支跳转指令。这样便减少了分支跳转的出现，一方面减少了指令的数目；另一方面也避免了分支跳转带来的性能损失。然而，这种“条件码”指令的弊端同样会使得CPU的硬件设计变得复杂，增加硬件的开销，也可能损伤时序使得CPU的主频无法提高，笔者在曾经设计此类处理器时便深受其苦。&lt;/p&gt;

&lt;p&gt;RISC-V架构则放弃使用这种带“条件码”指令的方式，对于任何的条件判断都使用普通的带条件分支跳转指令。此选择再次印证了RISC-V追求硬件简单的哲学，因为放弃带“条件码”指令的方式可以大幅简化CPU的硬件设计，对于低功耗小面积的CPU可以选择非常简单的电路进行实现，而高性能超标量处理器由于硬件动态调度能力很强，可以有强大的分支预测电路保证CPU能够快速的跳转执行达到高性能。&lt;/p&gt;

&lt;h3 id=&quot;28-无分支延迟槽&quot;&gt;2.8 无分支延迟槽&lt;/h3&gt;
&lt;p&gt;很多早期的RISC架构均使用了“分支延迟槽（Delay Slot）”，最具有代表性的便是MIPS架构，在很多经典的计算机体系结构教材中，均使用MIPS对分支延迟槽进行过介绍。分支延迟槽就是指在每一条分支指令后面紧跟的一条或者若干条指令不受分支跳转的影响，不管分支是否跳转，这后面的几条指令都一定会被执行。&lt;/p&gt;

&lt;p&gt;早期的RISC架构很多采用了分支延迟槽诞生的原因主要是因为当时的处理器流水线比较简单，没有使用高级的硬件动态分支预测器，所以使用分支延迟槽能够取得可观的性能效果。然而，这种分支延迟槽使得CPU的硬件设计变得极为的别扭，CPU设计人员对此往往苦不堪言。&lt;/p&gt;

&lt;p&gt;RISC-V架构则放弃了分支延迟槽，再次印证了RISC-V力图简化硬件的哲学，因为现代的高性能处理器的分支预测算法精度已经非常高，可以有强大的分支预测电路保证CPU能够准确的预测跳转执行达到高性能。而对于低功耗小面积的CPU，由于无需支持分支延迟槽，硬件得到极大简化，也能进一步减少功耗和提高时序。&lt;/p&gt;

&lt;h3 id=&quot;29-无零开销硬件循环&quot;&gt;2.9 无零开销硬件循环&lt;/h3&gt;
&lt;p&gt;很多RISC架构还支持零开销硬件循环（Zero Overhead Hardware Loop）指令，其思想是通过硬件的直接参与，通过设置某些循环次数寄存器（Loop Count），然后可以让程序自动地进行循环，每一次循环则Loop Count自动减1，这样持续循环直到Loop Count的值变成0，则退出循环。&lt;/p&gt;

&lt;p&gt;之所以提出发明这种硬件协助的零开销循环是因为在软件代码中的for 循环（for i=0; i&lt;/p&gt;

&lt;p&gt;然有得必有失，此类零开销硬件循环指令大幅地增加了硬件设计的复杂度。因此，零开销循环指令与RISC-V架构简化硬件的哲学是完全相反的，在RISC-V架构中自然没有使用此类零开销硬件循环指令。&lt;/p&gt;

&lt;h3 id=&quot;210-简洁的运算指令&quot;&gt;2.10 简洁的运算指令&lt;/h3&gt;
&lt;p&gt;在本章第2.1节中曾经提到RISC-V架构使用模块化的方式组织不同的指令子集，最基本的整数指令子集（I字母表示）支持的运算包括加法、减法、移位、按位逻辑操作和比较操作。这些基本的运算操作能够通过组合或者函数库的方式完成更多的复杂操作（譬如乘除法和浮点操作），从而能够完成大多数的软件操作。&lt;/p&gt;

&lt;p&gt;整数乘除法指令子集（M字母表示）支持的运算包括，有符号或者无符号的乘法和除法操作。乘法操作能够支持两个32位的整数相乘得到一个64位的结果；除法操作能够支持两个32位的整数相除得到一个32位的商与32位的余数。&lt;/p&gt;

&lt;p&gt;单精度浮点指令子集（F字母表示）与双精度浮点指令子集（D字母表示）支持的运算包括浮点加减法，乘除法，乘累加，开平方根和比较等操作，同时提供整数与浮点，单精度与双精度浮点彼此之间的格式转换操作。&lt;/p&gt;

&lt;p&gt;很多RISC架构的处理器在运算指令产生错误之时，譬如上溢（Overflow）、下溢（Underflow）、非规格化浮点数（Subnormal）和除零（Divide by Zero），都会产生软件异常。RISC-V架构的一个特殊之处是对任何的运算指令错误（包括整数与浮点指令）均不产生异常，而是产生某个特殊的默认值，同时，设置某些状态寄存器的状态位。RISC-V架构推荐软件通过其他方法来找到这些错误。再次清楚地反映了RISC-V架构力图简化基本的指令集，从而简化硬件设计的哲学。&lt;/p&gt;

&lt;h3 id=&quot;211-优雅的压缩指令子集&quot;&gt;2.11 优雅的压缩指令子集&lt;/h3&gt;
&lt;p&gt;基本的RISC-V基本整数指令子集（字母I表示 ）规定的指令长度均为等长的32位，这种等长指令定义使得仅支持整数指令子集的基本RISC-V CPU非常容易设计。但是等长的32位编码指令也会造成代码体积（Code Size）相对较大的问题。&lt;/p&gt;

&lt;p&gt;为了满足某些对于代码体积要求较高的场景（譬如嵌入式领域），RISC-V定义了一种可选的压缩（Compressed）指令子集，由字母C表示，也可以由RVC表示。RISC-V具有后发优势，从一开始便规划了压缩指令，预留了足够的编码空间，16位长指令与普通的32位长指令可以无缝自由地交织在一起，处理器也没有定义额外的状态。&lt;/p&gt;

&lt;p&gt;RISC-V压缩指令的另外一个特别之处是，16位指令的压缩策略是将一部分普通最常用的的32位指令中的信息进行压缩重排得到（譬如假设一条指令使用了两个同样的操作数索引，则可以省去其中一个索引的编码空间），因此每一条16位长的指令都能一一找到其对应的原始32位指令。因此，程序编译成为压缩指令仅在汇编器阶段就可以完成，极大的简化了编译器工具链的负担。&lt;/p&gt;

&lt;p&gt;RISC-V架构的研究者进行了详细的代码体积分析，如图3所示，通过分析结果可以看出，RV32C的代码体积相比RV32的代码体积减少了百分之四十，并且与ARM，MIPS和x86等架构相比都有不错的表现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pub/imgs/001/004.jpg&quot; alt=&quot;各指令集架构的代码密度比较&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图3 各指令集架构的代码密度比较（数据越小越好）&lt;/p&gt;
&lt;h3 id=&quot;212-特权模式&quot;&gt;2.12 特权模式&lt;/h3&gt;
&lt;p&gt;RISC-V架构定义了三种工作模式，又称特权模式（Privileged Mode）：&lt;/p&gt;

&lt;p&gt;Machine Mode：机器模式，简称M Mode。&lt;/p&gt;

&lt;p&gt;Supervisor Mode：监督模式，简称S Mode。&lt;/p&gt;

&lt;p&gt;User Mode：用户模式，简称U Mode。&lt;/p&gt;

&lt;p&gt;RISC-V架构定义M Mode为必选模式，另外两种为可选模式。通过不同的模式组合可以实现不同的系统。&lt;/p&gt;

&lt;p&gt;RISC-V架构也支持几种不同的存储器地址管理机制，包括对于物理地址和虚拟地址的管理机制，使得RISC-V架构能够支持从简单的嵌入式系统（直接操作物理地址）到复杂的操作系统（直接操作虚拟地址）的各种系统。&lt;/p&gt;

&lt;h3 id=&quot;213-csr寄存器&quot;&gt;2.13 CSR寄存器&lt;/h3&gt;
&lt;p&gt;RISC-V架构定义了一些控制和状态寄存器（Control and Status Register，CSR），用于配置或记录一些运行的状态。CSR寄存器是处理器核内部的寄存器，使用其自己的地址编码空间和存储器寻址的地址区间完全无关系。&lt;/p&gt;

&lt;p&gt;CSR寄存器的访问采用专用的CSR指令，包括CSRRW、CSRRS、CSRRC、CSRRWI、CSRRSI以及CSRRCI指令。&lt;/p&gt;

&lt;h3 id=&quot;214-中断和异常&quot;&gt;2.14 中断和异常&lt;/h3&gt;
&lt;p&gt;中断和异常机制往往是处理器指令集架构中最为复杂而关键的部分。RISC-V架构定义了一套相对简单基本的中断和异常机制，但是也允许用户对其进行定制和扩展。&lt;/p&gt;

&lt;h3 id=&quot;215-矢量指令子集&quot;&gt;2.15 矢量指令子集&lt;/h3&gt;
&lt;p&gt;RISC-V架构目前虽然还没有定型矢量（Vector）指令子集，但是从目前的草案中已经可以看出，RISC-V矢量指令子集的设计理念非常的先进，由于后发优势及借助矢量架构多年发展成熟的结论，RISC-V架构将使用可变长度的矢量，而不是矢量定长的SIMD指令集（譬如ARM的NEON和Intel的MMX），从而能够灵活的支持不同的实现。追求低功耗小面积的CPU可以选择使用长度较短的硬件矢量进行实现，而高性能的CPU则可以选择较长的硬件矢量进行实现，并且同样的软件代码能够彼此兼容。&lt;/p&gt;

&lt;h3 id=&quot;216-自定制指令扩展&quot;&gt;2.16 自定制指令扩展&lt;/h3&gt;
&lt;p&gt;除了上述阐述的模块化指令子集的可扩展、可选择，RISC-V架构还有一个非常重要的特性，那就是支持第三方的扩展。用户可以扩展自己的指令子集，RISC-V预留了大量的指令编码空间用于用户的自定义扩展，同时，还定义了四条Custom指令可供用户直接使用，每条Custom指令都有几个比特位的子编码空间预留，因此，用户可以直接使用四条Custom指令扩展出几十条自定义的指令。&lt;/p&gt;

&lt;h3 id=&quot;217-总结与比较&quot;&gt;2.17 总结与比较&lt;/h3&gt;
&lt;p&gt;处理器设计技术经过几十年的衍进，随着大规模集成电路设计技术的发展直至今天，呈现出如下特点：&lt;/p&gt;

&lt;p&gt;由于高性能处理器的硬件调度能力已经非常强劲且主频很高，因此，硬件设计希望指令集尽可能的规整、简单，从而，使得处理器可以设计出更高的主频与更低的面积。&lt;/p&gt;

&lt;p&gt;以IoT应用为主的极低功耗处理器更加苛求低功耗与低面积。&lt;/p&gt;

&lt;p&gt;存储器的资源也比早期的RISC处理器更加丰富。&lt;/p&gt;

&lt;p&gt;如上种种这些因素，使得很多早期的RISC架构设计理念（依据当时技术背景而诞生），时至今日不仅不能帮助现代处理器设计，反而成了负担桎梏。某些早期RISC架构定义的特性，一方面使得高性能处理器的硬件设计束手束脚；另一方面又使得极低功耗的处理器硬件设计背负不必要的复杂度。&lt;/p&gt;

&lt;p&gt;得益于后发优势，全新的RISC-V架构能够规避所有这些已知的负担，同时，利用其先进的设计哲学，设计出一套“现代”的指令集。本节再次将其特点总结如表2所示。&lt;/p&gt;

&lt;p&gt;表2 RISC-V指令集架构特点总结&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pub/imgs/001/005.jpg&quot; alt=&quot;RISC-V指令集架构特点总结&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原文：&lt;a href=&quot;http://m.elecfans.com/article/653167.html&quot; title=&quot;终于有人把RISC-V讲明白了&quot;&gt;终于有人把RISC-V讲明白了&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>linux ip命令和ifconfig命令</title>
   <link href="http:///cs/linux-ip-2.html"/>
   <updated>2019-11-01T00:00:00+08:00</updated>
   <id>/cs/linux-ip-2</id>
   <content type="html">&lt;h1 id=&quot;linux-ip命令和ifconfig命令转&quot;&gt;linux ip命令和ifconfig命令$^{[转]}$&lt;/h1&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;From: http://blog.jobbole.com/97270/
From: https://linux.cn/article-3144-1.html
From: http://chrinux.blog.51cto.com/6466723/1188108
From: http://www.linuxdiyf.com/linux/23935.html
iproute基本介绍：https://segmentfault.com/a/1190000000638244
iproute2 之 ip命令使用教程手册：https://www.iamle.com/archives/1750.html
iproute2 github地址（GitHub上有英文版使用文档）：https://github.com/dmbaturin/iproute2-cheatsheet
《iproute2 对决 net-tools》（英文原文：Linux TCP/IP networking: net-tools vs. iproute2） &amp;lt;!-- more --&amp;gt; ## net-tools 和 iproute2 对比 如今很多系统管理员依然通过组合使用诸如ifconfig、route、arp和netstat等命令行工具（统称为net-tools）来配置网络功能，解决网络故障。net-tools起源于BSD的TCP/IP工具箱，后来成为老版本Linux内核中配置网络功能的工具。但自2001年起，Linux社区已经对其停止维护。同时，一些Linux发行版比如Arch Linux和CentOS/RHEL 7则已经完全抛弃了net-tools，只支持iproute2。 作为网络配置工具的一份子，iproute2是linux下管理控制TCP/IP网络和流量控制的新一代工具包，旨在替代老派的工具链net-tools，即大家比较熟悉的ifconfig，arp，route，netstat等命令。。net-tools通过procfs(/proc)和ioctl系统调用去访问和改变内核网络配置，而iproute2则通过netlink套接字接口与内核通讯。抛开性能而言，net-tools的用法给人的感觉是比较乱，而iproute2的用户接口相对net-tools来说相对来说，更加直观。比如，各种网络资源（如link、IP地址、路由和隧道等）均使用合适的对象抽象去定义，使得用户可使用一致的语法去管理不同的对象。。更重要的是，到目前为止，iproute2仍处在持续开发中。 所以，net-tools和iproute2都需要去学习掌握了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你仍在使用net-tools，而且尤其需要跟上新版Linux内核中的最新最重要的网络特性的话，那么是时候转到iproute2的阵营了。原因就在于使用iproute2可以做很多net-tools无法做到的事情。&lt;/p&gt;

&lt;p&gt;对于那些想要转到使用iproute2的用户，有必要了解下面有关net-tools和iproute2的众多对比。&lt;/p&gt;

&lt;p&gt;iproute2的核心命令是ip:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHk51e.png&quot; alt=&quot;https://s2.ax1x.com/2019/11/01/KHk51e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHk7nA.png&quot; alt=&quot;https://s2.ax1x.com/2019/11/01/KHk7nA.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iproute2 ip 命令常用备忘&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip地址管理
	1.显示ip地址
	    ip a
	    ip address show
	    ip addr show dev eth0
	    ip a sh eth0
	2.增加删除地址
	    ip address add 192.0.2.1/24 dev eth0
	    ip addr del 192.0.2.2/24 dev eth0
	3.显示接口统计
	    ip -s link ls eth0
网卡和链路配置
	4.显示链路
	    ip link show
	    ip link sh eth0
	4.修改接口状态
	    ip link set eth0 up
	    ip link s gre01 down
路由表管理
	5.显示路由表
	    ip route
	    ip ro show dev gre01
	6.增加新路由
	    ip route add 10.2.2.128/27 dev gre01
	7.增加默认路由
	    ip route add default via 192.168.1.1
	8.修改默认路由
	    ip route chg default via 192.168.1.2
	9.删除默认路由
	    ip route del default
隧道配置
	10.增加删除GRE隧道
	    ip tunnel add gre01 mode gre local 10.1.1.1 remote 20.2.2.1 ttl 255
	    ip tunnel del gre01
	11.IPIP隧道
	    ip tunl a ipip01 mode ipip local 10.1.1.1 remote 20.2.2.1 ttl 255
	12.显示隧道
	    ip tunnel show
	13.显示隧道统计
	    ip -s tunl ls gre01
邻居和arp表管理
	13.查看arp表
		ip neigh show
	14.手工增加删除arp项
    	ip neighbor add 10.2.2.2 dev eth0
    	ip neigh del 10.2.2.1 dev eth0
socket统计
	15.显示当前监听
	    ss -l
	15.显示当前监听的进程
	    ss -p
#常用命令
ip link show                             #显示链路
ip addr show                             #显示地址(或ifconfig)
ip route show                            #显示路由(route -n)
ip neigh show                            #显示arp表(ping 192.168.95.50，如果主机在同一局域网内，直接加到arp表)
ip neigh delete 192.168.95.50 dev eth0   #删除arp条目，条目仍然存在状态为stale，下次通信需要确认
ip rule show                             #显示缺省规则
ip route del default dev eth0            #删除接口路由
ip route show table local                #查看本地静态路由
ip route show table main                 #查看直连路由
#添加静态路由
ip route add 10.0.0.0/24 via 192.168.92.129
ip route add 10.10.10.10 via 192.168.92.129
ip route add 172.31.100.0/24 dev eno16777736
ip route add 172.32.0.2 dev eno16777736
#查看路由表
[root@localhost ~]# ip route show table main
#删除
ip route del 10.0.0.0/24
ip route del 10.10.10.10
ip route del 172.31.100.0/24
ip route del 172.32.0.2
#再次查看路由表
[root@localhost ~]# ip route show table main
[root@localhost ~]# ip route show table local
#添加网卡别名
ip addr add 192.168.0.11/24 dev eno16777736
#查看下网卡，别名没有产生，而是直接继承
[root@localhost ~]# ip addr show eno16777736
#添加网卡别名并添加标记    label
ip addr add 192.168.1.2 label eno16777736:0 dev eno16777736
#查看下，多了eno16777736:0
ip addr show eno16777736
[root@localhost ~]# ip addr add 192.168.55.191/24 label eth0:1 dev eth0
[root@localhost ~]# ip addr show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;##（一）网络接口相关&lt;/p&gt;

&lt;p&gt;###（1） 查询所有已连接的网络接口（network interface）
使用net-tools:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~
eth0  Link encap:Ethernet  HWaddr 00:0c:29:0d:ce:93  
inet addr:192.168.6.138  Bcast:192.168.6.255  Mask:255.255.255.0  
inet6 addr: fe80::20c:29ff:fe0d:ce93/64 Scope:Link  
UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1  
RX packets:202741 errors:1 dropped:3312 overruns:0 frame:0  
TX packets:60730 errors:0 dropped:0 overruns:0 carrier:0  
collisions:0 txqueuelen:1000  
RX bytes:27472662 (27.4 MB)  TX bytes:51025509 (51.0 MB)  
Interrupt:18 Base address:0x2000   
eth0:1Link encap:Ethernet  HWaddr 00:0c:29:0d:ce:93  
inet addr:192.168.6.139  Bcast:192.168.6.255  Mask:255.255.255.0  
UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1  
Interrupt:18 Base address:0x2000   
loLink encap:Local Loopback  
inet addr:127.0.0.1  Mask:255.0.0.0  
inet6 addr: ::1/128 Scope:Host  
UP LOOPBACK RUNNING  MTU:65536  Metric:1  
RX packets:5 errors:0 dropped:0 overruns:0 frame:0  
TX packets:5 errors:0 dropped:0 overruns:0 carrier:0  
collisions:0 txqueuelen:0  
RX bytes:512 (512.0 B)  TX bytes:512 (512.0 B)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;ifconfig -a显示的是系统所有的网络接口，不管是激活的还是未激活的。&lt;/p&gt;

&lt;p&gt;这里简单对ifconfig的输出做个解释：&lt;/p&gt;

&lt;p&gt;第一行：Link encap（连接类型）  HWaddr（网卡的硬件地址，即MAC地址）&lt;/p&gt;

&lt;p&gt;第二行：inet addr（网卡的IPv4地址） Bcast（广播地址） Mask（子网掩码）&lt;/p&gt;

&lt;p&gt;第三行：inet6 addr（网卡的IPv6地址）&lt;/p&gt;

&lt;p&gt;第四行：UP（代表网卡是激活状态） BROADCAST（支持广播） RUNNING（代表网卡的网线被接上） MULTICAST（支持组播） MTU（最大传输单元） Metric（用于计算路由的成本）&lt;/p&gt;

&lt;p&gt;第五、六行： 表示网络启动到现在接收和发送的网络包（packets）数量&lt;/p&gt;

&lt;p&gt;第七行：collisions（冲突信息包的数目） txqueuelen（发送队列的大小）&lt;/p&gt;

&lt;p&gt;第八行：表示网络启动到现在接收和发送的总字节量（bytes）&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HWaddr :网卡的硬件地址，即MAC地址
inet addr：IPv4的IP 地址
Bcast：广播地址
mask：子网掩码
inet6 addr：IPv6地址
MTU:最大传输单元
Metric：用于计算路由的成本
RX：表示网络启动到现在的封包接受情况 (Receive)
packets:表示接包数
errors:表示接包发生错误的数量
dropped：表示丢弃的包数量
overruns:表示接收时因过速而丢失的数据包数
frame：表示发生frame错误而丢失的数据包数
TX：从网络启动到现在传送的情况 (Transmit)
collisions：冲突信息包的数目
txqueuelen：发送队列的大小
RX byte、TX byte:总传送/接受的量
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;注：由RX和TX可以了解网络是否非常繁忙&lt;/p&gt;

&lt;p&gt;注：errors:0 dropped:0 overruns:0 frame:0，都为0 说明网络比较稳定&lt;/p&gt;

&lt;p&gt;注：collisions发生太多次表示网络状况不太好&lt;/p&gt;

&lt;p&gt;如果只想知道特定网络接口的信息，可以指定具体网络接口名称，例如ifconfig eth0，ifconfig lo&lt;/p&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~# ip link show  
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default  
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00  
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000  
link/ether 00:0c:29:0d:ce:93 brd ff:ff:ff:ff:ff:ff  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;同样的，想查看特定网络接口的信息，直接指定网络接口名称即可。&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000  
link/ether 00:0c:29:0d:ce:93 brd ff:ff:ff:ff:ff:ff  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果想让输出的结果像ifconfig那样详细，可以增加-s选项：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000  
link/ether 00:0c:29:0d:ce:93 brd ff:ff:ff:ff:ff:ff  
RX: bytes  packets  errors  dropped overrun mcast  
40288764   244422   1   36510   0  
TX: bytes  packets  errors  dropped carrier collsns  
51239397   621160   0   0   0  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样，就可以看到网络接口的流量信息了。&lt;/p&gt;

&lt;p&gt;如果只想看当前被激活的网络接口，可以在命令后头增加一个up:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~# ip link show up  
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default  
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00  
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000  
link/ether 00:0c:29:0d:ce:93 brd ff:ff:ff:ff:ff:ff  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;(2)查询网络设备的IP地址&lt;/p&gt;

&lt;p&gt;使用net-tools：
&lt;code class=&quot;highlighter-rouge&quot;&gt;root@astrol:~# ifconfig eth0&lt;/code&gt;
使用iproute2：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ip addr show dev eth0  
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000  
link/ether 00:0c:29:0d:ce:93 brd ff:ff:ff:ff:ff:ff  
inet 192.168.6.138/24 brd 192.168.6.255 scope global eth0  
valid_lft forever preferred_lft forever  
inet 192.168.6.139/24 brd 192.168.6.255 scope global secondary eth0:1  
valid_lft forever preferred_lft forever  
inet6 fe80::20c:29ff:fe0d:ce93/64 scope link  
valid_lft forever preferred_lft forever  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;当不指定网络接口时，ip addr其实是ip addr show的简略写法。&lt;/p&gt;

&lt;p&gt;（3）设置网络设备的IP地址&lt;/p&gt;

&lt;p&gt;使用net-tools：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~# ifconfig eth0:1 192.168.6.140  
root@astrol:~# ifconfig eth0:1 192.168.6.140 netmask 255.255.255.0  
root@astrol:~# ifconfig eth0:1 192.168.6.140 netmask 255.255.255.0 broadcast 192.168.6.255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用iproute2：
&lt;code class=&quot;highlighter-rouge&quot;&gt;root@astrol:~# ip addr add 192.168.6.140/24 brd + dev eth0:1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里使用的模版是：&lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr add ip_address/net_prefix brd + devinterface &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;net_prefix隐含指定了子网掩码，brd +表明是标准的广播地址。&lt;/p&gt;

&lt;p&gt;需要了解的一点是，通过ip addr可以非常容易地给一块网卡添加多个地址，ifconfig同样可以，是通过叫做“IP别名”的方式做到的。&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ip addr add 192.168.6.140/24 broadcast 192.168.6.255 dev eth0 
root@astrol:~ ip addr add 192.168.6.141/24 broadcast 192.168.6.255 dev eth0
root@astrol:~ ip addr add 192.168.6.142/24 broadcast 192.168.6.255 dev eth0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;（4）删除网络设备的IP地址&lt;/p&gt;

&lt;p&gt;使用net-tools：&lt;/p&gt;

&lt;p&gt;貌似没有什么好办法去做：ifconfig eth0 0  。&lt;/p&gt;

&lt;p&gt;就IP地址的移除而言，除了给接口分配全0地址外，net-tools没有提供任何合适的方法来移除网络接口的IPv4地址&lt;/p&gt;

&lt;p&gt;使用iproute2：&lt;/p&gt;

&lt;p&gt;模版：&lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr del ip_address/net_prefix dev interface&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~# ip -4 addr show dev eth0  
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000  
inet 192.168.6.138/24 brd 192.168.6.255 scope global eth0  
valid_lft forever preferred_lft forever  
inet 192.168.6.141/24 brd 192.168.6.255 scope global secondary eth0  
valid_lft forever preferred_lft forever  
root@astrol:~# ip addr del 192.168.6.141/24 dev eth0  
root@astrol:~# ip -4 addr show dev eth0  
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000  
inet 192.168.6.138/24 brd 192.168.6.255 scope global eth0  
valid_lft forever preferred_lft forever  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;此外，iproute2提供ip addr flush可以一次性删除一个网络设备的所有地址：
&lt;code class=&quot;highlighter-rouge&quot;&gt;root@astrol:~# ip addr flush dev eth0&lt;/code&gt;&lt;br /&gt;
默认的，这条命令会删除IPv4和IPv6的地址，如果想分别删除，可以通过分别指定-4和-6选项。&lt;/p&gt;

&lt;p&gt;（5）激活或者停用网络接口&lt;/p&gt;

&lt;p&gt;使用net-tools：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ifconfig eth0 up
root@astrol:~ fcofig eth0 dow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;在linux下还可以使用ifup和ifdown来达到同样的目的。&lt;/p&gt;

&lt;p&gt;使用iproute2：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ip link set eth0 up
root@astrol:~ ip link set eth0 down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;（6）设置或者改变网络接口的参数（属性）&lt;/p&gt;

&lt;p&gt;一个网络接口具体有哪些参数可以供我们去设置呢？输入ip link set eth0，然后按两次TAB键，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHk4pD.png&quot; alt=&quot;KHk4pD.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到其中的up和down就是用来激活或者停用某个网络接口的。例如，使能或者关闭eth0的多播功能：&lt;/p&gt;

&lt;p&gt;使用net-tools：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ifconfig eth0 multicast
root@astrol:~ ifconfig eth0 -multicast
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用iproute2：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ip link set eth0 multicast on
root@astrol:~ ip link set eth0 multicast off 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;通常，调整最大传输单元MTU用的比较多。&lt;/p&gt;

&lt;p&gt;使用net-tools：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ifconfig eth0 mtu 1400
root@astrol:~ ip link show eth0
2: eth0: &amp;lt;BROADCAST,UP,LOWER_UP&amp;gt; mtu 1400 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000  
link/ether 00:0c:29:0d:ce:93 brd ff:ff:ff:ff:ff:ff  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用iproute2：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ip link set eth0 mtu 1500
root@astrol:~ ip link show eth0  
2: eth0: &amp;lt;BROADCAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000  
link/ether 00:0c:29:0d:ce:93 brd ff:ff:ff:ff:ff:ff  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;改变网卡硬件地址，即MAC地址（注意，修改MAC地址前网卡必须先关闭）：&lt;/p&gt;

&lt;p&gt;使用net-tools：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ifconfig eth0 down
root@astrol:~ ifconfig eth0 hw ether 00:0c:29:0d:ce:95 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用iproute2：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@astrol:~ ip link set eth0 down
root@astrol:~ ip link set eth0 address 00:0c:29:0d:ce:95
&amp;gt;root@astrol:~ ip link set eth0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;类似的，需要先关闭网卡再设置的属性有name&lt;/p&gt;

&lt;p&gt;linux的ip命令和ifconfig类似，但前者功能更强大，并旨在取代后者。使用ip命令，只需一个命令，你就能很轻松地执行一些网络管理任务。ifconfig是net-tools中已被废弃使用的一个命令，许多年前就已经没有维护了。iproute2套件里提供了许多增强功能的命令，ip命令即是其中之一。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAuu9.png&quot; alt=&quot;KHAuu9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Net tools vs Iproute2&lt;/p&gt;

&lt;p&gt;要安装ip，请点击这里下载iproute2套装工具 。不过，大多数Linux发行版已经预装了iproute2工具。&lt;/p&gt;

&lt;h3 id=&quot;显示所有已连接的网络接口&quot;&gt;显示所有已连接的网络接口&lt;/h3&gt;

&lt;p&gt;下面的命令显示出所有可用网络接口的列表（无论接口是否激活）。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ifconfig -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip link show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAlAx.jpg&quot; alt=&quot;KHAlAx.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;激活或停用网络接口&quot;&gt;激活或停用网络接口&lt;/h3&gt;

&lt;p&gt;使用这些命令来激活或停用某个指定的网络接口。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ifconfig eth1 up
$ sudo ifconfig eth1 down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip link set down eth1
$ sudo ip link set up eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;为网络接口分配ipv4地址&quot;&gt;为网络接口分配IPv4地址&lt;/h3&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ifconfig eth1 10.0.0.1/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip addr add 10.0.0.1/24 dev eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以使用iproute2给同一个接口分配多个IP地址，ifconfig则无法这么做。使用ifconfig的变通方案是使用IP别名。&lt;/p&gt;

&lt;p&gt;使用net-tools配置多IP：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ifconfig eth0:1 192.168.10.10 netmask 255.255.255.0 up
$ sudo ifconfig eth0:2 192.168.10.15 netmask 255.255.255.0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用iproute2配置多IP:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip addr add 10.0.0.1/24 broadcast 10.0.0.255 dev eth1
$ sudo ip addr add 10.0.0.2/24 broadcast 10.0.0.255 dev eth1
$ sudo ip addr add 10.0.0.3/24 broadcast 10.0.0.255 dev eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看eth0的IP地址
&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo ip addr list dev eth0&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;移除网络接口的ipv4地址&quot;&gt;移除网络接口的IPv4地址&lt;/h3&gt;

&lt;p&gt;就IP地址的移除而言，除了给接口分配全0地址外，net-tools没有提供任何合适的方法来移除网络接口的IPv4地址。而 iproute2则能很好地完成。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ifconfig eth1 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip addr del 10.0.0.1/24 dev eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;显示网络接口的ipv4地址&quot;&gt;显示网络接口的IPv4地址&lt;/h3&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ifconfig eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip addr show dev eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是网卡绑定了多IP的话，iproute2能显示所有的地址，而net-tools只能显示一个&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHA1N6.jpg&quot; alt=&quot;KHA1N6.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;为网络接口分配ipv6地址&quot;&gt;为网络接口分配IPv6地址&lt;/h3&gt;

&lt;p&gt;使用这些命令为网络接口添加IPv6地址。net-tools和iproute2都允许用户为一个接口添加多个IPv6地址。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ifconfig eth1 inet6 add 2002:0db5:0:f102::1/64
$ sudo ifconfig eth1 inet6 add 2003:0db5:0:f102::1/64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip -6 addr add 2002:0db5:0:f102::1/64 dev eth1
$ sudo ip -6 addr add 2003:0db5:0:f102::1/64 dev eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;显示网络接口的ipv6地址&quot;&gt;显示网络接口的IPv6地址&lt;/h3&gt;

&lt;p&gt;net-tools和iproute2都可以显示出所有已分配的IPv6地址。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ifconfig eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip -6 addr show dev eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAMH1.jpg&quot; alt=&quot;KHAMH1.jpg&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;移除网络设备的ipv6地址&quot;&gt;移除网络设备的IPv6地址&lt;/h3&gt;

&lt;p&gt;使用这些命令可移除接口中不必要的IPv6地址。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo ifconfig eth1 inet6 del 2002:0db5:0:f102::1/64&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo ip -6 addr del 2002:0db5:0:f102::1/64 dev eth1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;改变网络接口的MAC地址&lt;/p&gt;

&lt;p&gt;使用下面的命令可篡改网络接口的MAC地址，请注意在更改MAC地址前，需要停用接口。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo ifconfig eth1 hw ether 08:00:27:75:2a:66&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo ip link set dev eth1 address 08:00:27:75:2a:67&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看ip路由表&quot;&gt;查看IP路由表&lt;/h3&gt;

&lt;p&gt;net-tools中有两个选择来显示内核的IP路由表：route和netstat。在iproute2中，使用命令ip route。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$route -n
$netstat -rn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip route show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAJ3D.jpg&quot; alt=&quot;KHAJ3D.jpg&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加和修改默认路由&quot;&gt;添加和修改默认路由&lt;/h3&gt;

&lt;p&gt;这里的命令用来添加或修改内核IP路由表中的默认路由规则。请注意在net-tools中可通过添加新的默认路由、删除旧的默认路由来实现修改默认路由。在iproute2使用ip route命令来代替。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo route add default gw 192.168.1.2 eth0
$ sudo route del default gw 192.168.1.1 eth0 使用iproute2:

$ sudo ip route add default via 192.168.1.2 dev eth0
$ sudo ip route replace default via 192.168.1.2 dev eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加和移除静态路由&quot;&gt;添加和移除静态路由&lt;/h3&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo route add default gw 192.168.1.2 eth0
$ sudo route del default gw 192.168.1.1 eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip route add default via 192.168.1.2 dev eth0
$ sudo ip route replace default via 192.168.1.2 dev eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看套接字统计信息&quot;&gt;查看套接字统计信息&lt;/h3&gt;

&lt;p&gt;这里的命令用来查看套接字统计信息（比如活跃或监听状态的TCP/UDP套接字）。&lt;/p&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ netstat
$ netstat -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ss
$ ss -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHA34K.jpg&quot; alt=&quot;KHA34K.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看arp表&quot;&gt;查看ARP表&lt;/h3&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ arp -an
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip neigh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAYge.jpg&quot; alt=&quot;KHAYge.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;添加或删除静态arp项&quot;&gt;添加或删除静态ARP项&lt;/h3&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo arp -s 192.168.1.100 00:0c:29:c0:5a:ef
$ sudo arp -d 192.168.1.100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip neigh add 192.168.1.100 lladdr 00:0c:29:c0:5a:ef dev eth0
$ sudo ip neigh del 192.168.1.100 dev eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加删除或查看多播地址&quot;&gt;添加、删除或查看多播地址&lt;/h3&gt;

&lt;p&gt;使用net-tools:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ipmaddr add 33:44:00:00:00:01 dev eth0
$ sudo ipmaddr del 33:44:00:00:00:01 dev eth0
$ ipmaddr show dev eth0
$ netstat -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用iproute2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip maddr add 33:44:00:00:00:01 dev eth0
$ sudo ip maddr del 33:44:00:00:00:01 dev eth0
$ ip maddr list dev eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;iproute2中ip命令&quot;&gt;iproute2中ip命令&lt;/h2&gt;
&lt;p&gt;你也可以使用git命令来下载最新源代码来编译：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/shemminger/iproute2.git&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;设置和删除ip地址&quot;&gt;设置和删除Ip地址&lt;/h3&gt;

&lt;p&gt;要给你的机器设置一个IP地址，可以使用下列ip命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip addr add 192.168.0.193/24 dev wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请注意IP地址要有一个后缀，比如/24。这种用法用于在无类域内路由选择（CIDR）中来显示所用的子网掩码。在这个例子中，子网掩码是255.255.255.0。&lt;/p&gt;

&lt;p&gt;在你按照上述方式设置好IP地址后，需要查看是否已经生效。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip addr show wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你也可以使用相同的方式来删除IP地址，只需用del代替add。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip addr del 192.168.0.193/24 dev wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;列出路由表条目&quot;&gt;列出路由表条目&lt;/h3&gt;

&lt;p&gt;ip命令的路由对象的参数还可以帮助你查看网络中的路由数据，并设置你的路由表。第一个条目是默认的路由条目，你可以随意改动它。&lt;/p&gt;

&lt;p&gt;在这个例子中，有几个路由条目。这个结果显示有几个设备通过不同的网络接口连接起来。它们包括WIFI、以太网和一个点对点连接。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip route show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假设现在你有一个IP地址，你需要知道路由包从哪里来。可以使用下面的路由选项（译注：列出了路由所使用的接口等）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip route get 10.42.0.47
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更改默认路由&lt;/p&gt;

&lt;p&gt;要更改默认路由，使用下面ip命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip route add default via 192.168.0.196
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;显示网络统计数据&quot;&gt;显示网络统计数据&lt;/h3&gt;

&lt;p&gt;使用ip命令还可以显示不同网络接口的统计数据。&lt;/p&gt;

&lt;p&gt;当你需要获取一个特定网络接口的信息时，在网络接口名字后面添加选项ls即可。使用多个选项-s会给你这个特定接口更详细的信息。特别是在排除网络连接故障时，这会非常有用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip -s -s link ls p2p1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;arp条目&quot;&gt;ARP条目&lt;/h3&gt;

&lt;p&gt;地址解析协议（ARP）用于将一个IP地址转换成它对应的物理地址，也就是通常所说的MAC地址。使用ip命令的neigh或者neighbour选项，你可以查看接入你所在的局域网的设备的MAC地址。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip neighbour
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;监控netlink消息&quot;&gt;监控netlink消息&lt;/h3&gt;

&lt;p&gt;也可以使用ip命令查看netlink消息。monitor选项允许你查看网络设备的状态。比如，所在局域网的一台电脑根据它的状态可以被分类成REACHABLE或者STALE。使用下面的命令：&lt;/p&gt;

&lt;p&gt;$ ip monitor all&lt;/p&gt;

&lt;h3 id=&quot;激活和停止网络接口&quot;&gt;激活和停止网络接口&lt;/h3&gt;

&lt;p&gt;你可以使用ip命令的up和down选项来激某个特定的接口，就像ifconfig的用法一样。&lt;/p&gt;

&lt;p&gt;在这个例子中，当ppp0接口被激活和在它被停止和再次激活之后，你可以看到相应的路由表条目。这个接口可能是wlan0或者eth0。将ppp0更改为你可用的任意接口即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ip link set ppp0 down
 
$ sudo ip link set ppp0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取帮助&quot;&gt;获取帮助&lt;/h3&gt;

&lt;p&gt;当你陷入困境，不知道某一个特定的选项怎么用的时候，你可以使用help选项。man页面并不会提供许多关于如何使用ip选项的信息，因此这里就是获取帮助的地方。&lt;/p&gt;

&lt;p&gt;比如，想知道关于route选项更多的信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ip route help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;小结：对于网络管理员们和所有的Linux使用者们，ip命令是必备工具。是时候抛弃ifconfig命令了，特别是当你写脚本时。&lt;/p&gt;

&lt;h2 id=&quot;net-tools-中-ifconfig-详细解释&quot;&gt;net-tools 中 ifconfig 详细解释&lt;/h2&gt;
&lt;p&gt;许多windows非常熟悉ipconfig命令行工具，它被用来获取网络接口配置信息并对此进行修改。Linux系统拥有一个类似的工具，也就是ifconfig(interfaces config)。通常需要以root身份登录或使用sudo以便在Linux机器上使用ifconfig工具。依赖于ifconfig命令中使用一些选项属性，ifconfig工具不仅可以被用来简单地获取网络接口配置信息，还可以修改这些配置。&lt;/p&gt;

&lt;p&gt;1．命令格式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig [网络设备] [参数]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2．命令功能：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3．命令参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;up 启动指定网络设备/网卡。

down 关闭指定网络设备/网卡。该参数可以有效地阻止通过指定接口的IP信息流，如果想永久地关闭一个接口，我们还需要从核心路由表中将该接口的路由信息全部删除。

arp 设置指定网卡是否支持ARP协议。

-promisc 设置是否支持网卡的promiscuous模式，如果选择此参数，网卡将接收网络中发给它所有的数据包

-allmulti 设置是否支持多播模式，如果选择此参数，网卡将接收网络中所有的多播数据包

-a 显示全部接口信息

-s 显示摘要信息（类似于 netstat -i）

add 给指定网卡配置IPv6地址

del 删除指定网卡的IPv6地址

&amp;lt;硬件地址&amp;gt; 配置网卡最大的传输单元

mtu&amp;lt;字节数&amp;gt; 设置网卡的最大传输单元 (bytes)

netmask&amp;lt;子网掩码&amp;gt; 设置网卡的子网掩码。掩码可以是有前缀0x的32位十六进制数，也可以是用点分开的4个十进制数。如果不打算将网络分成子网，可以不管这一选项；如果要使用子网，那么请记住，网络中每一个系统必须有相同子网掩码。

tunel 建立隧道

dstaddr 设定一个远端地址，建立点对点通信
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;broadcast&lt;地址&gt; 为指定网卡设置广播协议&lt;/地址&gt;&lt;/p&gt;

    &lt;p&gt;-pointtopoint&lt;地址&gt; 为网卡设置点对点通讯协议&lt;/地址&gt;&lt;/p&gt;

    &lt;p&gt;multicast 为网卡设置组播标志&lt;/p&gt;

    &lt;p&gt;address 为网卡设置IPv4地址&lt;/p&gt;

    &lt;p&gt;txqueuelen&lt;长度&gt; 为网卡设置传输列队的长度&lt;/长度&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4．使用实例：&lt;/p&gt;

&lt;p&gt;实例1：显示网络设备信息（激活状态的）&lt;/p&gt;

&lt;p&gt;命令：ifconfig&lt;/p&gt;

&lt;p&gt;实例2：启动关闭指定网卡&lt;/p&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 up
ifconfig eth0 down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实例3：为网卡配置和删除IPv6地址&lt;/p&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 add 33ffe:3240:800:1005::2/64
ifconfig eth0 del 33ffe:3240:800:1005::2/64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实例4：用ifconfig修改MAC地址&lt;/p&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实例5：配置IP地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost ~]# ifconfig eth0 192.168.120.56 
[root@localhost ~]# ifconfig eth0 192.168.120.56 netmask 255.255.255.0 
[root@localhost ~]# ifconfig eth0 192.168.120.56 netmask 255.255.255.0 broadcast 192.168.120.255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 192.168.120.56 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;给eth0网卡配置IP地：192.168.120.56&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 192.168.120.56 netmask 255.255.255.0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;给eth0网卡配置IP地址：192.168.120.56 ，并加上子掩码：255.255.255.0&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 192.168.120.56 netmask 255.255.255.0 broadcast 192.168.120.255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;/给eth0网卡配置IP地址：192.168.120.56，加上子掩码：255.255.255.0，加上个广播地址： 192.168.120.255&lt;/p&gt;

&lt;p&gt;实例6：启用和关闭ARP协议&lt;/p&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 arp
ifconfig eth0 -arp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost ~]# ifconfig eth0 arp 
[root@localhost ~]# ifconfig eth0 -arp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;ifconfig eth0 arp 开启网卡eth0 的arp协议；&lt;/p&gt;

&lt;p&gt;ifconfig eth0 -arp 关闭网卡eth0 的arp协议；&lt;/p&gt;

&lt;p&gt;实例7：设置最大传输单元&lt;/p&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 mtu 1500

[root@localhost ~]# ifconfig   #处于激活状态的网络接口

[root@localhost ~]# ifconfig -a  #所有配置的网络接口，不论其是否激活

[root@localhost ~]# ifconfig eth0  #显示eth0的网卡信息

[root@localhost ~]# ifconfig eth0 down  #关闭eth0网卡

[root@localhost ~]# ifconfig eth0 up    #开启eth0网卡

[root@localhost ~]# ifconfig eth0 add 33ffe:3240:800:1005::2/ 64  #为网卡添加IPv6地址

[root@localhost ~]# ifconfig eth0 del 33ffe:3240:800:1005::2/ 64 #为网卡删除IPv6地址

[root@localhost ~]# ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE  #修改MAC地址

[root@localhost ~]# ifconfig eth0 192.168.1.56  #给eth0网卡配置IP地址

[root@localhost ~]# ifconfig eth0 192.168.1.56 netmask 255.255.255.0  #给eth0网卡配置IP地址,并加上子掩码

[root@localhost ~]# ifconfig eth0 192.168.1.56 netmask 255.255.255.0 broadcast 192.168.1.255   #给eth0网卡配置IP地址,加上子掩码,加上个广播地址

[root@localhost ~]# ifconfig eth0 mtu 1500  #设置能通过的最大数据包大小为 1500 bytes

[root@localhost ~]# ifconfig eth0 arp   #开启arp功能

[root@localhost ~]# ifconfig eth0 -arp  #关闭arp功能
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;net-tools中ifconfig-和-route-与-iproute2-中-ip&quot;&gt;net-tools中ifconfig 和 route 与 iproute2 中 ip&lt;/h2&gt;
&lt;p&gt;一、作为一个linux的疯狂热爱者，我们首先需要掌握的就是在linux系统下怎么配置IP、路由和主机名基本的linux网络配置，当然如果要我们接入互联网基本的IP地址配置还是不够的，访问网络的话我们需要配置我们的域名解析服务器DNS，下面作为菜鸟的我就把我们平常用到的基本网络配置命令来和大家介绍一下，写的不好的话，还请见谅~~~~~&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  本篇主要介绍linux下网络查看、配置的基本命令：ifconfig、ip、route，然后捎带介绍下DNS、主机名等信息的配置！
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;二、我们在配置网络之前，首先我们来认识一下linux系统下网络接口的类型和命名规则以及网络地址的类型&lt;/p&gt;

&lt;p&gt;1、网络接口类型：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lo：本地回环接口

eth[0-9]：以太网接口

pppx：点对点的连接
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然我们平常用到的也就是lo和以太网接口这两种类型回环环接口lo只是我们用在系统内部进行回环测试的，至于eth的以太网接口就是我们经常用来连接网线的那个物理接口了。&lt;/p&gt;

&lt;p&gt;2、以太网网卡的命名规则：&lt;/p&gt;

&lt;p&gt;在不同的系统之下其命名规则是不尽相同的，我们这就以RedHat 5-32bit的系统为例：&lt;/p&gt;

&lt;p&gt;REHL 5-32bit：以太网网卡命名规则的定义文件为/etc/modprod.conf&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkI6H.png&quot; alt=&quot;KHkI6H.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图像 120&lt;/p&gt;

&lt;p&gt;3、网络地址类型：&lt;/p&gt;

&lt;p&gt;暂时性网络地址：利用ifconfig等命令配置的网络信息，会立即生效，但重启网络服务或系统会失效&lt;/p&gt;

&lt;p&gt;永久性的网络地址：通过修改系统内的网络配置文件进行的修改，不会立即生效，需要重启网络服务或者系统会生效，并且会永久性的生效。&lt;/p&gt;

&lt;p&gt;三、网络IP地址配置命令之ifconfig&lt;/p&gt;

&lt;p&gt;1、ifconfig：查看活动的网卡信息，仅限于活动的网卡&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    例如先查看本地的网卡信息如下—ifconfig ![KHkoXd.png](https://s2.ax1x.com/2019/11/01/KHkoXd.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;图像 121&lt;/p&gt;

&lt;p&gt;为了说明ifconfig查看的只是活动的网卡信息，我们下面把lo网卡down掉，在查看&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkH0I.png&quot; alt=&quot;KHkH0I.png&quot; /&gt;
图像 122&lt;/p&gt;

&lt;p&gt;2、ifconfig的相关子命令&lt;/p&gt;

&lt;p&gt;ifconfig  eth[0-9]：后面跟某个网卡则可以直接查看某个网卡的信息，如只查看eth0的信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAec4.png&quot; alt=&quot;KHAec4.png&quot; /&gt;
图像 123&lt;/p&gt;

&lt;p&gt;ifconfig –a ：则是查看所有的网卡信息，包括活动或非活动的网卡信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkLAP.png&quot; alt=&quot;KHkLAP.png&quot; /&gt;
图像 124&lt;/p&gt;

&lt;p&gt;下面利用ifconfig来配置网卡的IP地址，当然这个地址是临时的地址，一旦重启网络服务或者重启网络系统就会失效的！！&lt;/p&gt;

&lt;p&gt;格式：ifconfig  ethx IP/MASK：配置某个网卡的ip地址&lt;/p&gt;

&lt;p&gt;例如：设置eth0的IP地址为172.16.35.1/16,则就可以在命令行下直接键入：ifconfig eth0 172.16.36.5/16&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkb7t.png&quot; alt=&quot;KHkb7t.png&quot; /&gt;
图像 126&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkOtf.png&quot; alt=&quot;KHkOtf.png&quot; /&gt;
图像 127&lt;/p&gt;

&lt;p&gt;我们下面重启一下网络服务，此配置就会失效，然后恢复为原来的IP地址的，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkzcQ.png&quot; alt=&quot;KHkzcQ.png&quot; /&gt;
图像 128&lt;/p&gt;

&lt;p&gt;3、网络服务的管理命令，上面已经提到过一个重启网络服务的命令了，那么我们的网络服务控制命令都有哪些那？？？就是很简单，就是start，stop，restart，status这几个命令而已。&lt;/p&gt;

&lt;p&gt;用法格式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/network {start | stop | restart | status} 或者service network {start | stop | restart | status}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;四、永久性IP地址配置&lt;/p&gt;

&lt;p&gt;通过上面我们了解了利用ifconfig来配置临时的网络IP地址了，当然这还不能满足我们的需求，我们不能每次使用电脑的时候都配置IP地址啊~那太麻烦，所以我们需要把IP地址配置为固定的IP或者通过DHCP服务来回去，这样的配置就需要修改系统的网络配置文件了，我们REHL5上的网络配置文为/etc/sysconfig/network-scripts/ifcfg-eth[0-9],下面我们就来看看怎么定义这个文件内的内容。&lt;/p&gt;

&lt;p&gt;其配置方式有两种：DHCP和固定IP&lt;/p&gt;

&lt;p&gt;DHCP的设置比较简单，只需指定BOOTPROTOL类型为ＤＨＣＰ即可，当然、配置之前让我们先来了解下其配置文件内定义的内容都是有哪些？详解如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkv9S.png&quot; alt=&quot;KHkv9S.png&quot; /&gt;
图像 129&lt;/p&gt;

&lt;p&gt;当然，我们上图是基于固定IP的设置，那么基于DHCP的呢？DHCP的更加简单，配置参数如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEVICE=eth0 
BOOTPROTO=DHCP 
ONBOOT=YES 
HWADDR=......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;五、以上内容我们了解了在linux系统上通过ifconfig命令和配置文件来为linux系统配置临时IP地址和永久性的IP的相关操作，那么我们下面来看下关于系统路由的设定，路由相关信息的设定命令是route&lt;/p&gt;

&lt;p&gt;1、route：直接可以查看我们系统上的路由信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; route –n ：以数字的形式显示路由信息
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHASXj.png&quot; alt=&quot;KHASXj.png&quot; /&gt;
图像 130&lt;/p&gt;

&lt;p&gt;2、route命令的子选项&lt;/p&gt;

&lt;p&gt;添加路由&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route  add -host：添加主机路由

route  add -net：添加网络路由

route  add -net  0.0.0.0：添加默认路由
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;格式：&lt;code class=&quot;highlighter-rouge&quot;&gt;route add -net|host DEST gw NEXTHOP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如，添加一条路由，让主机通过172.16.7.3访问192.168.0.0/24网段&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route add –net 192.168.0.0/24 gw 172.16.7.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHkx1g.png&quot; alt=&quot;KHkx1g.png&quot; /&gt;
图像 131&lt;/p&gt;

&lt;p&gt;删除路由&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route del -host：删除主机路由

route del –net：删除网络路由
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例如，删除刚才加的那条路由信息：&lt;code class=&quot;highlighter-rouge&quot;&gt;route del –net 192.168.0.0、24&lt;/code&gt; 即可实现&lt;/p&gt;

&lt;p&gt;3、以上利用route命令增加的配置在重启网络服务或者系统的时候，所有的配置都会失效，这只是临时的配置而已，要想使我们配置的路由信息永久性的有效，我们需要把配置信息定义在配置文件内：&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/sysconfig/network-scripts/route-ethx&lt;/code&gt;，ethx表示对应的通过那个网卡路由&lt;/p&gt;

&lt;p&gt;配置格式：&lt;/p&gt;

&lt;p&gt;格式1：&lt;code class=&quot;highlighter-rouge&quot;&gt;DEST（目的） via NEXTTOP（下一跳）&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;格式2：`ADDRESS0=网络地址（目的地址）、NETMASK0=子网掩码（目的网络）、&lt;/p&gt;

&lt;p&gt;GATEWAY0=网关（通过那个网卡的网关）、ADDRESS1=、NETMASK1=……`等等，可以设置条路由。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAmjJ.png&quot; alt=&quot;KHAmjJ.png&quot; /&gt;
图像 132&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHA9ns.png&quot; alt=&quot;KHA9ns.png&quot; /&gt;
图像 133&lt;/p&gt;

&lt;p&gt;以上的配置不会立即生效，但是重启网络服务或者系统就会生效，并且是永久有效。&lt;/p&gt;

&lt;p&gt;六、网络配置的另外一个功能强大的命令：IP&lt;/p&gt;

&lt;p&gt;IP命令是iproute2软件包内的一个命令，功能比ifconfig更强大，可以对系统配置IP和路由信息。&lt;/p&gt;

&lt;p&gt;1、ip link：配置网络接口属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link show：查看所有网络接口属性信息

ip -s link show：查看所有统计信息

ip link set ethX {up|down|arp {on|off}}:设置网络接口的工作属性
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHACBn.png&quot; alt=&quot;KHACBn.png&quot; /&gt;
图像 134&lt;/p&gt;

&lt;p&gt;2、ip addr：配置网络地址&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr show&lt;/code&gt;：查看网络信息，看到的信息和ip link show差不多，都比较简要&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr add IP dev ethX&lt;/code&gt;：配置IP地址（此命令配置的网卡信息利用ifconfig查看不到，需要利用ip addr show查看）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAP7q.png&quot; alt=&quot;KHAP7q.png&quot; /&gt;
图像 135&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr add IP dev ethx label ethX:X&lt;/code&gt;：配置子Ip并对其加别名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHKv9I.png&quot; alt=&quot;KHKv9I.png&quot; /&gt;
 图像 139&lt;/p&gt;

&lt;p&gt;删除已经配置的IP地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip addr del  IPADDR dev STRING
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAkNV.png&quot; alt=&quot;KHAkNV.png&quot; /&gt;
图像 140&lt;/p&gt;

&lt;p&gt;3、我们说过IP命令是个强大的命令，那是因为我们不仅仅能利用IP命令来创建IP地址相关的配置，还可以利用IP命令来实现对系统上路由信息的设置，其主要命令如下：&lt;/p&gt;

&lt;p&gt;ip route：路由信息&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ip route change|replace&lt;/code&gt; :修改路由信息&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ip route add to 目的网段 dev ethx via IP(下一跳IP)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAAhT.png&quot; alt=&quot;KHAAhT.png&quot; /&gt;
图像 143&lt;/p&gt;

&lt;p&gt;上面就是IP命令的用法，当然这些命令行下的操作只是暂时性的，一旦重启网络服务或系统这些配置都将会失效，如果想使其永久生效，就需要利用前的相关方法在配置文件内进行设定了。&lt;/p&gt;

&lt;p&gt;七、IP地址的配置我们已经在前面介绍过了，这里不在重述，下面介绍下关于eth0:0这个主机网络别名的配置文件的配置方法&lt;/p&gt;

&lt;p&gt;⑴、命令配置法：ifconfig和ip&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ifconfig ethx:x IP/netmask 
 
ip addr add IP dev ethx label ethX:X 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;利用命令配置的只是暂时的IP地址，如果重启网络服务和系统都会失效的。&lt;/p&gt;

&lt;p&gt;⑵、配置文件配置法：&lt;/p&gt;

&lt;p&gt;修改/etc/sysconfig/network-scripts/ifcfg-ethx:x&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEVICE=ethx:x 
BOOTPROTO=static  
IPIPADDR=   IP地址 
NETMASK=  子网掩码 
GATEWAY=  网关 
ONBOOT=YES   是否开机启用 
HWADDR=...... MAC  非主要地址不能用DHCP服务获得，必须为静止的。 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;八、 DNS配置文件：&lt;/p&gt;

&lt;p&gt;⑴、DNS配置文件位置：/etc/resolv.conf&lt;/p&gt;

&lt;p&gt;⑵、DNS配置格式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nameserver DNS_IP1 
 
nameserver DNS_IP2 
 
指定本地解析： 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;/etc/hosts下添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;目标主机IP        主机名       
 
fg：172.16.36.1  www.chris.com  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DNS解析过程–&amp;gt;/etc/hosts–&amp;gt;DNS 服务器&lt;/p&gt;

&lt;p&gt;九、主机名配置文件：&lt;/p&gt;

&lt;p&gt;⑴、配置文件位置： /etc/sysconfig/network&lt;/p&gt;

&lt;p&gt;⑵、配置格式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HOSTNAME=名称 
NETWORKING={yes|no}：是否开启网络功能 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/01/KHAZ3F.png&quot; alt=&quot;KHAZ3F.png&quot; /&gt;
  图像 145&lt;/p&gt;

&lt;h2 id=&quot;linux策略性路由应用及分析iproute2&quot;&gt;Linux策略性路由应用及分析(iproute2)&lt;/h2&gt;
&lt;p&gt;http://blog.chinaunix.net/uid-738429-id-2057370.html&lt;/p&gt;
&lt;h3 id=&quot;linux策略性路由应用及分析iproute2-1&quot;&gt;Linux策略性路由应用及分析(iproute2)&lt;/h3&gt;
&lt;h3 id=&quot;策略性路由&quot;&gt;策略性路由&lt;/h3&gt;

&lt;p&gt;策略性是指对于IP包的路由是以网络管理员根据需要定下的一些策略为主要依据进行路由的。例如我们可以有这样的策略：“所有来直自网A的包，选择X路径；其他选择Y路径”，或者是“所有TOS为A的包选择路径F；其他选者路径K”。
Cisco 的网络操作系统 (Cisco IOS) 从11.0开始就采用新的策略性路由机制。而Linux是在内核2.1开始采用策略性路由机制的。策略性路由机制与传统的路由算法相比主要是引入了多路由表以及规则的概念。&lt;/p&gt;
&lt;h3 id=&quot;多路由表multiple-routing-tables&quot;&gt;多路由表（multiple Routing Tables）&lt;/h3&gt;

&lt;p&gt;传统的路由算法是仅使用一张路由表的。但是在有些情形底下，我们是需要使用多路由表的。例如一个子网通过一个路由器与外界相连，路由器与外界有两条线路相连，其中一条的速度比较快，一条的速度比较慢。对于子网内的大多数用户来说对速度并没有特殊的要求，所以可以让他们用比较慢的路由；但是子网内有一些特殊的用户却是对速度的要求比较苛刻，所以他们需要使用速度比较快的路由。如果使用一张路由表上述要求是无法实现的，而如果根据源地址或其它参数，对不同的用户使用不同的路由表，这样就可以大大提高路由器的性能。
规则（rule）&lt;/p&gt;

&lt;p&gt;规则是策略性的关键性的新的概念。我们可以用自然语言这样描述规则，例如我门可以指定这样的规则：
	规则一：“所有来自192.16.152.24的IP包，使用路由表10， 本规则的优先级别是1500”
	规则二：“所有的包，使用路由表253，本规则的优先级别是32767”
我们可以看到，规则包含3个要素：&lt;/p&gt;

&lt;p&gt;什么样的包，将应用本规则（所谓的SELECTOR，可能是filter更能反映其作用）；&lt;/p&gt;

&lt;p&gt;符合本规则的包将对其采取什么动作（ACTION），例如用那个表；&lt;/p&gt;

&lt;p&gt;本规则的优先级别。优先级别越高的规则越先匹配（数值越小优先级别越高）。&lt;/p&gt;

&lt;h3 id=&quot;策略性路由的配置方法&quot;&gt;策略性路由的配置方法&lt;/h3&gt;

&lt;p&gt;传统的linux下配置路由的工具是route，而实现策略性路由配置的工具是iproute2工具包。这个软件包是由Alexey Kuznetsov开发的，软件包所在的主要网址为ftp://ftp.inr.ac.ru/ip-routing/。&lt;/p&gt;

&lt;p&gt;这里简单介绍策略性路由的配置方法，以便能更好理解第二部分的内容。详细的使用方法请参考Alexey Kuznetsov写的 ip-cfref文档。策略性路由的配置主要包括接口地址的配置、路由的配置、规则的配置。&lt;/p&gt;

&lt;p&gt;接口地址的配置IP Addr&lt;/p&gt;

&lt;p&gt;对于接口的配置可以用下面的命令进行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: ip addr [ add | del ] IFADDR dev STRING
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router&amp;gt;# ip addr add 192.168.0.1/24 broadcast 192.168.0.255 label eth0 dev eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面表示，给接口eth0赋予地址192.168.0.1 掩码是255.255.255.0(24代表掩码中1的个数)，广播地址是192.168.0.255
路由的配置IP Route&lt;/p&gt;

&lt;p&gt;Linux最多可以支持255张路由表，其中有3张表是内置的：&lt;/p&gt;

&lt;p&gt;表255 本地路由表（Local table） 本地接口地址，广播地址，已及NAT地址都放在这个表。该路由表由系统自动维护，管理员不能直接修改。&lt;/p&gt;

&lt;p&gt;表254 主路由表（Main table） 如果没有指明路由所属的表，所有的路由都默认都放在这个表里，一般来说，旧的路由工具（如route）所添加的路由都会加到这个表。一般是普通的路由。&lt;/p&gt;

&lt;p&gt;表253 默认路由表 （Default table） 一般来说默认的路由都放在这张表，但是如果特别指明放的也可以是所有的网关路由。&lt;/p&gt;

&lt;p&gt;表 0 保留&lt;/p&gt;

&lt;p&gt;路由配置命令的格式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: ip route list SELECTOR
ip route { change | del | add | append | replace | monitor } ROUTE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果想查看路由表的内容，可以通过命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip route list table table_number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于路由的操作包括change、del、add 、append 、replace 、 monitor这些。例如添加路由可以用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router&amp;gt;# ip route add 0/0 via 192.168.0.4 table main
router&amp;gt;# ip route add 192.168.3.0/24 via 192.168.0.3 table 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一条命令是向主路由表（main table）即表254添加一条路由，路由的内容是设置192.168.0.4成为网关。&lt;/p&gt;

&lt;p&gt;第二条命令代表向路由表1添加一条路由，子网192.168.3.0（子网掩码是255.255.255.0）的网关是192.168.0.3。&lt;/p&gt;

&lt;p&gt;在多路由表的路由体系里，所有的路由的操作，例如网路由表添加路由，或者在路由表里寻找特定的路由，需要指明要操作的路由表，所有没有指明路由表，默认是对主路由表（表254）进行操作。而在单表体系里，路由的操作是不用指明路由表的。&lt;/p&gt;

&lt;h3 id=&quot;规则的配置ip-rule&quot;&gt;规则的配置IP Rule&lt;/h3&gt;

&lt;p&gt;在Linux里，总共可以定义 个优先级的规则，一个优先级别只能有一条规则，即理论上总共可以有 条规则。其中有3个规则是默认的。命令用法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: ip rule [ list | add | del ] SELECTOR ACTION
SELECTOR := [ from PREFIX ] [ to PREFIX ] [ tos TOS ]
[ dev STRING ] [ pref NUMBER ]
ACTION := [ table TABLE_ID ] [ nat ADDRESS ]
[ prohibit | reject | unreachable ]
[ flowid CLASSID ]
TABLE_ID := [ local | main | default | new | NUMBER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先我们可以看看路由表默认的所有规则：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@netmonster# ip rule list
0: from all lookup local
32766: from all lookup main
32767: from all lookup default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;规则0，它是优先级别最高的规则，规则规定，所有的包，都必须首先使用local表（254）进行路由。本规则不能被更改和删除。&lt;/p&gt;

&lt;p&gt;规则32766，规定所有的包，使用表main进行路由。本规则可以被更改和删除。&lt;/p&gt;

&lt;p&gt;规则32767，规定所有的包，使用表default进行路由。本规则可以被更改和删除。&lt;/p&gt;

&lt;p&gt;在默认情况下进行路由时，首先会根据规则0在本地路由表里寻找路由，如果目的地址是本网络，或是广播地址的话，在这里就可以找到合适的路由；如果路由失败，就会匹配下一个不空的规则，在这里只有32766规则，在这里将会在主路由表里寻找路由;如果失败，就会匹配32767规则，即寻找默认路由表。如果失败，路由将失败。重这里可以看出，策略性路由是往前兼容的。&lt;/p&gt;

&lt;p&gt;还可以添加规则：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router&amp;gt;# ip rule add [from 0/0] table 1 pref 32800
router &amp;gt;#ip rule add from 192.168.3.112/32 [tos 0x10] table 2 pref 1500 prohibit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一条命令将向规则链增加一条规则，规则匹配的对象是所有的数据包，动作是选用路由表1的路由，这条规则的优先级是32800。&lt;/p&gt;

&lt;p&gt;第二条命令将向规则链增加一条规则，规则匹配的对象是IP为192.168.3.112，tos等于0x10的包，使用路由表2，这条规则的优先级是1500，动作是prohibit。添加以后，我们可以看看系统规则的变化。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router&amp;gt;# ip rule
0: from all lookup local
1500 from 192.168.3.112/32 [tos 0x10] lookup 2
32766: from all lookup main
32767: from all lookup default
32800: from all lookup 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的规则是以源地址为关键字，作为是否匹配的依据的。除了源地址外，还可以用以下的信息：
	From – 源地址
	To – 目的地址（这里是选择规则时使用，查找路由表时也使用）
	Tos – IP包头的TOS（type of sevice）域
	Dev – 物理接口
	Fwmark – 防火墙参数&lt;/p&gt;

&lt;p&gt;采取的动作除了指定表，还可以指定下面的动作：
	Table 指明所使用的表
	Nat 透明网关
	Action prohibit 丢弃该包，并发送 COMM.ADM.PROHIITED的ICMP信息
	Reject 单纯丢弃该包
	Unreachable丢弃该包， 并发送 NET UNREACHABLE的ICMP信息&lt;/p&gt;

&lt;h3 id=&quot;策略性路由的应用&quot;&gt;策略性路由的应用&lt;/h3&gt;

&lt;h3 id=&quot;基于源地址选路-source-sensitive-routing&quot;&gt;基于源地址选路（ Source-Sensitive Routing）&lt;/h3&gt;

&lt;p&gt;如果一个网络通过两条线路接入互联网，一条是比较快的ADSL，另外一条是比较慢的普通的调制解调器。这样的话，网络管理员既可以提供无差别的路由服务，也可以根据源地址的不同，使一些特定的地址使用较快的线路，而普通用户则使用较慢的线路，即基于源址的选路。&lt;/p&gt;

&lt;p&gt;根据服务级别选路（Quality of Service）&lt;/p&gt;

&lt;p&gt;网络管理员可以根据IP报头的服务级别域，对于不同的服务要求可以分别对待对于传送速率、吞吐量以及可靠性的有不同要求的数据报根据网络的状况进行不同的路由。&lt;/p&gt;

&lt;h3 id=&quot;节省费用的应用&quot;&gt;节省费用的应用&lt;/h3&gt;

&lt;p&gt;网络管理员可以根据通信的状况，让一些比较大的阵发性通信使用一些带宽比较高但是比较贵的路径一段短的时间，然后让基本的通信继续使用原来比较便宜的基本线路。例如，管理员知道，某一台主机与一个特定的地址通信通常是伴随着大量的阵发性通信的，那么网络管理员可以安排一些策略，使得这些主机使用特别的路由，这些路由是按需拨号，带宽比较高的线路，通信完成以后就停止使用，而普通的通信则不受影响。这样既提高网络的性能，又能节省费用。&lt;/p&gt;

&lt;h3 id=&quot;负载平衡load-sharing&quot;&gt;负载平衡（Load Sharing）&lt;/h3&gt;
&lt;p&gt;根据网络交通的特征，网络管理员可以在不同的路径之间分配负荷实现负载平衡。&lt;/p&gt;

&lt;h2 id=&quot;linux下策略性路由的实现rpdbroutingpolicy-database&quot;&gt;Linux下策略性路由的实现–RPDB（Routing　Policy DataBase）&lt;/h2&gt;

&lt;p&gt;在Linux下，策略性路由是由RPDB实现的。对于RPDB的内部机制的理解，可以加深对于策略性路由使用的理解。这里分析的是linux 2.4.18的RPDB实现的细节。主要的实现文件包括：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fib_hash.c
fib_rules.c
fib_sematic
fib_frontend.c
route.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RDPB主要由多路由表和规则组成。路由表以及对其的操作和其对外的接口是整个RPDB的核心部分。路由表主要由table，zone，node这些主要的数据结构构成。对路由表的操作主要包含物理的操作以及语义的操作。路由表除了向IP层提供路由寻找的接口以外还必须与几个元素提供接口：与用户的接口（即更改路由）、proc的接口、IP层控制接口、以及和硬件的接口（网络接口的改变会导致路由表内容的改变）。处在RDPB的中心的规则，由规则选取表。IP层并不直接使用路由表，而是通过一个路由适配层,路由适配层提供为IP层提供高性能的路由服务。&lt;/p&gt;

&lt;h3 id=&quot;路由表fib-table&quot;&gt;路由表（Fib Table）&lt;/h3&gt;
&lt;p&gt;数据结构：&lt;/p&gt;

&lt;p&gt;在整个策略性路由的框架里，路由表是最重要的的数据结构，我们在上面以及对路由表的概念和结构进行了清楚的说明。Linux里通过下面这些主要的数据结构进行实现的。&lt;/p&gt;

&lt;p&gt;主要的数据结构 作用 位置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct fib_table 路由表 ip_fib.h 116
struct fn_hash 路由表的哈希数据 fib_hash.c 104
struct fn_zone zone域 fib_hash.c 85
struct fib_node 路由节点 fib_hash.c 68
struct fib_info 路由信息 ip_fib.h 57
struct fib_result 路由结果 ip_fib.h 86
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数据结构之间的主要关系如下。路由表由路由表号以及路由表的操作函数指针还有表数据组成。这里需要注意的是，路由表结构里并不直接定义zone域，而是通过一个数据指针指向fn_hash。只有当zone里有数据才会连接到fn_zone_list里。（如图）
系统的所有的路由表由数组变量&lt;em&gt;fib_tables[RT_TABLE_MAX+1]维护，其中系统定义RT_TABLE_MAX为254，也就是说系统最大的路由表为255张，所有的路由表的操作都是对这个数组进行的。。同时系统还定义了三长路由表&lt;/em&gt;local_table; *main_table。&lt;/p&gt;

&lt;h3 id=&quot;路由表的操作&quot;&gt;路由表的操作：&lt;/h3&gt;

&lt;p&gt;Linux策略路由代码的主要部分是对路由表的操作。对于路由表的操作，物理操作是直观的和易于理解的。对于表的操作不外乎就是添加、删除、更新等的操作。还有一种操作，是所谓的语义操作，语义操作主要是指诸如计算下一条的地址，把节点转换为路由项，寻找指定信息的路由等。&lt;/p&gt;

&lt;p&gt;1、物理操作(operation)：&lt;/p&gt;

&lt;p&gt;路由表的物理操作主要包括如下这些函数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;路由标操作 实现函数 位置

新建路由表

删除路由表

搜索路由 fn_hash_lookup fib_hash.c 269

插入路由到路由表 fn_hash_insert fib_hash.c 341

删除路由表的路由 fn_hash_delete

fn_hash_dump

fib_hash.c 433

fib_hash.c 614
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更新路由表的路由 fn_hash_flush fib_hash.c 729&lt;/p&gt;

&lt;p&gt;显示路由表的路由信息 fn_hash_get_info fib_hash.c 750&lt;/p&gt;

&lt;p&gt;选择默认路由 fn_hash_select_default fib_hash.c 842&lt;/p&gt;

&lt;p&gt;　　2、语义操作(semantics operation)：
　　语义操作并不涉及路由表整体框架的理解，而且，函数名也是不言自明的，所以请大家参考fib_semantics.c。&lt;/p&gt;

&lt;p&gt;　　3、接口(front end)
　　对于路由表接口的理解，关键在于理解那里有&lt;/p&gt;

&lt;p&gt;　　IP
　　首先是路由表于IP层的接口。路由在目前linux的意义上来说，最主要的还是IP层的路由，所以和IP层的的接口是最主要的接口。和ip层的衔接主要是向IP层提供寻找路由、路由控制、寻找指定ip的接口。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fil_lookup
ip_rt_ioctl fib_frontend.c 286;&quot; f
ip_dev_find 145
Inet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;路由表还必须提供配置接口，即用户直接操作路由的接口，例如增加和删除一条路由。当然在策略性路由里，还有规则的添加和删除。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;inet_rtm_delroute 351
inet_rtm_newroute 366
inet_check_attr 335
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;proc&lt;/p&gt;

&lt;p&gt;在/proc/net/route里显示路由信息。&lt;/p&gt;

&lt;p&gt;fib_get_procinfo&lt;/p&gt;

&lt;p&gt;　　4、网络设备（net dev event）
　　路由是和硬件关联的，当网络设备启动或关闭的时候，必须通知路由表的管理程序，更新路由表的信息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fib_disable_ip 567
fib_inetaddr_event 575
fib_netdev_event
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　5、内部维护（ magic）&lt;/p&gt;

&lt;p&gt;上面我们提到，本地路由表（local table）的维护是由系统自动进行的。也就是说当用户为硬件设置IP地址等的时候，系统自动在本地路由表里添加本地接口地址以及广播地址。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fib_magic 417
fib_add_ifaddr 459
fib_del_ifaddr 498
Rule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rule&quot;&gt;Rule&lt;/h2&gt;
&lt;p&gt;1、数据结构&lt;/p&gt;

&lt;p&gt;规则在fib_rules.c的52行里定义为 struct fib_rule。而RPDB里所有的路由是保存在101行的变量fib_rules里的，注意这个变量很关键，它掌管着所有的规则，规则的添加和删除都是对这个变量进行的。&lt;/p&gt;

&lt;p&gt;2、系统定义规则：
fib_rules被定义以后被赋予了三条默认的规则：默认规则，本地规则以及主规则。&lt;/p&gt;

&lt;p&gt;u 本地规则local_rule&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static struct fib_rule local_rule = {
	r_next: &amp;amp;main_rule, /*下一条规则是主规则*/
	r_clntref: ATOMIC_INIT(2),
	r_table: RT_TABLE_LOCAL, /*指向本地路由表*/
	r_action: RTN_UNICAST, /*动作是返回路由*/

};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主规则main_rule&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static struct fib_rule main_rule = {
	r_next: &amp;amp;default_rule,/*下一条规则是默认规则*/
	r_clntref: ATOMIC_INIT(2),
	r_preference: 0x7FFE, /*默认规则的优先级32766*/
	r_table: RT_TABLE_MAIN, /*指向主路由表*/
	r_action: RTN_UNICAST, /*动作是返回路由*/
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;默认规则default rule&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static struct fib_rule default_rule = {
	r_clntref: ATOMIC_INIT(2),
	r_preference: 0x7FFF,/*默认规则的优先级32767*/
	r_table: RT_TABLE_DEFAULT,/*指默认路由表*/
	r_action: RTN_UNICAST,/*动作是返回路由*/
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;规则链的链头指向本地规则。&lt;/p&gt;
&lt;h3 id=&quot;rpdb的中心函数fib_lookup&quot;&gt;RPDB的中心函数fib_lookup&lt;/h3&gt;

&lt;p&gt;现在到了讨论RPDB的实现的的中心函数fib_lookup了。RPDB通过提供接口函数fib_lookup，作为寻找路由的入口点，在这里有必要详细讨论这个函数，下面是源代码：&lt;/p&gt;

&lt;p&gt;上面的这段代码的思路是非常的清晰的。首先程序从优先级高到低扫描所有的规则，如果规则匹配，处理该规则的动作。如果是普通的路由寻址或者是nat地址转换的换，首先从规则得到路由表，然后对该路由表进行操作。这样RPDB终于清晰的显现出来了。&lt;/p&gt;
&lt;h3 id=&quot;ip层路由适配ip-route&quot;&gt;IP层路由适配（IP route）&lt;/h3&gt;

&lt;p&gt;路由表以及规则组成的系统，可以完成路由的管理以及查找的工作，但是为了使得IP层的路由工作更加的高效，linux的路由体系里，route.c里完成大多数IP层与RPDB的适配工作，以及路由缓冲（route cache）的功能。&lt;/p&gt;
&lt;h3 id=&quot;调用接口&quot;&gt;调用接口&lt;/h3&gt;

&lt;p&gt;IP层的路由接口分为发送路由接口以及接收路由接口：&lt;/p&gt;
&lt;h3 id=&quot;发送路由接口&quot;&gt;发送路由接口&lt;/h3&gt;

&lt;p&gt;IP层在发送数据时如果需要进行路由工作的时候，就会调用ip_route_out函数。这个函数在完成一些键值的简单转换以后，就会调用 ip_route_output_key函数，这个函数首先在缓存里寻找路由，如果失败就会调用 ip_route_output_slow，ip_route_output_slow里调用fib_lookup在路由表里寻找路由，如果命中，首先在缓存里添加这个路由，然后返回结果。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip_route_out route.h
ip_route_output_key route.c 1984;
ip_route_output_slow route.c 1690;&quot; ### 接收路由接口
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IP层接到一个数据包以后，如果需要进行路由，就调用函数ip_route_input，ip_route_input现在缓存里寻找，如果失败则 ip_route_inpu调用ip_route_input_slow， ip_route_input_slow里调用fib_lookup在路由表里寻找路由，如果命中，首先在缓存里添加这个路由，然后返回结果。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip_route_input_slow route.c 1312;&quot; f
ip_route_input route.c 1622;&quot; f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cache&quot;&gt;cache&lt;/h3&gt;

&lt;p&gt;路由缓存保存的是最近使用的路由。当IP在路由表进行路由以后，如果命中就会在路由缓存里增加该路由。同时系统还会定时检查路由缓存里的项目是否失效，如果失效则清除。&lt;/p&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://blog.csdn.net/freeking101/article/details/68939059&quot; title=&quot;inux ip命令和ifconfig命令&quot;&gt;inux ip命令和ifconfig命令&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux命令之ip</title>
   <link href="http:///cs/linux-ip-1.html"/>
   <updated>2019-11-01T00:00:00+08:00</updated>
   <id>/cs/linux-ip-1</id>
   <content type="html">&lt;h1 id=&quot;linux命令之ip转&quot;&gt;Linux命令之ip$^{[转]}$&lt;/h1&gt;
&lt;p&gt;**ip [ OPTIONS ] OBJECT { COMMAND | help }&lt;/p&gt;

&lt;p&gt;这一条命令几乎包含了所有使用方法，其中&lt;/p&gt;

&lt;p&gt;对象&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OBJECT={ link | addr | addrlabel | route | rule | neigh | ntable | tunnel | maddr | mroute | mrule | monitor | xfrm | token }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;选项&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OPTIONS={ -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] | -h[uman-readable] | -iec | -f[amily] { inet | inet6 | ipx | dnet | link } | -o[neline] | -t[imestamp] | -b[atch] [filename] | -rc[vbuf] [size] } &amp;lt;!-- more --&amp;gt; 不过COMMAND比较长，请使用’ip OBJECT help’查看。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;剩下的如下显示：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip [-force] -batch filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;ip是iproute2软件包里面的一个强大的网络配置工具，用来显示或操作路由、网络设备、策略路由和隧道，它能够替代一些传统的网络管理工具，例如ifconfig、route等。用ip配置的设备信息，大部分会在设备重启后还原，如果想永久保留配置，请尽量进入配置文件修改。&lt;/p&gt;

&lt;p&gt;(1).对象&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;link 网络设备
address 设备上的协议（IP或IPv6）地址
addrlabel 协议地址选择的标签配置
neighbour ARP或NDISC缓存条目
route 路由表条目
rule 路由策略数据库中的规则
maddress 组播地址
mroute 组播路由缓存条目
tunnel IP隧道
xfrm IPSec协议框架 所有对象的名称可以用完整或缩写形式书写，例如address可以缩写成addr或只是a。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;(2).选项&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-V，-Version 显示指令版本信息
-s,-stats,statistics 输出详细信息
-h,-human,-human-readable 输出人类可读的统计信息和后缀
-iec 以IEC标准单位打印人类可读速率（例如1K=1024）
-f,-family &amp;lt;FAMILY&amp;gt; 指定要使用的协议族。协议族标识可以是inet、inet6、ipx、dnet或link之一。如果此选项不存在，则从其他参数中推测协议族。如果命令行的其余部分没有提供足够的信息来推测该族，则ip会退回到默认值，通常是inet或any。link是一个特殊的系列标识符，表示不涉及网络协议。
-4 –family inet的快捷方式
-6 –family inet6的快捷方式
-0 –family link的快捷方式
-o,-oneline 将每条记录输出到一行，用’\’字符替换换行符。
-r,-resolve 使用系统名称解析程序来打印DNS名称而不是主机地址。 (3).实例
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意：以下介绍的ip命令都是临时配置，一但重启就会还原，如&lt;code class=&quot;highlighter-rouge&quot;&gt;service network restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看所有IP地址&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a/addr/address
ip a/addr/address sh/show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看指定IP地址&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a/addr/address sh/show dev eth1
ip a/addr/address sh/show eth1

[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever

[root@CentOS6 桌面]# ip a sh eth1
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever 增加或删除IP地址

ip a/addr/address add 192.168.78.130/24 dev eth1
ip a/addr/address del/delete 192.168.78.130/24 dev eth1

[root@CentOS6 桌面]# ip a add 192.168.78.130/24 dev eth1
[root@CentOS6 桌面]# ip a sh eth1
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1
inet 192.168.78.130/24 scope global secondary eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link valid_lft forever preferred_lft forever
[root@CentOS6 桌面]# ip a del 192.168.78.130/24 dev eth1
[root@CentOS6 桌面]# ip a sh eth1
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever 删除eth1所有IP地址

ip a flush dev eth1
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1 
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever
[root@CentOS6 桌面]# ip a add 192.168.78.130/24 dev eth1
[root@CentOS6 桌面]# ip a add 192.168.78.131/24 dev eth1
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
   valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1
inet 192.168.78.130/24 scope global secondary eth1
inet 192.168.78.131/24 scope global secondary eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever
[root@CentOS6 桌面]# ip a flush dev eth1
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff 删除eth1的所有IPv4的IP地址

ip -4 a flush dev eth1
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever
[root@CentOS6 桌面]# ip a add 192.168.78.130/24 dev eth1
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.129/24 brd 192.168.78.255 scope global eth1
inet 192.168.78.130/24 scope global secondary eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever
[root@CentOS6 桌面]# ip -4 a flush dev eth1
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever 查看网络设备信息

ip link sh/show/l/list/ls
ip link sh/show/l/ls/lsit eth1
ip link sh/show/l/ls/list dev eth1
[root@CentOS6 桌面]# ip link l
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
[root@CentOS6 桌面]# ip link l eth1
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
[root@CentOS6 桌面]# ip link l dev eth1
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff 停止与激活网络设备

ip link set dev eth1 down
ip link set dev eth1 up
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.133/24 brd 192.168.78.255 scope global eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever
[root@CentOS6 桌面]# ip link set dev eth1 down
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc pfifo_fast state DOWN qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.133/24 brd 192.168.78.255 scope global eth1
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc pfifo_fast state DOWN qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
[root@CentOS6 桌面]# ip link set dev eth1 up
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever
[root@CentOS6 桌面]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
link/ether 00:0c:29:42:9f:ce brd ff:ff:ff:ff:ff:ff
inet 192.168.78.133/24 brd 192.168.78.255 scope global eth1
inet6 fe80::20c:29ff:fe42:9fce/64 scope link
valid_lft forever preferred_lft forever 查看路由表

ip r/ro/route
ip r/ro/route sh/show
ip r/ro/route sh/show dev eth1
[root@CentOS6 桌面]# ip r
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
default via 192.168.78.2 dev eth1  proto static
[root@CentOS6 桌面]# ip r sh dev eth1
192.168.78.0/24  proto kernel  scope link  src 192.168.78.133  metric 1
default via 192.168.78.2  proto static 添加或删除路由

ip r/ro/route add 192.168.79.0/24 dev eth1
ip r/ro/route d/del/delete 192.168.79.0/24
ip r/ro/route d/del/delete 192.168.79.0/24 dev eth1
[root@CentOS6 桌面]# ip r
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
default via 192.168.78.2 dev eth1  proto static
[root@CentOS6 桌面]# ip r add 192.168.79.0/24 dev eth1
[root@CentOS6 桌面]# ip r
192.168.79.0/24 dev eth1  scope link
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
default via 192.168.78.2 dev eth1  proto static
[root@CentOS6 桌面]# ip r d 192.168.79.0/24 dev eth1
[root@CentOS6 桌面]# ip r
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
default via 192.168.78.2 dev eth1  proto static 默认路由的删除、添加与修改

ip r/ro/route d/del/delete default
ip r/ro/route add default via 192.168.78.1
ip r/ro/route chg/change default via 192.168.78.2
[root@CentOS6 桌面]# ip r
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
default via 192.168.78.2 dev eth1  proto static
[root@CentOS6 桌面]# ip r d default
[root@CentOS6 桌面]# ip r
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
[root@CentOS6 桌面]# ip r add default via 192.168.78.1
[root@CentOS6 桌面]# ip r
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
default via 192.168.78.1 dev eth1
[root@CentOS6 桌面]# ip r chg default via 192.168.78.2
[root@CentOS6 桌面]# ip r
192.168.78.0/24 dev eth1  proto kernel  scope link  src 192.168.78.133  metric 1
192.168.78.0/24 dev eth2  proto kernel  scope link  src 192.168.78.132  metric 1
default via 192.168.78.2 dev eth1 查看ARP表

ip n/neigh/neighbuor sh/show
[root@CentOS6 桌面]# ip n
192.168.78.2 dev eth1 lladdr 00:50:56:f0:d4:05 REACHABLE
192.168.78.2 dev eth2 lladdr 00:50:56:f0:d4:05 STALE
192.168.78.254 dev eth2 lladdr 00:50:56:f5:45:c8 STALE 参考：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/freeking101/article/details/68939059&quot; title=&quot;linux ip命令和ifconfig命令&quot;&gt;linux ip命令和ifconfig命令&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://www.cnblogs.com/diantong/p/9511072.html&quot; title=&quot;Linux命令之ip&quot;&gt;Linux命令之ip&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何在安卓系统中编译 Tex 文档</title>
   <link href="http:///cs/texlive-on-termux.html"/>
   <updated>2019-10-31T00:00:00+08:00</updated>
   <id>/cs/texlive-on-termux</id>
   <content type="html">&lt;h1 id=&quot;如何在安卓系统中编译-tex-文档-转&quot;&gt;如何在安卓系统中编译 Tex 文档 ?$^{[转]}$&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;导语：Tex（.tex） 文档本质上是一个文本文件，因此，要在手机上编辑 Tex 文档并不算什么难事，只要安装一个文本编辑器就可以了。不过，如果想在手机上本地编译 Tex 文档输出 PDF 文件，则需要一定的折腾精神。 针对安卓系统，小编推荐的解决方案是：Termux + TexLive。`
&lt;!-- more --&gt;
Tex（.tex） 文档本质上是一个文本文件，因此，要在手机上编辑 Tex 文档并不算什么难事，只要安装一个文本编辑器就可以了。不过，如果想在手机上本地编译 Tex 文档输出 PDF 文件，则需要一定的折腾精神。 针对安卓系统，小编推荐的解决方案是：Termux + TexLive。 Termux 是安卓系统下的一款 Linux 终端模拟器，其最大特点是不需要对系统进行 root 操作。更多介绍可以访问 Termux 的官网：termux.com。&lt;/p&gt;
  &lt;h1 id=&quot;第一步安装-termux&quot;&gt;第一步：安装 Termux&lt;/h1&gt;
  &lt;p&gt;在应用商店里面搜索 Termux，然后下载、安装即可。 目前，Google Play 上的最新版本为 0.60。不过，国内的几大应用商店要么是搜不到，要么就是版本比较老旧。 有想法的小伙伴可以到 Google Play 上去下载，具体链接为：https://play.google.com/store/apps/details?id=com.termux。&lt;/p&gt;
  &lt;h1 id=&quot;第二步安装-texlive&quot;&gt;第二步：安装 TexLive&lt;/h1&gt;
  &lt;p&gt;TexLive 的安装方法也比较简单，打开 Termux，输入以下命令即可：&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkg install texLive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;第三步配置-texlive&quot;&gt;第三步：配置 TexLive&lt;/h1&gt;
&lt;p&gt;理论上，TexLive 安装完成后，就可以使用了。但是要想进行复杂的写作（比如中文支持、中文字体、参考文献等），还需要一些必要的设置。 如果你十分清楚自己需要哪些宏包，可以通过 tlmgr install 命令一个一个地安装，比如：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tlmgr install ctex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果空间允许，可以像小编一样把所有宏包都安装了，省得以后烦心：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tlmgr install scheme-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外，可以用 tlmgr info 命令来查询已安装宏包的版本信息，比如：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tlmgr info ctex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于命令 tlmgr 的详细用法查阅 http://tug.org/texlive/tlmgr.html。&lt;/p&gt;
&lt;h1 id=&quot;第四步编译方式与字体设置&quot;&gt;第四步：编译方式与字体设置&lt;/h1&gt;
&lt;p&gt;由于安卓系统本身的限制，在完成 Tex 编译环境的配置之后，还需要解决一下字体的问题。 
如果安卓系统已经 root，可以把一些常用的字体拷贝到对应的文件夹下，此时选用何种编译命令只要看 Tex 文档的要求。如果系统没有 root，就需要在 Tex 文档中设置一下字体，此时只能使用 &lt;strong&gt;xelatex&lt;/strong&gt; 命令。 
这里推荐使用 fandol 字体，可以通过 &lt;strong&gt;tlmgr install fandol&lt;/strong&gt; 命令直接安装，无需系统 root。在文档中引用 xeCJK 宏包，具体如下：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackag{xeCJK} 
\newCJKfontfamily
\hei{FandolHei-Regular.otf} 
\newCJKfontfamily\song{FandolSong-Regular.otf}
\newCJKfontfamily\kaiti{FandolKai-Regular.otf}
\newCJKfontfamily\fang{FandolFang-Regular.otf}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;第五步文档编译&quot;&gt;第五步：文档编译&lt;/h1&gt;
&lt;p&gt;打开 Termux，切换至文档目录，即可使用命令进行编译。&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /storage/emulated/0/.../文档目录
xelatex 文档名称.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;开始在安卓系统中畅快使用 Tex 吧！ 
其他问题 如果出现类似 “I can’t write on file ‘xxx.log’” 的错误，把文件夹拷贝到内置存储卡即可。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;原文：&lt;a href=&quot;http://www.hijtr.com/android-latex/&quot; title=&quot;如何在安卓系统中编译 Tex 文档&quot;&gt;如何在安卓系统中编译 Tex 文档？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>关于Termux的一些链接</title>
   <link href="http:///cs/termux-links.html"/>
   <updated>2019-10-25T00:00:00+08:00</updated>
   <id>/cs/termux-links</id>
   <content type="html">&lt;h1 id=&quot;有用的链接&quot;&gt;有用的链接，&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sqlsec.com/2018/05/termux.html&quot; title=&quot;Termux 高级终端安装使用配置教程&quot;&gt;Termux 高级终端安装使用配置教程&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>有用资源</title>
   <link href="http:///sch/you-yong-zi-yuan.html"/>
   <updated>2019-10-24T00:00:00+08:00</updated>
   <id>/sch/you-yong-zi-yuan</id>
   <content type="html">&lt;h1 id=&quot;有用的链接&quot;&gt;有用的链接，&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/pub/books/math/math/tj_math.html&quot; title=&quot;数学基础知识库&quot;&gt;数学基础知识库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/pub/books/math/fortran/Index.htm&quot; title=&quot;Fortran77和90/95编程入门&quot;&gt;Fortran77和90/95编程入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/pub/books/gits/git-guide/index.html&quot; title=&quot;git - 简易指南&quot;&gt;git简易指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/pub/books/gits/simplegit/index.htm&quot; title=&quot;深入浅出Git教程（转载）&quot;&gt;深入浅出Git教程（转载）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitee.com/all-about-git&quot; title=&quot;Git大全&quot;&gt;Git大全&lt;/a&gt;
&lt;!-- more --&gt;
    &lt;h2 id=&quot;生活信息&quot;&gt;生活信息，&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://typhoon.weather.com.cn/gis/typhoon_full.shtml&quot; title=&quot;台风路径&quot;&gt;台风路径&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 
</feed>