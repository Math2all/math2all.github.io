<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Math2all's</title>
		<description>很喜欢Jekyll来做静态站点，效果非常好。</description>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>数字转人民币大写</title>
				<description>&lt;link href=&quot;/imgs/2017-07-29-digital-number-to-rmb/base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;style type=&quot;text/css&quot;&gt;
.box {
	width:950px;
	margin-left:auto;
	margin-right:auto;
	line-height:180%;
	font-size:13px;
}
h3 {
	color:#e35d04;
	text-align:center;
	background:#e4efff;
	font-size:14px;
	padding:6px 0 4px 0
}
.button {
	width:130px;
	height:27px;
	line-height:27px;
	font-size:13px;
	letter-spacing:0;
	text-align:center;
	color:#fff;
	background:url(&quot;/imgs/2017-07-29-digital-number-to-rmb/bg_search1.gif) no-repeat;
	margin-left:65px;
	border:none;
	cursor:pointer
}
p {
	margin:15px 0
}
.input2, .inputtext, .inputtext-bor {
	height:30px;
	line-height:30px
}
input {
	font-size:14px;
}
#jg {
	/* 显示框样式表*/
FOTN-SIZE:14PX;
	padding:3px;
	border:1px solid #888;
	width:96%;
	text-align:right;
}
a:visited, a:link {
	text-decoration:none;
}
* {
	margin:0;
}
/*
body {
	background-color: #99CC66;
}*/
table {
	border:2px solid #fff;
}
#main {
	/* 包含表格层样式*/
margin:150px auto 0 auto;
	padding:20px;
	background-color: #999966;
	border-top:1px solid #FFF;
	border-bottom:1px solid #FFF;
}
#copyright {
	font-size:12px;
	color:#555;
	background-color: #CCCC66;
	padding:3px;
	text-align:center;
	border:1px solid #eee;
}
&lt;/style&gt;

&lt;script language=&quot;JavaScript&quot; type=&quot;text/JavaScript&quot;&gt;
function convertCurrency(currencyDigits) { 
// Constants: 
    var MAXIMUM_NUMBER = 99999999999.99; 
    // Predefine the radix characters and currency symbols for output: 
    var CN_ZERO = &quot;零&quot;; 
    var CN_ONE = &quot;壹&quot;; 
    var CN_TWO = &quot;贰&quot;; 
    var CN_THREE = &quot;叁&quot;; 
    var CN_FOUR = &quot;肆&quot;; 
    var CN_FIVE = &quot;伍&quot;; 
    var CN_SIX = &quot;陆&quot;; 
    var CN_SEVEN = &quot;柒&quot;; 
    var CN_EIGHT = &quot;捌&quot;; 
    var CN_NINE = &quot;玖&quot;; 
    var CN_TEN = &quot;拾&quot;; 
    var CN_HUNDRED = &quot;佰&quot;; 
    var CN_THOUSAND = &quot;仟&quot;; 
    var CN_TEN_THOUSAND = &quot;万&quot;; 
    var CN_HUNDRED_MILLION = &quot;亿&quot;; 
    var CN_SYMBOL = &quot;人民币&quot;; 
    var CN_DOLLAR = &quot;元&quot;; 
    var CN_TEN_CENT = &quot;角&quot;; 
    var CN_CENT = &quot;分&quot;; 
    var CN_INTEGER = &quot;整&quot;; 
     
// Variables: 
    var integral;    // Represent integral part of digit number. 
    var decimal;    // Represent decimal part of digit number. 
    var outputCharacters;    // The output result. 
    var parts; 
    var digits, radices, bigRadices, decimals; 
    var zeroCount; 
    var i, p, d; 
    var quotient, modulus; 
     
// Validate input string: 
    currencyDigits = currencyDigits.toString(); 
    if (currencyDigits == &quot;&quot;) { 
        alert(&quot;请输入小写金额！&quot;); 
        return &quot;&quot;; 
    } 
    if (currencyDigits.match(/[^,.\d]/) != null) { 
        alert(&quot;小写金额含有无效字符！&quot;); 
        return &quot;&quot;; 
    } 
    if ((currencyDigits).match(/^((\d{1,3}(,\d{3})*(.((\d{3},)*\d{1,3}))?)|(\d+(.\d+)?))$/) == null) { 
        alert(&quot;小写金额的格式不正确！&quot;); 
        return &quot;&quot;; 
    } 
     
// Normalize the format of input digits: 
    currencyDigits = currencyDigits.replace(/,/g, &quot;&quot;);    // Remove comma delimiters. 
    currencyDigits = currencyDigits.replace(/^0+/, &quot;&quot;);    // Trim zeros at the beginning. 
    // Assert the number is not greater than the maximum number. 
    if (Number(currencyDigits) &gt; MAXIMUM_NUMBER) { 
        alert(&quot;金额过大，应小于1000亿元！&quot;); 
        return &quot;&quot;; 
    } 
     
// Process the coversion from currency digits to characters: 
    // Separate integral and decimal parts before processing coversion: 
    parts = currencyDigits.split(&quot;.&quot;); 
    if (parts.length &gt; 1) { 
        integral = parts[0]; 
        decimal = parts[1]; 
        // Cut down redundant decimal digits that are after the second. 
        decimal = decimal.substr(0, 2); 
    } 
    else { 
        integral = parts[0]; 
        decimal = &quot;&quot;; 
    } 
    // Prepare the characters corresponding to the digits: 
    digits = new Array(CN_ZERO, CN_ONE, CN_TWO, CN_THREE, CN_FOUR, CN_FIVE, CN_SIX, CN_SEVEN, CN_EIGHT, CN_NINE); 
    radices = new Array(&quot;&quot;, CN_TEN, CN_HUNDRED, CN_THOUSAND); 
    bigRadices = new Array(&quot;&quot;, CN_TEN_THOUSAND, CN_HUNDRED_MILLION); 
    decimals = new Array(CN_TEN_CENT, CN_CENT); 
    // Start processing: 
    outputCharacters = &quot;&quot;; 
    // Process integral part if it is larger than 0: 
    if (Number(integral) &gt; 0) { 
        zeroCount = 0; 
        for (i = 0; i &lt; integral.length; i++) { 
            p = integral.length - i - 1; 
            d = integral.substr(i, 1); 
            quotient = p / 4; 
            modulus = p % 4; 
            if (d == &quot;0&quot;) { 
                zeroCount++; 
            } 
            else { 
                if (zeroCount &gt; 0) 
                { 
                    outputCharacters += digits[0]; 
                } 
                zeroCount = 0; 
                outputCharacters += digits[Number(d)] + radices[modulus]; 
            } 
            if (modulus == 0 &amp;&amp; zeroCount &lt; 4) { 
                outputCharacters += bigRadices[quotient]; 
                zeroCount = 0; 
            } 
        } 
        outputCharacters += CN_DOLLAR; 
    } 
    // Process decimal part if there is: 
    if (decimal != &quot;&quot;) { 
        for (i = 0; i &lt; decimal.length; i++) { 
            d = decimal.substr(i, 1); 
            if (d != &quot;0&quot;) { 
                outputCharacters += digits[Number(d)] + decimals[i]; 
            } 
        } 
    } 
    // Confirm and return the final output string: 
    if (outputCharacters == &quot;&quot;) { 
        outputCharacters = CN_ZERO + CN_DOLLAR; 
    } 
    if (decimal == &quot;&quot;) { 
        outputCharacters += CN_INTEGER; 
    } 
    outputCharacters = CN_SYMBOL + outputCharacters; 
    return outputCharacters; 
} 
&lt;/script&gt;

&lt;div id=&quot;page&quot;&gt;
  &lt;div id=&quot;middle&quot;&gt;
    &lt;div class=&quot;top1&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;box_top&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;box&quot;&gt;
       &lt;div class=&quot;conversation&quot;&gt;
        &lt;div&gt;
          &lt;h1&gt;人民币小写在线转换成大写&lt;/h1&gt;
        &lt;/div&gt;
        &lt;div style=&quot;border-bottom:1px solid #e6e6e6; border-top:1px solid #e6e6e6; padding:15px 0; overflow:hidden; _zoom:1&quot;&gt;
          &lt;div style=&quot;padding:30px 0; float:left; width:400px&quot;&gt; 小写金额：
            &lt;input name=&quot;Digits&quot; type=&quot;text&quot; id=&quot;Digits&quot; class=&quot;input2&quot; onfocus=&quot;this.className='inputtext-bor'&quot; onblur=&quot;this.className='inputtext'&quot; value=&quot;1688.99&quot; size=&quot;40&quot; /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            大写金额：
            &lt;input name=&quot;Result&quot; type=&quot;text&quot; class=&quot;input2&quot; id=&quot;Result&quot; size=&quot;40&quot; /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;input id=&quot;Convert&quot; type=&quot;button&quot; class=&quot;button&quot; value=&quot;转换为大写金额&quot; name=&quot;Convert&quot; onclick=&quot;Result.value = convertCurrency(Digits.value);&quot; /&gt;
		   			
 
&lt;script language=&quot;javascript&quot;&gt;
var a,b,c,d;
function shu(x)
{
if (jg.value==0)
	{
	jg.value=x;
	}
else
{
	if (x==&quot;.&quot;)
	{
	var kk=jg.value
	if (kk.indexOf(&quot;.&quot;)&lt;0)
	{jg.value=jg.value+x;}
	}
	else
	{
	jg.value=jg.value+x;
	}
}
//programing by downyi.com
}
function yunsuan(y)
{
	switch (y)
	{
	case &quot;+&quot;:
	d=&quot;+&quot;
	break
	case &quot;-&quot;:
	d=&quot;-&quot;
	break
	case &quot;x&quot;:
	d=&quot;x&quot;
	break
	case &quot;/&quot;:
	d= &quot;/&quot;
	}
a=Number(jg.value);
jg.value=&quot;&quot;
}
function dengyu()
{
b=Number(jg.value)
if(a!=undefined &amp;&amp; b!=0 &amp;&amp; d!=undefined)
{
	switch (d)
	{
	case &quot;+&quot;:
		c=a+b;
		break;
	case &quot;-&quot;:
		c=a-b;
		break;
	case &quot;x&quot;:
		c=a*b;
		break;
	
	case &quot;/&quot;:
		c=a/b;
	}
jg.value=c;
a=0;
b=0;
d=undefined;
Digits.value=c;
Result.value = convertCurrency(Digits.value);
}
}
function qc()
{
a=0;
b=0;
d=undefined;
jg.value=&quot;0&quot;;
}
function shanchu()
{
var bs=jg.value;
bs=bs.substr(0,bs.length-1);
jg.value=bs;
jg.focus();
}
function pf()
{
var h=Number(jg.value);
if (h!=0)
	{
	h=h*h;
	jg.value=h;
	}
}
function jc()
{
var p=1;
var q=parseInt(jg.value)
if (q!=0 &amp;&amp; q!=NaN)
	{
	for (i=1;i&lt;=q;i++)
		{
		p=p*i;
		}
	jg.value=p;
	}

}
function setfocus()
{
jg.focus();
ts=startTime()
}
function kf()
{
if (jg.value!=&quot;.&quot;)
{
jg.value=Math.sqrt(Number(jg.value))
}
}

function checkkey()
{
var p=/[^0-9]/
if (p.test(jg.value)==true)
{
jg.value=&quot;&quot;
jg.focus
}
}
function startTime()
{
var today=new Date()
var h=today.getHours()
var m=today.getMinutes()
var s=today.getSeconds()
m=checkTime(m)
s=checkTime(s)
document.getElementById('sjxs').innerHTML=h+&quot;:&quot;+m+&quot;:&quot;+s
t=setTimeout('startTime()',500)
}

function checkTime(i)
{
if (i&lt;10) 
  {i=&quot;0&quot; + i}
  return i
}
function timeshow()
{

if (document.getElementById('sjxs').style.display!=&quot;none&quot;)
{
document.getElementById('sjxs').style.display=&quot;none&quot;
}
else
{
document.getElementById('sjxs').style.display=&quot;block&quot;
}

}

&lt;/script&gt;

&lt;div style=&quot;display:none&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
_uacct = &quot;UA-99189-7&quot;;
urchinTracker();
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Sat, 29 Jul 2017 00:00:00 +0800</pubDate>
				<link>/2017/07/digital-number-to-rmb</link>
				<guid isPermaLink="true">/2017/07/digital-number-to-rmb</guid>
			</item>
		
	</channel>
</rss>
